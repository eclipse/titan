/******************************************************************************
 * Copyright (c) 2000-2016 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Adrien Kirjak – initial implementation
 *
 ** @version  0.0.1
 ** @purpose  1:B.1.5, Ensure that the IUT correctly handles template quadruple and USI-like syntax matching of character pattern definitions
 ** @verdict  pass accept, ttcn3verdict:pass
 ***************************************************/

module Sem_B0105_toplevel_002 { 


	type record MessageType {
  	 	universal charstring  	field1, 
  	 	universal charstring	field2,
     	universal charstring	field3
	}

    type port loopbackPort message {
	  	inout MessageType
	} with {extension "internal"}

	type component GeneralComp {	    	    
	  	port loopbackPort messagePort
	}	

	testcase TC_Sem_B0105_toplevel_002() runs on GeneralComp {

   		var MessageType v_testMessage;

 		template MessageType mw_matchingTemplate:= {  	
		  	field1 := pattern "\q{0,0,1,113}", //"quadruple" notation for character "Å±"
		  	field2 := pattern "\q{0,0,1,113}*\q{0,0,1,116}", 
			//"quadruple" notation for character "Å±" and "Å´"
		  	field3 := pattern "\q{U0171}" // USI like notation for character "Å±"
 		}
       
 		v_testMessage:=  {  
		  	field1 := "Å±",
		  	field2 := "Å±1234Å´",
		  	field3 := "Å±"
 		} 
 
		connect(self:messagePort, self:messagePort);
 		messagePort.send(v_testMessage);

    	alt {
     		[] messagePort.receive(mw_matchingTemplate) {
        		setverdict(pass,v_testMessage);
     		}
     		[] messagePort.receive {
        		setverdict(fail,"Unexpected decoding result:",v_testMessage);
     		}
    	}
	}

	control{
    	execute(TC_Sem_B0105_toplevel_002());
	}

}
 
