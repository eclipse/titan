/******************************************************************************
 * Copyright (c) 2000-2016 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Adrien Kirjak â€“ initial implementation
 *
 ** @version  0.0.1
 ** @purpose  1:22.3.2, null component in the multicast list of the from clause of the getcall operation
 ** @verdict  pass reject
 *****************************************************************/

// The following requirements are tested:
// No AddressRef shall contain the special value null at the time of the operation.

module NegSem_220302_GetcallOperation_010 {

	signature S();
	
	type port P procedure {
		inout S;
	} with {extension "internal"}
	
    type component GeneralComp {
		port P p;
	}
	
	function f() runs on GeneralComp
	{
        var GeneralComp v_compRef := null;

        alt {
	        [] p.getcall(S:{}) from (v_compRef, mtc) 
				{ setverdict(fail, "first branch, v_compRef: ", v_compRef)}	// error expected
			[] p.getcall(S:{}) { setverdict(pass, "second branch: ", v_compRef); }
        }
	}
	
    testcase TC_NegSem_220302_GetcallOperation_010() runs on GeneralComp system GeneralComp {
        var GeneralComp v_ptc := GeneralComp.create;
		connect(self:p, v_ptc:p);
		p.call(S:{}, nowait);
		v_ptc.start(f());
		v_ptc.done;
        setverdict(pass);
    }

    control {
        execute(TC_NegSem_220302_GetcallOperation_010(), 5.0);
    }
}
