/******************************************************************************
 * Copyright (c) 2000-2016 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Adrien Kirjak â€“ initial implementation
 *
 ** @version  0.0.1
 ** @purpose  1:22.3.6, @decoded redirect value assignment of a hexstring field
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/

// The following requirements are tested:
// When assigning individual fields of an exception, encoded payload fields can be 
// decoded prior to assignment using the @decoded modifier. In this case, the 
// referenced field on the right hand sided of the assignment shall be one of the 
// bitstring, hexstring, octetstring, charstring or universal charstring types. It 
// shall be decoded into a value of the same type as the variable on the left hand 
// side of the assignment.

module Sem_220306_catch_operation_010 {
   	type record R {
        integer id,
        hexstring payload
    }

	signature S() exception (R);
    
	type port P procedure {
		inout S;
	} with {extension "internal"}
	
    type component GeneralComp {
		port P p;
	}
    
    function f_server() runs on GeneralComp {
        var charstring v_src := "abc";
        var R v_rec := { id := 2, payload := bit2hex(encvalue(v_src)) };
        p.getcall(S:?);
        p.raise(S, v_rec);
    }
	
    testcase TC_Sem_220306_catch_operation_010() runs on GeneralComp system GeneralComp {
        var charstring v_res;        
        var GeneralComp v_ptc := GeneralComp.create("PTC");
        connect(self:p, v_ptc:p);
        v_ptc.start(f_server());

        p.call(S:{ }) {
            [] p.catch(S, R:?) -> value (v_res := @decoded payload) { 
                if (v_res == "abc") { setverdict (pass); }
                else { setverdict(fail); }
            }
            [] p.catch { setverdict(fail); }
        }
    }

    control {
        execute(TC_Sem_220306_catch_operation_010(), 5.0);
    }
}
