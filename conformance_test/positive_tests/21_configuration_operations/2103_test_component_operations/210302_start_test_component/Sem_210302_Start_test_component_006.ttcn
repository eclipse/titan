/******************************************************************************
 * Copyright (c) 2000-2016 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Adrien Kirjak â€“ initial implementation
 *
 ** @version  0.0.1
 ** @purpose  1:21.3.2, port reuse in alive component
 ** @verdict  pass accept, ttcn3verdict:pass
 ***************************************************/

// The following requirements are tested:
// If a function is started on an alive-type PTC after termination of a previous 
// function, it uses variable values, timers, ports, and the local verdict as they 
// were left after termination of the previous function.

module Sem_210302_Start_test_component_006 { 

    type port P message {
        inout integer;
    } with {extension "internal"}
    
	type component GeneralComp {
        port P p;
	}
    
    function f_ptcBehaviour() runs on GeneralComp {
        connect(self:p, self:p); // loopback
        p.send(1);
    }

    function f_ptcSecondBehaviour() runs on GeneralComp {
        p.receive(integer:?);
    }

    
	testcase TC_Sem_210302_Start_test_component_006() runs on GeneralComp system GeneralComp {
        var GeneralComp v_ptc := GeneralComp.create("PTC") alive;        
        v_ptc.start(f_ptcBehaviour());        
        v_ptc.done;
        v_ptc.start(f_ptcSecondBehaviour());
        v_ptc.done;
		setverdict(pass);
	}
	
	control{
	    execute(TC_Sem_210302_Start_test_component_006());
	}
}
