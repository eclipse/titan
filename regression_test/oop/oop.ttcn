/******************************************************************************
 * Copyright (c) 2000-2019 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
 *
 * Contributors:
 *   Baranyi, Botond
 *
 ******************************************************************************/
module oop {

type component CT {
  port PT pt;
}

type port PT message { inout integer; } with { extension "internal" }

type record of integer IntList;

///////////////////////////////////////////////////
///////////////////// CLASSES /////////////////////
///////////////////////////////////////////////////

type record Rec {
  charstring str,
  IntList list
}

type class BaseClass runs on CT mtc CT system CT {
  public const integer m_const := 1;
  private const IntList m_const2 := { 1, 2, 3 };
  /*protected*/ var charstring m_var;
  private template octetstring m_temp := ? length (1..4);
  public var template float m_var_temp;
  //private PT m_port; // port members not supported
  /*protected*/ timer m_timer;
  private timer m_timer_array[3];
  
  //public template integer m_temp_pard(integer p) := p; // parameterized template members not supported
  
  // this would also be the implicit constructor's header:
  create(integer p_const, IntList p_const2, charstring p_var,
         template octetstring p_temp, template float p_var_temp) {
    m_const := p_const;
    m_const := 2;
    m_var := p_var;
    m_const2[2] := p_const2[0];
    m_temp := p_temp;
    m_temp := *;
    m_var_temp := p_var_temp;
    //m_port := p_port;
    //m_timer := p_timer;
  }
  
  public function f(in integer x) return integer {
    m_var := m_var & int2str(x);
    return x;
  }
  
  public function f2(in integer x) return Rec {
    var Rec ret_val := { str := int2str(x), list := {} };
    for (var integer i := 0; i < x; i := i + 1) {
      ret_val.list[i] := i;
    }
    return ret_val;
  }
  
  public function get_var() return charstring {
    return m_var;
  }
}
finally {
  //pt.send(-1);
  log(m_var);
}

type class SubClass extends BaseClass {  
  create(integer p_const := 1, IntList p_const2, charstring p_var,
         template octetstring p_temp, template float p_var_temp)
         : BaseClass(p_const, p_const2, p_var, p_temp, p_var_temp) {
    m_const3 := 'FFFF'O;
    m_var := m_var & "x";
  }
  
  const octetstring m_const3 := 'AB'O; // the parser currently doesn't accept constants without initial value
  
  public function f(in integer x) return integer {
    //return super.f(x) - 1; // not supported yet
    m_var := m_var & int2str(x);
    return x - 1;
  }
}

type class @final FinalClass extends SubClass {
  private const integer m_final_const := 1;
  private template charstring m_final_temp := ? length (1..4);
  private var float m_final_var;
  private var template octetstring m_final_var_temp;
  
  public function @final f(in integer x) return integer {
    //return super.super.f(x) + m_final_const; // not supported yet
    m_var := m_var & int2str(x);
    return x + m_final_const;
  }
}


type class @abstract AbstractClass {
  public function @abstract f_abs(inout integer x) return boolean;
  public function f_con(in charstring x) {
    log(x);
  }
}

type class ConcreteClass extends AbstractClass {
  create(octetstring p_const := 'AB'O) {
    // for compilation only, to make sure there are no name clashes between parameter default values
    log(p_const);
  }
  public function f_abs(inout integer x) return boolean {
    x := x + 1;
    return x > 0;
  }
}


type external class ExternalClass {
  public external function f_ext(in integer x) return charstring;
}

type class InternalClass extends ExternalClass {
  public function f_int() return integer {
    return 0;
  }
  public external function f_ext2();
}

testcase tc_members_and_methods() runs on CT {
  var BaseClass v_base := BaseClass.create(4, { 1, 2, 4 }, "a", 'FF'O, (0.0 .. 10.0));
  var IntList il := { 1, 2, 4 };
  var template float tf := (0.0 .. 10.0);
  var BaseClass v_sub := SubClass.create(4, il, "a", 'FF'O, tf);
  var BaseClass v_final := FinalClass.create(4, il, "a", 'FF'O, tf, 8, "x", -1.5, *);
  
  //log(v_base);
  //log(v_sub);
  //log(v_final);
  
  log(v_base.f(6));
  log(v_sub.f(6));
  log(v_final.f(6));
  
  log(v_base.m_const);
  log(v_sub.m_var_temp);
  log(v_final.get_var());
  log(v_final.f2(3).list[1]);
  
  /*if (v_base.f(6) != 6) {
    setverdict(fail, "v_base.f(6) = ", v_base.f(6));
  }
  if (v_sub.f(6) != 5) {
    setverdict(fail, "v_sub.f(6) = ", v_sub.f(6));
  }
  if (v_final.f(6) != 7) {
    setverdict(fail, "v_final.f(6) = ", v_final.f(6));
  }*/
  
  if (log2str(v_base.f(6)) != "6") {
    setverdict(fail, "log2str(v_base.f(6)) = ", log2str(v_base.f(6)));
  }
  
  if (v_base.m_const != 2) {
    setverdict(fail, "v_base.m_const = ", v_base.m_const);
  }
  if (log2str(v_sub.m_var_temp) != "(0.000000 .. 10.000000)") {
    setverdict(fail, "v_sub.m_var_temp = ", v_sub.m_var_temp);
  }
  /*if (v_final.get_var() != "ax66") {
    setverdict(fail, "v_final.get_var() = ", v_final.get_var());
  }
  if (v_final.f2(3).list[1] != 1) {
    setverdict(fail, "v_final.f2(3).list[1] = ", v_final.f2(3).list[1]);
  }*/
  setverdict(pass);
}


control {
  execute(tc_members_and_methods());
}

}
