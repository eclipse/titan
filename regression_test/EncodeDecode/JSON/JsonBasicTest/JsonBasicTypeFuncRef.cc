// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R6B
// for U-ERICSSON\ethbaat (ethbaat@HU-00000670) on Thu Feb 20 17:43:37 2020

// Copyright (c) 2000-2019 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "JsonBasicTypeFuncRef.hh"

namespace JsonBasicTypeFuncRef {

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x00, 0x60, 0x21, 0x42, 0xc4, 0xcf, 0x46, 0x33, 0x78, 0xd8, 0x08, 0x05, 0x6c, 0x2d, 0x57, 0x56 };

/* Global variable definitions */

// No XER for fooref
const TTCN_Typedescriptor_t fooref_descr_ = { "@JsonBasicTypeFuncRef.fooref", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
TTCN_Module module_object("JsonBasicTypeFuncRef", __DATE__, __TIME__, module_checksum, NULL, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_6,
  current_runtime_version.requires_patch_level_1,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

fooref::fooref()
{
referred_function = NULL;
}

fooref::fooref(function_pointer other_value)
{
referred_function = other_value;
}

fooref::fooref(const fooref& other_value)
: Base_Type(){
other_value.must_bound("Copying an unbound @JsonBasicTypeFuncRef.fooref value.");
referred_function = other_value.referred_function;
}

fooref& fooref::operator=(function_pointer other_value)
{
referred_function = other_value;
return *this;
}

fooref& fooref::operator=(const fooref& other_value)
{
other_value.must_bound("Assignment of an unbound value.");
referred_function = other_value.referred_function;
return *this;
}

boolean fooref::operator==(function_pointer other_value) const
{
must_bound("Unbound left operand of @JsonBasicTypeFuncRef.fooref comparison.");
return referred_function == other_value;
}

boolean fooref::operator==(const fooref& other_value) const
{
must_bound("Unbound left operand of @JsonBasicTypeFuncRef.fooref comparison.");
other_value.must_bound("Unbound right operand of @JsonBasicTypeFuncRef.fooref comparison.");
return referred_function == other_value.referred_function;
}

CHARSTRING fooref::invoke(const CHARSTRING& input) const
{
must_bound("Call of unbound function.");
if(referred_function == (fooref::function_pointer)Module_List::get_fat_null())
TTCN_error("null reference cannot be invoked.");
return referred_function(input);
}

void fooref::log() const
{
Module_List::log_function((genericfunc_t)referred_function);
}

void fooref::set_param(Module_Param& param)
{
  param.error("Not supported.");
}

void fooref::encode_text(Text_Buf& text_buf) const
{
Module_List::encode_function(text_buf,(genericfunc_t)referred_function);
}

void fooref::decode_text(Text_Buf& text_buf)
{
Module_List::decode_function(text_buf,(genericfunc_t*)&referred_function);
}

boolean operator==(fooref::function_pointer value, const fooref& other_value)
{
other_value.must_bound("Unbound right operand of @JsonBasicTypeFuncRef.fooref comparison.");
return value == other_value.referred_function;
}

void fooref_template::copy_template(const fooref_template& other_value)
{
switch(other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new fooref_template[value_list.n_values];
for(unsigned int i = 0; i < value_list.n_values; i++)
value_list.list_value[i] = other_value.value_list.list_value[i];
break;
default:
TTCN_error("Copying an unitialized/unsupported @JsonBasicTypeFuncRef.fooref template.");
}
set_selection(other_value);
}

fooref_template::fooref_template()
{
}

fooref_template::fooref_template(template_sel other_value)
  : Base_Template(other_value)
{
check_single_selection(other_value);
}

fooref_template::fooref_template(fooref::function_pointer other_value)
  : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

fooref_template::fooref_template(const fooref& other_value)
  :Base_Template(SPECIFIC_VALUE)
{
other_value.must_bound("Creating a template from an unbound @JsonBasicTypeFuncRef.fooref value.");
single_value = other_value.referred_function;
}

fooref_template::fooref_template(const OPTIONAL<fooref>& other_value)
{
if(other_value.ispresent()) {
set_selection(SPECIFIC_VALUE);
single_value = ((const fooref&)other_value()).referred_function;
} else set_selection(OMIT_VALUE);
}

fooref_template::fooref_template(const fooref_template& other_value)
  :Base_Template()
{
copy_template(other_value);
}

fooref_template::~fooref_template()
{
  clean_up();
}

void fooref_template::clean_up(){
if(template_selection == VALUE_LIST ||
template_selection == COMPLEMENTED_LIST)
delete[] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

fooref_template& fooref_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

fooref_template& fooref_template::operator=(fooref::function_pointer other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;}

fooref_template& fooref_template::operator=(const fooref& other_value)
{
other_value.must_bound("Assignment of an unbound @JsonBasicTypeFuncRef.fooref value to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.referred_function;
return *this;
}

fooref_template& fooref_template::operator=(const OPTIONAL<fooref>& other_value)
{
clean_up();
if(other_value.ispresent()) { 
set_selection(SPECIFIC_VALUE);
single_value = ((const fooref&)other_value()).referred_function;
} else set_selection(OMIT_VALUE);
return *this;}

fooref_template& fooref_template::operator=(const fooref_template& other_value)
{
if(&other_value != this) {
clean_up();copy_template(other_value);
}
return *this;
}

boolean fooref_template::match(fooref::function_pointer other_value, boolean) const
{
switch(template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for(unsigned int i = 0; i < value_list.n_values; i++)
if(value_list.list_value[i].match(other_value))
return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an unitialized/unsupported @JsonBasicTypeFuncRef.fooref template.");
};
return FALSE;
}

boolean fooref_template::match(const fooref& other_value, boolean) const
{
  if (!other_value.is_bound()) return FALSE;
return match(other_value.referred_function);
}

fooref fooref_template::valueof() const
{
if(template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific @JsonBasicTypeFuncRef.fooref template.");
return single_value;
}

void fooref_template::set_type(template_sel template_type, unsigned int list_length)
{
if(template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid type for an @JsonBasicTypeFuncRef.fooref template.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new fooref_template[list_length];
}

fooref_template& fooref_template::list_item(unsigned int list_index) const
{
if(template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @JsonBasicTypeFuncRef.fooref");
if(list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @JsonBasicTypeFuncRef.fooref.");
return value_list.list_value[list_index];
}

void fooref_template::log() const
{
switch(template_selection) {
case SPECIFIC_VALUE:
Module_List::log_function((genericfunc_t)single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for(unsigned int i = 0; i < value_list.n_values; i++) {
if(i > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[i].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void fooref_template::log_match(const fooref& match_value, boolean legacy) const
{
log();
TTCN_Logger::log_event_str(" with ");
match_value.log();
if(match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void fooref_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch(template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case SPECIFIC_VALUE:
Module_List::encode_function(text_buf, (genericfunc_t)single_value);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for(unsigned int i = 0; i < value_list.n_values; i++)
value_list.list_value[i].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @JsonBasicTypeFuncRef.fooref.");
}
}

void fooref_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch(template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case SPECIFIC_VALUE:
Module_List::decode_function(text_buf,(genericfunc_t*)&single_value);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new fooref_template[value_list.n_values];
for(unsigned int i = 0; i < value_list.n_values; i++)
value_list.list_value[i].decode_text(text_buf);
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @JsonBasicTypeFuncRef.fooref.");
}
}

boolean fooref_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean fooref_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void fooref_template::set_param(Module_Param& param)
{
  param.error("Not supported.");
}

void fooref_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@JsonBasicTypeFuncRef.fooref");
}


} /* end of namespace */
