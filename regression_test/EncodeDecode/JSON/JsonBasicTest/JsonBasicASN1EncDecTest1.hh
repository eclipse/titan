// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R6B
// for U-ERICSSON\ethbaat (ethbaat@HU-00000670) on Thu Feb 20 17:43:37 2020

// Copyright (c) 2000-2019 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef JsonBasicASN1EncDecTest1_HH
#define JsonBasicASN1EncDecTest1_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>
#include "JsonBasicASN1Types.hh"

#if TTCN3_VERSION != 60601
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef WIN32
#error This file should be compiled on WIN32
#endif

namespace JsonBasicASN1EncDecTest1 {

/* Type definitions */

typedef COMPONENT CT;
typedef COMPONENT_template CT_template;

/* Function prototypes */

extern BITSTRING f__json__enc__abs2bs(const BITSTRING& p);
extern BITSTRING f__json__enc__abool2bs(const BOOLEAN& p);
extern BITSTRING f__json__enc__abmpstr2bs(const UNIVERSAL_CHARSTRING& p);
extern BITSTRING f__json__enc__anumber2bs(const JsonBasicASN1Types::Asn1__Number& p);
extern BITSTRING f__json__enc__ai2bs(const INTEGER& p);
extern BITSTRING f__json__enc__af2bs(const FLOAT& p);
extern BITSTRING f__json__enc__ao2bs(const OCTETSTRING& p);
extern BITSTRING f__json__dec__bs2abs(const BITSTRING& p);
extern BOOLEAN f__json__dec__bs2abool(const BITSTRING& p);
extern UNIVERSAL_CHARSTRING f__json__dec__bs2abmpstr(const BITSTRING& p);
extern JsonBasicASN1Types::Asn1__Number f__json__dec__bs2anumber(const BITSTRING& p);
extern INTEGER f__json__dec__bs2ai(const BITSTRING& p);
extern FLOAT f__json__dec__bs2af(const BITSTRING& p);
extern OCTETSTRING f__json__dec__bs2ao(const BITSTRING& p);
extern void f__compare__bitstring(const BITSTRING& pl__val, const BITSTRING& pl__expected);
extern verdicttype testcase_tc__asn1__bs2bs(boolean has_timer, double timer_value);
extern verdicttype testcase_tc__asn1__bool2bs(boolean has_timer, double timer_value);
extern verdicttype testcase_tc__asn1__i2bs(boolean has_timer, double timer_value);

/* Global variable declarations */

extern const TTCN_Typedescriptor_t CT_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
