// This C++ header file was generated by the ASN.1 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R6B
// for U-ERICSSON\ethbaat (ethbaat@HU-00000670) on Thu Feb 20 17:43:37 2020

// Copyright (c) 2000-2019 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef JsonBasicASN1Types_HH
#define JsonBasicASN1Types_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>

#if TTCN3_VERSION != 60601
#error Version mismatch detected.\
 Please check the version of the ASN.1 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef WIN32
#error This file should be compiled on WIN32
#endif

#undef JsonBasicASN1Types_HH
#endif

namespace JsonBasicASN1Types {

/* Forward declarations of classes */

class Asn1__Number;
class Asn1__Number_template;
typedef PreGenRecordOf::PREGEN__RECORD__OF__INTEGER Asn1__seqofI;
typedef PreGenRecordOf::PREGEN__RECORD__OF__INTEGER_template Asn1__seqofI_template;
typedef PreGenRecordOf::PREGEN__SET__OF__INTEGER Asn1__setofI;
typedef PreGenRecordOf::PREGEN__SET__OF__INTEGER_template Asn1__setofI_template;

} /* end of namespace */

#ifndef JsonBasicASN1Types_HH
#define JsonBasicASN1Types_HH

namespace JsonBasicASN1Types {

/* Type definitions */

typedef BITSTRING Asn1__bs;
typedef BITSTRING_template Asn1__bs_template;
typedef BOOLEAN Asn1__bool;
typedef BOOLEAN_template Asn1__bool_template;
typedef UNIVERSAL_CHARSTRING Asn1__bmpstr;
typedef UNIVERSAL_CHARSTRING_template Asn1__bmpstr_template;
typedef UNIVERSAL_CHARSTRING Asn1__genstr;
typedef UNIVERSAL_CHARSTRING_template Asn1__genstr_template;
typedef UNIVERSAL_CHARSTRING Asn1__graphstr;
typedef UNIVERSAL_CHARSTRING_template Asn1__graphstr_template;
typedef CHARSTRING Asn1__ia5str;
typedef CHARSTRING_template Asn1__ia5str_template;
typedef INTEGER Asn1__i;
typedef INTEGER_template Asn1__i_template;
typedef FLOAT Asn1__f;
typedef FLOAT_template Asn1__f_template;
typedef ASN_NULL Asn1__null;
typedef ASN_NULL_template Asn1__null_template;
typedef CHARSTRING Asn1__numstr;
typedef CHARSTRING_template Asn1__numstr_template;
typedef OBJID Asn1__oid;
typedef OBJID_template Asn1__oid_template;
typedef OCTETSTRING Asn1__os;
typedef OCTETSTRING_template Asn1__os_template;
typedef CHARSTRING Asn1__pstr;
typedef CHARSTRING_template Asn1__pstr_template;
typedef UNIVERSAL_CHARSTRING Asn1__teletexstr;
typedef UNIVERSAL_CHARSTRING_template Asn1__teletexstr_template;
typedef UNIVERSAL_CHARSTRING Asn1__utf8str;
typedef UNIVERSAL_CHARSTRING_template Asn1__utf8str_template;
typedef UNIVERSAL_CHARSTRING Asn1__videotexstr;
typedef UNIVERSAL_CHARSTRING_template Asn1__videotexstr_template;
typedef CHARSTRING Asn1__visiblestr;
typedef CHARSTRING_template Asn1__visiblestr_template;

/* Class definitions */

class Asn1__Number : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_decimal = 1, ALT_binary = 2, ALT_hexadecimal = 3 };
private:
union_selection_type union_selection;
union {
INTEGER *field_decimal;
BITSTRING *field_binary;
OCTETSTRING *field_hexadecimal;
};
void copy_value(const Asn1__Number& other_value);

public:
Asn1__Number();
Asn1__Number(const Asn1__Number& other_value);
~Asn1__Number();
Asn1__Number& operator=(const Asn1__Number& other_value);
boolean operator==(const Asn1__Number& other_value) const;
inline boolean operator!=(const Asn1__Number& other_value) const { return !(*this == other_value); }
INTEGER& decimal();
const INTEGER& decimal() const;
BITSTRING& binary();
const BITSTRING& binary() const;
OCTETSTRING& hexadecimal();
const OCTETSTRING& hexadecimal() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
ASN_BER_TLV_t* BER_encode_TLV(const TTCN_Typedescriptor_t& p_td, unsigned p_coding) const;
boolean BER_decode_TLV(const TTCN_Typedescriptor_t& p_td, const ASN_BER_TLV_t& p_tlv, unsigned L_form);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean, int p_chosen_field = CHOSEN_FIELD_UNSET);
int OER_encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&) const;
int OER_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, OER_struct&);
private:
boolean BER_decode_set_selection(const ASN_BER_TLV_t& p_tlv);
public:
boolean BER_decode_isMyMsg(const TTCN_Typedescriptor_t& p_td, const ASN_BER_TLV_t& p_tlv);
};

class Asn1__Number_template : public Base_Template {
union {
struct {
Asn1__Number::union_selection_type union_selection;
union {
INTEGER_template *field_decimal;
BITSTRING_template *field_binary;
OCTETSTRING_template *field_hexadecimal;
};
} single_value;
struct {
unsigned int n_values;
Asn1__Number_template *list_value;
} value_list;
};
void copy_value(const Asn1__Number& other_value);

void copy_template(const Asn1__Number_template& other_value);

public:
Asn1__Number_template();
Asn1__Number_template(template_sel other_value);
Asn1__Number_template(const Asn1__Number& other_value);
Asn1__Number_template(const OPTIONAL<Asn1__Number>& other_value);
Asn1__Number_template(const Asn1__Number_template& other_value);
~Asn1__Number_template();
void clean_up();
Asn1__Number_template& operator=(template_sel other_value);
Asn1__Number_template& operator=(const Asn1__Number& other_value);
Asn1__Number_template& operator=(const OPTIONAL<Asn1__Number>& other_value);
Asn1__Number_template& operator=(const Asn1__Number_template& other_value);
boolean match(const Asn1__Number& other_value, boolean legacy = FALSE) const;
boolean is_value() const;Asn1__Number valueof() const;
Asn1__Number_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
INTEGER_template& decimal();
const INTEGER_template& decimal() const;
BITSTRING_template& binary();
const BITSTRING_template& binary() const;
OCTETSTRING_template& hexadecimal();
const OCTETSTRING_template& hexadecimal() const;
boolean ischosen(Asn1__Number::union_selection_type checked_selection) const;
void log() const;
void log_match(const Asn1__Number& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};


/* Function prototypes */

extern void Asn1__bs_encoder(const BITSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__bs_decoder(OCTETSTRING& input_stream, BITSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__bool_encoder(const BOOLEAN& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__bool_decoder(OCTETSTRING& input_stream, BOOLEAN& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__bmpstr_encoder(const UNIVERSAL_CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__bmpstr_decoder(OCTETSTRING& input_stream, UNIVERSAL_CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__Number_decimal_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__Number_decimal_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__Number_binary_encoder(const BITSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__Number_binary_decoder(OCTETSTRING& input_stream, BITSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__Number_hexadecimal_encoder(const OCTETSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__Number_hexadecimal_decoder(OCTETSTRING& input_stream, OCTETSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__Number_encoder(const Asn1__Number& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__Number_decoder(OCTETSTRING& input_stream, Asn1__Number& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__genstr_encoder(const UNIVERSAL_CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__genstr_decoder(OCTETSTRING& input_stream, UNIVERSAL_CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__graphstr_encoder(const UNIVERSAL_CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__graphstr_decoder(OCTETSTRING& input_stream, UNIVERSAL_CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__ia5str_encoder(const CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__ia5str_decoder(OCTETSTRING& input_stream, CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__i_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__i_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__f_encoder(const FLOAT& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__f_decoder(OCTETSTRING& input_stream, FLOAT& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__null_encoder(const ASN_NULL& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__null_decoder(OCTETSTRING& input_stream, ASN_NULL& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__numstr_encoder(const CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__numstr_decoder(OCTETSTRING& input_stream, CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__oid_encoder(const OBJID& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__oid_decoder(OCTETSTRING& input_stream, OBJID& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__os_encoder(const OCTETSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__os_decoder(OCTETSTRING& input_stream, OCTETSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__pstr_encoder(const CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__pstr_decoder(OCTETSTRING& input_stream, CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__seqofI_0_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__seqofI_0_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__seqofI_encoder(const Asn1__seqofI& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__seqofI_decoder(OCTETSTRING& input_stream, Asn1__seqofI& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__setofI_0_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__setofI_0_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__setofI_encoder(const Asn1__setofI& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__setofI_decoder(OCTETSTRING& input_stream, Asn1__setofI& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__teletexstr_encoder(const UNIVERSAL_CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__teletexstr_decoder(OCTETSTRING& input_stream, UNIVERSAL_CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__utf8str_encoder(const UNIVERSAL_CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__utf8str_decoder(OCTETSTRING& input_stream, UNIVERSAL_CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__videotexstr_encoder(const UNIVERSAL_CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__videotexstr_decoder(OCTETSTRING& input_stream, UNIVERSAL_CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Asn1__visiblestr_encoder(const CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Asn1__visiblestr_decoder(OCTETSTRING& input_stream, CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);

/* Global variable declarations */

extern const TTCN_Typedescriptor_t& Asn1__bs_descr_;
extern UNIVERSAL_CHARSTRING Asn1__bs_default_coding;
extern const TTCN_Typedescriptor_t& Asn1__bool_descr_;
extern UNIVERSAL_CHARSTRING Asn1__bool_default_coding;
extern const TTCN_Typedescriptor_t& Asn1__bmpstr_descr_;
extern UNIVERSAL_CHARSTRING Asn1__bmpstr_default_coding;
extern const TTCN_JSONdescriptor_t Asn1__Number_json_;
extern const TTCN_OERdescriptor_t Asn1__Number_oer_;
extern const TTCN_Typedescriptor_t Asn1__Number_descr_;
extern const ASN_BERdescriptor_t Asn1__Number_decimal_ber_;
extern const TTCN_OERdescriptor_t Asn1__Number_decimal_oer_;
extern const TTCN_Typedescriptor_t Asn1__Number_decimal_descr_;
extern UNIVERSAL_CHARSTRING Asn1__Number_decimal_default_coding;
extern const ASN_BERdescriptor_t Asn1__Number_binary_ber_;
extern const TTCN_OERdescriptor_t Asn1__Number_binary_oer_;
extern const TTCN_Typedescriptor_t Asn1__Number_binary_descr_;
extern UNIVERSAL_CHARSTRING Asn1__Number_binary_default_coding;
extern const ASN_BERdescriptor_t Asn1__Number_hexadecimal_ber_;
extern const TTCN_OERdescriptor_t Asn1__Number_hexadecimal_oer_;
extern const TTCN_Typedescriptor_t Asn1__Number_hexadecimal_descr_;
extern UNIVERSAL_CHARSTRING Asn1__Number_hexadecimal_default_coding;
extern UNIVERSAL_CHARSTRING Asn1__Number_default_coding;
extern const TTCN_Typedescriptor_t& Asn1__genstr_descr_;
extern UNIVERSAL_CHARSTRING Asn1__genstr_default_coding;
extern const TTCN_Typedescriptor_t& Asn1__graphstr_descr_;
extern UNIVERSAL_CHARSTRING Asn1__graphstr_default_coding;
extern const TTCN_Typedescriptor_t& Asn1__ia5str_descr_;
extern UNIVERSAL_CHARSTRING Asn1__ia5str_default_coding;
extern const TTCN_Typedescriptor_t& Asn1__i_descr_;
extern UNIVERSAL_CHARSTRING Asn1__i_default_coding;
extern const TTCN_Typedescriptor_t& Asn1__f_descr_;
extern UNIVERSAL_CHARSTRING Asn1__f_default_coding;
extern const TTCN_Typedescriptor_t& Asn1__null_descr_;
extern UNIVERSAL_CHARSTRING Asn1__null_default_coding;
extern const TTCN_Typedescriptor_t& Asn1__numstr_descr_;
extern UNIVERSAL_CHARSTRING Asn1__numstr_default_coding;
extern const TTCN_Typedescriptor_t& Asn1__oid_descr_;
extern UNIVERSAL_CHARSTRING Asn1__oid_default_coding;
extern const TTCN_Typedescriptor_t& Asn1__os_descr_;
extern UNIVERSAL_CHARSTRING Asn1__os_default_coding;
extern const TTCN_Typedescriptor_t& Asn1__pstr_descr_;
extern UNIVERSAL_CHARSTRING Asn1__pstr_default_coding;
extern const TTCN_JSONdescriptor_t Asn1__seqofI_json_;
extern const TTCN_OERdescriptor_t Asn1__seqofI_oer_;
extern const TTCN_Typedescriptor_t Asn1__seqofI_descr_;
extern UNIVERSAL_CHARSTRING Asn1__seqofI_0_default_coding;
extern UNIVERSAL_CHARSTRING Asn1__seqofI_default_coding;
extern const TTCN_JSONdescriptor_t Asn1__setofI_json_;
extern const TTCN_OERdescriptor_t Asn1__setofI_oer_;
extern const TTCN_Typedescriptor_t Asn1__setofI_descr_;
extern UNIVERSAL_CHARSTRING Asn1__setofI_0_default_coding;
extern UNIVERSAL_CHARSTRING Asn1__setofI_default_coding;
extern const TTCN_Typedescriptor_t& Asn1__teletexstr_descr_;
extern UNIVERSAL_CHARSTRING Asn1__teletexstr_default_coding;
extern const TTCN_Typedescriptor_t& Asn1__utf8str_descr_;
extern UNIVERSAL_CHARSTRING Asn1__utf8str_default_coding;
extern const TTCN_Typedescriptor_t& Asn1__videotexstr_descr_;
extern UNIVERSAL_CHARSTRING Asn1__videotexstr_default_coding;
extern const TTCN_Typedescriptor_t& Asn1__visiblestr_descr_;
extern UNIVERSAL_CHARSTRING Asn1__visiblestr_default_coding;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
