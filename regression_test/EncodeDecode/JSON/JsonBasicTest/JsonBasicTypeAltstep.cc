// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R6B
// for U-ERICSSON\ethbaat (ethbaat@HU-00000670) on Thu Feb 20 17:43:37 2020

// Copyright (c) 2000-2019 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "JsonBasicTypeAltstep.hh"

namespace JsonBasicTypeAltstep {

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x2a, 0x1a, 0xae, 0xf0, 0xfc, 0x22, 0xc2, 0xe7, 0x27, 0x6c, 0x3c, 0xa4, 0xae, 0x76, 0xfe, 0xec };

/* Global variable definitions */

// No XER for altstepref
const TTCN_Typedescriptor_t altstepref_descr_ = { "@JsonBasicTypeAltstep.altstepref", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for aref
const TTCN_Typedescriptor_t aref_descr_ = { "@JsonBasicTypeAltstep.aref", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
TTCN_Module module_object("JsonBasicTypeAltstep", __DATE__, __TIME__, module_checksum, NULL, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_6,
  current_runtime_version.requires_patch_level_1,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

altstepref::altstepref()
{
referred_function = NULL;
}

altstepref::altstepref(function_pointer other_value)
{
referred_function = other_value;
}

altstepref::altstepref(const altstepref& other_value)
: Base_Type(){
other_value.must_bound("Copying an unbound @JsonBasicTypeAltstep.altstepref value.");
referred_function = other_value.referred_function;
}

altstepref& altstepref::operator=(function_pointer other_value)
{
referred_function = other_value;
return *this;
}

altstepref& altstepref::operator=(const altstepref& other_value)
{
other_value.must_bound("Assignment of an unbound value.");
referred_function = other_value.referred_function;
return *this;
}

boolean altstepref::operator==(function_pointer other_value) const
{
must_bound("Unbound left operand of @JsonBasicTypeAltstep.altstepref comparison.");
return referred_function == other_value;
}

boolean altstepref::operator==(const altstepref& other_value) const
{
must_bound("Unbound left operand of @JsonBasicTypeAltstep.altstepref comparison.");
other_value.must_bound("Unbound right operand of @JsonBasicTypeAltstep.altstepref comparison.");
return referred_function == other_value.referred_function;
}

void altstepref::invoke_standalone() const
{
((altstepref::standalone_pointer)Module_List::lookup_standalone_address_by_altstep_address((genericfunc_t)referred_function))();
}

Default_Base *altstepref::activate() const
{
return ((altstepref::activate_pointer)Module_List::lookup_activate_address_by_altstep_address((genericfunc_t)referred_function))();
}

alt_status altstepref::invoke() const
{
must_bound("Call of an unbound altstep.");
if(referred_function == (altstepref::function_pointer)Module_List::get_fat_null())
TTCN_error("null reference cannot be invoked.");
return referred_function();
}
void altstepref::log() const
{
Module_List::log_altstep((genericfunc_t)referred_function);
}

void altstepref::set_param(Module_Param& param)
{
  param.error("Not supported.");
}

void altstepref::encode_text(Text_Buf& text_buf) const
{
Module_List::encode_altstep(text_buf,(genericfunc_t)referred_function);
}

void altstepref::decode_text(Text_Buf& text_buf)
{
Module_List::decode_altstep(text_buf,(genericfunc_t*)&referred_function);
}

boolean operator==(altstepref::function_pointer value, const altstepref& other_value)
{
other_value.must_bound("Unbound right operand of @JsonBasicTypeAltstep.altstepref comparison.");
return value == other_value.referred_function;
}

void altstepref_template::copy_template(const altstepref_template& other_value)
{
switch(other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new altstepref_template[value_list.n_values];
for(unsigned int i = 0; i < value_list.n_values; i++)
value_list.list_value[i] = other_value.value_list.list_value[i];
break;
default:
TTCN_error("Copying an unitialized/unsupported @JsonBasicTypeAltstep.altstepref template.");
}
set_selection(other_value);
}

altstepref_template::altstepref_template()
{
}

altstepref_template::altstepref_template(template_sel other_value)
  : Base_Template(other_value)
{
check_single_selection(other_value);
}

altstepref_template::altstepref_template(altstepref::function_pointer other_value)
  : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

altstepref_template::altstepref_template(const altstepref& other_value)
  :Base_Template(SPECIFIC_VALUE)
{
other_value.must_bound("Creating a template from an unbound @JsonBasicTypeAltstep.altstepref value.");
single_value = other_value.referred_function;
}

altstepref_template::altstepref_template(const OPTIONAL<altstepref>& other_value)
{
if(other_value.ispresent()) {
set_selection(SPECIFIC_VALUE);
single_value = ((const altstepref&)other_value()).referred_function;
} else set_selection(OMIT_VALUE);
}

altstepref_template::altstepref_template(const altstepref_template& other_value)
  :Base_Template()
{
copy_template(other_value);
}

altstepref_template::~altstepref_template()
{
  clean_up();
}

void altstepref_template::clean_up(){
if(template_selection == VALUE_LIST ||
template_selection == COMPLEMENTED_LIST)
delete[] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

altstepref_template& altstepref_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

altstepref_template& altstepref_template::operator=(altstepref::function_pointer other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;}

altstepref_template& altstepref_template::operator=(const altstepref& other_value)
{
other_value.must_bound("Assignment of an unbound @JsonBasicTypeAltstep.altstepref value to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.referred_function;
return *this;
}

altstepref_template& altstepref_template::operator=(const OPTIONAL<altstepref>& other_value)
{
clean_up();
if(other_value.ispresent()) { 
set_selection(SPECIFIC_VALUE);
single_value = ((const altstepref&)other_value()).referred_function;
} else set_selection(OMIT_VALUE);
return *this;}

altstepref_template& altstepref_template::operator=(const altstepref_template& other_value)
{
if(&other_value != this) {
clean_up();copy_template(other_value);
}
return *this;
}

boolean altstepref_template::match(altstepref::function_pointer other_value, boolean) const
{
switch(template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for(unsigned int i = 0; i < value_list.n_values; i++)
if(value_list.list_value[i].match(other_value))
return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an unitialized/unsupported @JsonBasicTypeAltstep.altstepref template.");
};
return FALSE;
}

boolean altstepref_template::match(const altstepref& other_value, boolean) const
{
  if (!other_value.is_bound()) return FALSE;
return match(other_value.referred_function);
}

altstepref altstepref_template::valueof() const
{
if(template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific @JsonBasicTypeAltstep.altstepref template.");
return single_value;
}

void altstepref_template::set_type(template_sel template_type, unsigned int list_length)
{
if(template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid type for an @JsonBasicTypeAltstep.altstepref template.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new altstepref_template[list_length];
}

altstepref_template& altstepref_template::list_item(unsigned int list_index) const
{
if(template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @JsonBasicTypeAltstep.altstepref");
if(list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @JsonBasicTypeAltstep.altstepref.");
return value_list.list_value[list_index];
}

void altstepref_template::log() const
{
switch(template_selection) {
case SPECIFIC_VALUE:
Module_List::log_altstep((genericfunc_t)single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for(unsigned int i = 0; i < value_list.n_values; i++) {
if(i > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[i].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void altstepref_template::log_match(const altstepref& match_value, boolean legacy) const
{
log();
TTCN_Logger::log_event_str(" with ");
match_value.log();
if(match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void altstepref_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch(template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case SPECIFIC_VALUE:
Module_List::encode_altstep(text_buf, (genericfunc_t)single_value);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for(unsigned int i = 0; i < value_list.n_values; i++)
value_list.list_value[i].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @JsonBasicTypeAltstep.altstepref.");
}
}

void altstepref_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch(template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case SPECIFIC_VALUE:
Module_List::decode_altstep(text_buf,(genericfunc_t*)&single_value);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new altstepref_template[value_list.n_values];
for(unsigned int i = 0; i < value_list.n_values; i++)
value_list.list_value[i].decode_text(text_buf);
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @JsonBasicTypeAltstep.altstepref.");
}
}

boolean altstepref_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean altstepref_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void altstepref_template::set_param(Module_Param& param)
{
  param.error("Not supported.");
}

void altstepref_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@JsonBasicTypeAltstep.altstepref");
}

void aref::copy_value(const aref& other_value)
{
switch (other_value.union_selection) {
case ALT_a:
field_a = new altstepref(*other_value.field_a);
break;
case ALT_d:
field_d = new DEFAULT(*other_value.field_d);
break;
default:
TTCN_error("Assignment of an unbound union value of type @JsonBasicTypeAltstep.aref.");
}
union_selection = other_value.union_selection;
}

aref::aref()
{
union_selection = UNBOUND_VALUE;
}

aref::aref(const aref& other_value)
: Base_Type(){
copy_value(other_value);
}

aref::~aref()
{
clean_up();
}

aref& aref::operator=(const aref& other_value)
{
if (this != &other_value) {
clean_up();
copy_value(other_value);
}
return *this;
}

boolean aref::operator==(const aref& other_value) const
{
if (union_selection == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of union type @JsonBasicTypeAltstep.aref.");
if (other_value.union_selection == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of union type @JsonBasicTypeAltstep.aref.");
if (union_selection != other_value.union_selection) return FALSE;
switch (union_selection) {
case ALT_a:
return *field_a == *other_value.field_a;
case ALT_d:
return *field_d == *other_value.field_d;
default:
return FALSE;
}
}

altstepref& aref::a()
{
if (union_selection != ALT_a) {
clean_up();
field_a = new altstepref;
union_selection = ALT_a;
}
return *field_a;
}

const altstepref& aref::a() const
{
if (union_selection != ALT_a) TTCN_error("Using non-selected field a in a value of union type @JsonBasicTypeAltstep.aref.");
return *field_a;
}

DEFAULT& aref::d()
{
if (union_selection != ALT_d) {
clean_up();
field_d = new DEFAULT;
union_selection = ALT_d;
}
return *field_d;
}

const DEFAULT& aref::d() const
{
if (union_selection != ALT_d) TTCN_error("Using non-selected field d in a value of union type @JsonBasicTypeAltstep.aref.");
return *field_d;
}

boolean aref::ischosen(union_selection_type checked_selection) const
{
if (checked_selection == UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @JsonBasicTypeAltstep.aref.");
return union_selection == checked_selection;
}

boolean aref::is_bound() const
{
  return union_selection != UNBOUND_VALUE;
}

boolean aref::is_value() const
{
switch (union_selection) {
case UNBOUND_VALUE: return FALSE;
case ALT_a: return field_a->is_value();
case ALT_d: return field_d->is_value();
default: TTCN_error("Invalid selection in union is_bound");}
}

void aref::clean_up()
{
switch (union_selection) {
case ALT_a:
  delete field_a;
  break;
case ALT_d:
  delete field_d;
  break;
default:
  break;
}
union_selection = UNBOUND_VALUE;
}

void aref::log() const
{
switch (union_selection) {
case ALT_a:
TTCN_Logger::log_event_str("{ a := ");
field_a->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_d:
TTCN_Logger::log_event_str("{ d := ");
field_d->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_unbound();
}
}

void aref::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "union value");
  Module_Param_Ptr m_p = &param;
  if (m_p->get_type()==Module_Param::MP_Value_List && m_p->get_size()==0) return;
  if (m_p->get_type()!=Module_Param::MP_Assignment_List) {
    param.error("union value with field name was expected");
  }
  Module_Param* mp_last = m_p->get_elem(m_p->get_size()-1);
  char* last_name = mp_last->get_id()->get_name();
  if (!strcmp(last_name, "a")) {
    a().set_param(*mp_last);
    if (!a().is_bound()) clean_up();
    return;
  }
  if (!strcmp(last_name, "d")) {
    d().set_param(*mp_last);
    if (!d().is_bound()) clean_up();
    return;
  }
  mp_last->error("Field %s does not exist in type @JsonBasicTypeAltstep.aref.", last_name);
}

void aref::set_implicit_omit()
{
switch (union_selection) {
case ALT_a:
field_a->set_implicit_omit(); break;
case ALT_d:
field_d->set_implicit_omit(); break;
default: break;
}
}

void aref::encode_text(Text_Buf& text_buf) const
{
text_buf.push_int(union_selection);
switch (union_selection) {
case ALT_a:
field_a->encode_text(text_buf);
break;
case ALT_d:
field_d->encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an unbound value of union type @JsonBasicTypeAltstep.aref.");
}
}

void aref::decode_text(Text_Buf& text_buf)
{
switch ((union_selection_type)text_buf.pull_int().get_val()) {
case ALT_a:
a().decode_text(text_buf);
break;
case ALT_d:
d().decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for type @JsonBasicTypeAltstep.aref.");
}
}

void aref_template::copy_value(const aref& other_value)
{
single_value.union_selection = other_value.get_selection();
switch (single_value.union_selection) {
case aref::ALT_a:
single_value.field_a = new altstepref_template(other_value.a());
break;
case aref::ALT_d:
single_value.field_d = new DEFAULT_template(other_value.d());
break;
default:
TTCN_error("Initializing a template with an unbound value of type @JsonBasicTypeAltstep.aref.");
}
set_selection(SPECIFIC_VALUE);
}

void aref_template::copy_template(const aref_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.union_selection = other_value.single_value.union_selection;
switch (single_value.union_selection) {
case aref::ALT_a:
single_value.field_a = new altstepref_template(*other_value.single_value.field_a);
break;
case aref::ALT_d:
single_value.field_d = new DEFAULT_template(*other_value.single_value.field_d);
break;
default:
TTCN_error("Internal error: Invalid union selector in a specific value when copying a template of type @JsonBasicTypeAltstep.aref.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new aref_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized template of union type @JsonBasicTypeAltstep.aref.");
}
set_selection(other_value);
}

aref_template::aref_template()
{
}

aref_template::aref_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

aref_template::aref_template(const aref& other_value)
{
copy_value(other_value);
}

aref_template::aref_template(const OPTIONAL<aref>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const aref&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of union type @JsonBasicTypeAltstep.aref from an unbound optional field.");
}
}

aref_template::aref_template(const aref_template& other_value)
: Base_Template(){
copy_template(other_value);
}

aref_template::~aref_template()
{
clean_up();
}

void aref_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case aref::ALT_a:
delete single_value.field_a;
break;
case aref::ALT_d:
delete single_value.field_d;
default:
break;
}
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

aref_template& aref_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

aref_template& aref_template::operator=(const aref& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

aref_template& aref_template::operator=(const OPTIONAL<aref>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const aref&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of union type @JsonBasicTypeAltstep.aref.");
}
return *this;
}

aref_template& aref_template::operator=(const aref_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean aref_template::match(const aref& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
{
aref::union_selection_type value_selection = other_value.get_selection();
if (value_selection == aref::UNBOUND_VALUE) return FALSE;
if (value_selection != single_value.union_selection) return FALSE;
switch (value_selection) {
case aref::ALT_a:
return single_value.field_a->match(other_value.a(), legacy);
case aref::ALT_d:
return single_value.field_d->match(other_value.d(), legacy);
default:
TTCN_error("Internal error: Invalid selector in a specific value when matching a template of union type @JsonBasicTypeAltstep.aref.");
}
}
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error ("Matching an uninitialized template of union type @JsonBasicTypeAltstep.aref.");
}
return FALSE;
}

boolean aref_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
switch (single_value.union_selection) {
case aref::ALT_a:
return single_value.field_a->is_value();
case aref::ALT_d:
return single_value.field_d->is_value();
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing is_value operation on a template of union type @JsonBasicTypeAltstep.aref.");
}
}

aref aref_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of union type @JsonBasicTypeAltstep.aref.");
aref ret_val;
switch (single_value.union_selection) {
case aref::ALT_a:
ret_val.a() = single_value.field_a->valueof();
break;
case aref::ALT_d:
ret_val.d() = single_value.field_d->valueof();
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing valueof operation on a template of union type @JsonBasicTypeAltstep.aref.");
}
return ret_val;
}

aref_template& aref_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of union type @JsonBasicTypeAltstep.aref.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of union type @JsonBasicTypeAltstep.aref.");
return value_list.list_value[list_index];
}
void aref_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error ("Internal error: Setting an invalid list for a template of union type @JsonBasicTypeAltstep.aref.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new aref_template[list_length];
}

altstepref_template& aref_template::a()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != aref::ALT_a) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_a = new altstepref_template(ANY_VALUE);
else single_value.field_a = new altstepref_template;
single_value.union_selection = aref::ALT_a;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_a;
}

const altstepref_template& aref_template::a() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field a in a non-specific template of union type @JsonBasicTypeAltstep.aref.");
if (single_value.union_selection != aref::ALT_a) TTCN_error("Accessing non-selected field a in a template of union type @JsonBasicTypeAltstep.aref.");
return *single_value.field_a;
}

DEFAULT_template& aref_template::d()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != aref::ALT_d) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_d = new DEFAULT_template(ANY_VALUE);
else single_value.field_d = new DEFAULT_template;
single_value.union_selection = aref::ALT_d;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_d;
}

const DEFAULT_template& aref_template::d() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field d in a non-specific template of union type @JsonBasicTypeAltstep.aref.");
if (single_value.union_selection != aref::ALT_d) TTCN_error("Accessing non-selected field d in a template of union type @JsonBasicTypeAltstep.aref.");
return *single_value.field_d;
}

boolean aref_template::ischosen(aref::union_selection_type checked_selection) const
{
if (checked_selection == aref::UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @JsonBasicTypeAltstep.aref.");
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.union_selection == aref::UNBOUND_VALUE) TTCN_error("Internal error: Invalid selector in a specific value when performing ischosen() operation on a template of union type @JsonBasicTypeAltstep.aref.");
return single_value.union_selection == checked_selection;
case VALUE_LIST:
{
if (value_list.n_values < 1)
TTCN_error("Internal error: Performing ischosen() operation on a template of union type @JsonBasicTypeAltstep.aref containing an empty list.");
boolean ret_val = value_list.list_value[0].ischosen(checked_selection);
for (unsigned int list_count = 1; ret_val == TRUE && list_count < value_list.n_values; list_count++) {
ret_val = value_list.list_value[list_count].ischosen(checked_selection);
}
return ret_val;
}
default:
return FALSE;
}
return FALSE;
}

void aref_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case aref::ALT_a:
TTCN_Logger::log_event_str("{ a := ");
single_value.field_a->log();
TTCN_Logger::log_event_str(" }");
break;
case aref::ALT_d:
TTCN_Logger::log_event_str("{ d := ");
single_value.field_d->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_str("<invalid selector>");
}
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void aref_template::log_match(const aref& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity() && match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.union_selection == match_value.get_selection()) {
switch (single_value.union_selection) {
case aref::ALT_a:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".a");
single_value.field_a->log_match(match_value.a(), legacy);
} else {
TTCN_Logger::log_event_str("{ a := ");
single_value.field_a->log_match(match_value.a(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case aref::ALT_d:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".d");
single_value.field_d->log_match(match_value.d(), legacy);
} else {
TTCN_Logger::log_event_str("{ d := ");
single_value.field_d->log_match(match_value.d(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
default:
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str("<invalid selector>");
}
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void aref_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.union_selection);
switch (single_value.union_selection) {
case aref::ALT_a:
single_value.field_a->encode_text(text_buf);
break;
case aref::ALT_d:
single_value.field_d->encode_text(text_buf);
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when encoding a template of union type @JsonBasicTypeAltstep.aref.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized template of type @JsonBasicTypeAltstep.aref.");
}
}

void aref_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
{
single_value.union_selection = aref::UNBOUND_VALUE;
aref::union_selection_type new_selection = (aref::union_selection_type)text_buf.pull_int().get_val();
switch (new_selection) {
case aref::ALT_a:
single_value.field_a = new altstepref_template;
single_value.field_a->decode_text(text_buf);
break;
case aref::ALT_d:
single_value.field_d = new DEFAULT_template;
single_value.field_d->decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for a template of type @JsonBasicTypeAltstep.aref.");
}
single_value.union_selection = new_selection;
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new aref_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized selector was received in a template of type @JsonBasicTypeAltstep.aref.");
}
}

boolean aref_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean aref_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int v_idx=0; v_idx<value_list.n_values; v_idx++)
if (value_list.list_value[v_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void aref_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union template type `@JsonBasicTypeAltstep.aref'");
    }
    if (strcmp("a", param_field) == 0) {
      a().set_param(param);
      return;
    } else if (strcmp("d", param_field) == 0) {
      d().set_param(param);
      return;
    } else param.error("Field `%s' not found in union template type `@JsonBasicTypeAltstep.aref'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "union template");
  Module_Param_Ptr m_p = &param;
  switch (m_p->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    aref_template new_temp;
    new_temp.set_type(m_p->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, m_p->get_size());
    for (size_t p_i=0; p_i<m_p->get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*m_p->get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (m_p->get_size()==0) break;
    param.type_error("union template", "@JsonBasicTypeAltstep.aref");
    break;
  case Module_Param::MP_Assignment_List: {
    Module_Param* mp_last = m_p->get_elem(m_p->get_size()-1);
    char* last_name = mp_last->get_id()->get_name();
    if (!strcmp(last_name, "a")) {
      a().set_param(*mp_last);
      break;
    }
    if (!strcmp(last_name, "d")) {
      d().set_param(*mp_last);
      break;
    }
    mp_last->error("Field %s does not exist in type @JsonBasicTypeAltstep.aref.", last_name);
  } break;
  default:
    param.type_error("union template", "@JsonBasicTypeAltstep.aref");
  }
  is_ifpresent = param.get_ifpresent();
}

void aref_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
switch (single_value.union_selection) {
case aref::ALT_a:
single_value.field_a->check_restriction(t_res, t_name ? t_name : "@JsonBasicTypeAltstep.aref");
return;
case aref::ALT_d:
single_value.field_d->check_restriction(t_res, t_name ? t_name : "@JsonBasicTypeAltstep.aref");
return;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing check_restriction operation on a template of union type @JsonBasicTypeAltstep.aref.");
}
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@JsonBasicTypeAltstep.aref");
}


} /* end of namespace */
