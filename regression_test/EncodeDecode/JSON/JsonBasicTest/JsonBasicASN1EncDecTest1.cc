// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R6B
// for U-ERICSSON\ethbaat (ethbaat@HU-00000670) on Thu Feb 20 17:43:37 2020

// Copyright (c) 2000-2019 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "JsonBasicASN1EncDecTest1.hh"

namespace JsonBasicASN1EncDecTest1 {

/* Prototypes of static functions */

static void pre_init_module();
static boolean init_comp_type(const char *component_type, boolean init_base_comps);
static void module_control_part();

/* Literal string constants */

static const unsigned char bs_1_bits[] = { 68, 12, 140, 68 },
bs_3_bits[] = { 140, 76 },
bs_0_bits[] = { 2 },
bs_2_bits[] = { 46, 78, 174, 166 };
static const BITSTRING bs_1(32, bs_1_bits),
bs_3(16, bs_3_bits),
bs_0(2, bs_0_bits),
bs_2(32, bs_2_bits);
static const unsigned char module_checksum[] = { 0xf5, 0x08, 0x06, 0xd9, 0x14, 0x76, 0x57, 0xf4, 0x55, 0x67, 0x71, 0xce, 0xd9, 0x0f, 0x2a, 0xc8 };

/* Global variable definitions */

// No XER for CT
const TTCN_Typedescriptor_t CT_descr_ = { "@JsonBasicASN1EncDecTest1.CT", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
TTCN_Module module_object("JsonBasicASN1EncDecTest1", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, NULL, NULL, NULL, NULL, init_comp_type, NULL, NULL, module_control_part);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_6,
  current_runtime_version.requires_patch_level_1,  current_runtime_version.requires_runtime_1);

/* Bodies of functions, altsteps and testcases */

BITSTRING f__json__enc__abs2bs(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_abs2bs(): Encoding bitstring: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
p.encode(BITSTRING_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_abs2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__abool2bs(const BOOLEAN& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_abool2bs(): Encoding boolean: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
p.encode(BOOLEAN_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_abool2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__abmpstr2bs(const UNIVERSAL_CHARSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_abmpstr2bs(): Encoding BMPString: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
p.encode(BMPString_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_abmpstr2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__anumber2bs(const JsonBasicASN1Types::Asn1__Number& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_anumber2bs(): Encoding @JsonBasicASN1Types.Asn1-Number: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
p.encode(JsonBasicASN1Types::Asn1__Number_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_anumber2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__ai2bs(const INTEGER& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_ai2bs(): Encoding integer: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
p.encode(INTEGER_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_ai2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__af2bs(const FLOAT& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_af2bs(): Encoding float: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
p.encode(FLOAT_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_af2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__ao2bs(const OCTETSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_ao2bs(): Encoding octetstring: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
p.encode(OCTETSTRING_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_ao2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__dec__bs2abs(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2abs(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
BITSTRING ret_val;
ret_val.decode(BITSTRING_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2abs(): Decoded bitstring: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2abs(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

BOOLEAN f__json__dec__bs2abool(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2abool(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
BOOLEAN ret_val;
ret_val.decode(BOOLEAN_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2abool(): Decoded boolean: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2abool(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

UNIVERSAL_CHARSTRING f__json__dec__bs2abmpstr(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2abmpstr(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
UNIVERSAL_CHARSTRING ret_val;
ret_val.decode(BMPString_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2abmpstr(): Decoded BMPString: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2abmpstr(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

JsonBasicASN1Types::Asn1__Number f__json__dec__bs2anumber(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2anumber(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
JsonBasicASN1Types::Asn1__Number ret_val;
ret_val.decode(JsonBasicASN1Types::Asn1__Number_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2anumber(): Decoded @JsonBasicASN1Types.Asn1-Number: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2anumber(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

INTEGER f__json__dec__bs2ai(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2ai(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
INTEGER ret_val;
ret_val.decode(INTEGER_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2ai(): Decoded integer: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2ai(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

FLOAT f__json__dec__bs2af(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2af(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
FLOAT ret_val;
ret_val.decode(FLOAT_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2af(): Decoded float: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2af(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

OCTETSTRING f__json__dec__bs2ao(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2ao(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
OCTETSTRING ret_val;
ret_val.decode(OCTETSTRING_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2ao(): Decoded octetstring: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2ao(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

void f__compare__bitstring(const BITSTRING& pl__val, const BITSTRING& pl__expected)
{
/* JsonBasicASN1EncDecTest1.ttcn, line 60 */
if ((pl__val == pl__expected)) {
/* JsonBasicASN1EncDecTest1.ttcn, line 61 */
TTCN_Runtime::setverdict(PASS);
}
else {
/* JsonBasicASN1EncDecTest1.ttcn, line 63 */
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("expected: "),pl__expected.log(),TTCN_Logger::log_event_str(" got: "),pl__val.log(),TTCN_Logger::end_event_log2str()));
}
}

verdicttype testcase_tc__asn1__bs2bs(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicASN1EncDecTest1.ttcn", 83, TTCN_Location::LOCATION_TESTCASE, "tc_asn1_bs2bs");
try {
TTCN_Runtime::begin_testcase("JsonBasicASN1EncDecTest1", "tc_asn1_bs2bs", "JsonBasicASN1EncDecTest1", "CT", "JsonBasicASN1EncDecTest1", "CT", has_timer, timer_value);
current_location.update_lineno(84);
/* JsonBasicASN1EncDecTest1.ttcn, line 84 */
BITSTRING x(bs_0);
current_location.update_lineno(84);
/* JsonBasicASN1EncDecTest1.ttcn, line 84 */
BITSTRING d;
current_location.update_lineno(85);
/* JsonBasicASN1EncDecTest1.ttcn, line 85 */
BITSTRING encoded1(f__json__enc__abs2bs(x));
current_location.update_lineno(86);
/* JsonBasicASN1EncDecTest1.ttcn, line 86 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("encoded1:");
encoded1.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(87);
/* JsonBasicASN1EncDecTest1.ttcn, line 87 */
BITSTRING expected(bs_1);
current_location.update_lineno(90);
/* JsonBasicASN1EncDecTest1.ttcn, line 90 */
f__compare__bitstring(encoded1, expected);
current_location.update_lineno(93);
/* JsonBasicASN1EncDecTest1.ttcn, line 93 */
d = f__json__dec__bs2abs(encoded1);
current_location.update_lineno(94);
/* JsonBasicASN1EncDecTest1.ttcn, line 94 */
if ((d == x)) {
current_location.update_lineno(95);
/* JsonBasicASN1EncDecTest1.ttcn, line 95 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(97);
/* JsonBasicASN1EncDecTest1.ttcn, line 97 */
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("expected: "),x.log(),TTCN_Logger::log_event_str(" got: "),d.log(),TTCN_Logger::end_event_log2str()));
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_asn1_bs2bs was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__asn1__bool2bs(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicASN1EncDecTest1.ttcn", 105, TTCN_Location::LOCATION_TESTCASE, "tc_asn1_bool2bs");
try {
TTCN_Runtime::begin_testcase("JsonBasicASN1EncDecTest1", "tc_asn1_bool2bs", "JsonBasicASN1EncDecTest1", "CT", "JsonBasicASN1EncDecTest1", "CT", has_timer, timer_value);
current_location.update_lineno(106);
/* JsonBasicASN1EncDecTest1.ttcn, line 106 */
BOOLEAN x(TRUE);
current_location.update_lineno(106);
/* JsonBasicASN1EncDecTest1.ttcn, line 106 */
BOOLEAN d;
current_location.update_lineno(107);
/* JsonBasicASN1EncDecTest1.ttcn, line 107 */
BITSTRING encoded1(f__json__enc__abool2bs(x));
current_location.update_lineno(108);
/* JsonBasicASN1EncDecTest1.ttcn, line 108 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("encoded1:");
encoded1.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(109);
/* JsonBasicASN1EncDecTest1.ttcn, line 109 */
BITSTRING expected(bs_2);
current_location.update_lineno(112);
/* JsonBasicASN1EncDecTest1.ttcn, line 112 */
f__compare__bitstring(encoded1, expected);
current_location.update_lineno(114);
/* JsonBasicASN1EncDecTest1.ttcn, line 114 */
d = f__json__dec__bs2abool(encoded1);
current_location.update_lineno(115);
/* JsonBasicASN1EncDecTest1.ttcn, line 115 */
if ((d == x)) {
current_location.update_lineno(116);
/* JsonBasicASN1EncDecTest1.ttcn, line 116 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(118);
/* JsonBasicASN1EncDecTest1.ttcn, line 118 */
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("expected: "),x.log(),TTCN_Logger::log_event_str(" got: "),d.log(),TTCN_Logger::end_event_log2str()));
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_asn1_bool2bs was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__asn1__i2bs(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicASN1EncDecTest1.ttcn", 126, TTCN_Location::LOCATION_TESTCASE, "tc_asn1_i2bs");
try {
TTCN_Runtime::begin_testcase("JsonBasicASN1EncDecTest1", "tc_asn1_i2bs", "JsonBasicASN1EncDecTest1", "CT", "JsonBasicASN1EncDecTest1", "CT", has_timer, timer_value);
current_location.update_lineno(127);
/* JsonBasicASN1EncDecTest1.ttcn, line 127 */
INTEGER x(12);
current_location.update_lineno(127);
/* JsonBasicASN1EncDecTest1.ttcn, line 127 */
INTEGER y;
current_location.update_lineno(128);
/* JsonBasicASN1EncDecTest1.ttcn, line 128 */
BITSTRING encoded1(f__json__enc__ai2bs(x));
current_location.update_lineno(129);
/* JsonBasicASN1EncDecTest1.ttcn, line 129 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("encoded1:");
encoded1.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(130);
/* JsonBasicASN1EncDecTest1.ttcn, line 130 */
BITSTRING expected(bs_3);
current_location.update_lineno(133);
/* JsonBasicASN1EncDecTest1.ttcn, line 133 */
f__compare__bitstring(encoded1, expected);
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_asn1_i2bs was stopped.");
}
return TTCN_Runtime::end_testcase();
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("JsonBasicASN1EncDecTest1.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "JsonBasicASN1EncDecTest1");
JsonBasicASN1Types::module_object.pre_init_module();
module_object.add_function("f_json_enc_abs2bs", (genericfunc_t)&f__json__enc__abs2bs, NULL);
module_object.add_function("f_json_enc_abool2bs", (genericfunc_t)&f__json__enc__abool2bs, NULL);
module_object.add_function("f_json_enc_abmpstr2bs", (genericfunc_t)&f__json__enc__abmpstr2bs, NULL);
module_object.add_function("f_json_enc_anumber2bs", (genericfunc_t)&f__json__enc__anumber2bs, NULL);
module_object.add_function("f_json_enc_ai2bs", (genericfunc_t)&f__json__enc__ai2bs, NULL);
module_object.add_function("f_json_enc_af2bs", (genericfunc_t)&f__json__enc__af2bs, NULL);
module_object.add_function("f_json_enc_ao2bs", (genericfunc_t)&f__json__enc__ao2bs, NULL);
module_object.add_function("f_json_dec_bs2abs", (genericfunc_t)&f__json__dec__bs2abs, NULL);
module_object.add_function("f_json_dec_bs2abool", (genericfunc_t)&f__json__dec__bs2abool, NULL);
module_object.add_function("f_json_dec_bs2abmpstr", (genericfunc_t)&f__json__dec__bs2abmpstr, NULL);
module_object.add_function("f_json_dec_bs2anumber", (genericfunc_t)&f__json__dec__bs2anumber, NULL);
module_object.add_function("f_json_dec_bs2ai", (genericfunc_t)&f__json__dec__bs2ai, NULL);
module_object.add_function("f_json_dec_bs2af", (genericfunc_t)&f__json__dec__bs2af, NULL);
module_object.add_function("f_json_dec_bs2ao", (genericfunc_t)&f__json__dec__bs2ao, NULL);
module_object.add_function("f_compare_bitstring", (genericfunc_t)&f__compare__bitstring, NULL);
module_object.add_testcase_nonpard("tc_asn1_bs2bs", testcase_tc__asn1__bs2bs);
module_object.add_testcase_nonpard("tc_asn1_bool2bs", testcase_tc__asn1__bool2bs);
module_object.add_testcase_nonpard("tc_asn1_i2bs", testcase_tc__asn1__i2bs);
}

static boolean init_comp_type(const char *component_type, boolean init_base_comps)
{
(void)init_base_comps;
if (!strcmp(component_type, "CT")) {
return TRUE;
} else return FALSE;
}

static void module_control_part()
{
TTCN_Location current_location("JsonBasicASN1EncDecTest1.ttcn", 139, TTCN_Location::LOCATION_CONTROLPART, "JsonBasicASN1EncDecTest1");
TTCN_Runtime::begin_controlpart("JsonBasicASN1EncDecTest1");
current_location.update_lineno(141);
/* JsonBasicASN1EncDecTest1.ttcn, line 141 */
testcase_tc__asn1__i2bs(FALSE, 0.0);
current_location.update_lineno(143);
/* JsonBasicASN1EncDecTest1.ttcn, line 143 */
testcase_tc__asn1__bool2bs(FALSE, 0.0);
TTCN_Runtime::end_controlpart();
}


} /* end of namespace */
