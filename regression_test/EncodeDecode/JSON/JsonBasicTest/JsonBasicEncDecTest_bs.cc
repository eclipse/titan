// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R6B
// for U-ERICSSON\ethbaat (ethbaat@HU-00000670) on Thu Feb 20 17:43:37 2020

// Copyright (c) 2000-2019 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "JsonBasicEncDecTest_bs.hh"

namespace JsonBasicEncDecTest__bs {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean init_comp_type(const char *component_type, boolean init_base_comps);
static void module_control_part();

/* Literal string constants */

static const unsigned char bs_3_bits[] = { 68, 180, 150, 118, 102, 150, 118, 150, 46, 158, 68 },
bs_9_bits[] = { 68, 140, 68 },
bs_10_bits[] = { 68, 98, 140, 68 },
bs_2_bits[] = { 68, 150, 118, 102, 150, 118, 150, 46, 158, 68 },
bs_4_bits[] = { 68, 118, 246, 46, 250, 134, 250, 118, 174, 182, 70, 166, 78, 68 },
bs_11_bits[] = { 68, 14, 134, 206, 206, 68 },
bs_5_bits[] = { 68, 206, 166, 198, 246, 118, 38, 68 },
bs_0_bits[] = { 76 },
bs_1_bits[] = { 76, 116, 12, 12, 12, 12, 12, 12 },
bs_7_bits[] = { 102, 134, 54, 206, 166 },
bs_6_bits[] = { 46, 78, 174, 166 },
bs_8_bits[] = { 1 };
static const BITSTRING bs_3(88, bs_3_bits),
bs_9(24, bs_9_bits),
bs_10(32, bs_10_bits),
bs_2(80, bs_2_bits),
bs_4(112, bs_4_bits),
bs_11(48, bs_11_bits),
bs_5(64, bs_5_bits),
bs_0(8, bs_0_bits),
bs_1(64, bs_1_bits),
bs_7(40, bs_7_bits),
bs_6(32, bs_6_bits),
bs_8(1, bs_8_bits);
static const unsigned char hs_0_nibbles[] = { 1 };
static const HEXSTRING hs_0(1, hs_0_nibbles);
static const unsigned char os_5_octets[] = { 1 },
os_1_octets[] = { 34, 45, 105, 110, 102, 105, 110, 105, 116, 121, 34 },
os_0_octets[] = { 34, 105, 110, 102, 105, 110, 105, 116, 121, 34 },
os_2_octets[] = { 34, 110, 111, 116, 95, 97, 95, 110, 117, 109, 98, 101, 114, 34 },
os_4_octets[] = { 34, 112, 97, 115, 115, 34 },
os_3_octets[] = { 241 };
static const OCTETSTRING os_5(1, os_5_octets),
os_1(11, os_1_octets),
os_0(10, os_0_octets),
os_2(14, os_2_octets),
os_4(6, os_4_octets),
os_3(1, os_3_octets);
static const CHARSTRING cs_0('1'),
cs_1(11, "[0,1,-1234]"),
cs_3(38, "[0,1,9,10,123456789,-1,-1234567890123]"),
cs_4(3, "[0]"),
cs_2(2, "[]"),
cs_11(7, "{\"I\":1}"),
cs_6(10, "{\"bs\":\"1\"}"),
cs_7(10, "{\"cs\":\"1\"}"),
cs_10(13, "{\"e\":\"first\"}"),
cs_8(10, "{\"hs\":\"1\"}"),
cs_5(7, "{\"i\":1}"),
cs_9(11, "{\"os\":\"01\"}");
static const universal_char us_1_uchars[] = { { 0, 0, 0, 34 }, { 0, 0, 0, 1 }, { 0, 0, 0, 34 } },
us_2_uchars[] = { { 0, 0, 0, 123 }, { 0, 0, 0, 34 }, { 0, 0, 0, 105 }, { 0, 0, 0, 34 }, { 0, 0, 0, 58 }, { 0, 0, 0, 49 }, { 0, 0, 0, 44 }, { 0, 0, 0, 34 }, { 0, 0, 0, 98 }, { 0, 0, 0, 115 }, { 0, 0, 0, 34 }, { 0, 0, 0, 58 }, { 0, 0, 0, 34 }, { 0, 0, 0, 49 }, { 0, 0, 0, 34 }, { 0, 0, 0, 44 }, { 0, 0, 0, 34 }, { 0, 0, 0, 99 }, { 0, 0, 0, 115 }, { 0, 0, 0, 34 }, { 0, 0, 0, 58 }, { 0, 0, 0, 34 }, { 0, 0, 0, 49 }, { 0, 0, 0, 34 }, { 0, 0, 0, 44 }, { 0, 0, 0, 34 }, { 0, 0, 0, 104 }, { 0, 0, 0, 115 }, { 0, 0, 0, 34 }, { 0, 0, 0, 58 }, { 0, 0, 0, 34 }, { 0, 0, 0, 49 }, { 0, 0, 0, 34 }, { 0, 0, 0, 44 }, { 0, 0, 0, 34 }, { 0, 0, 0, 111 }, { 0, 0, 0, 115 }, { 0, 0, 0, 34 }, { 0, 0, 0, 58 }, { 0, 0, 0, 34 }, { 0, 0, 0, 48 }, { 0, 0, 0, 49 }, { 0, 0, 0, 34 }, { 0, 0, 0, 44 }, { 0, 0, 0, 34 }, { 0, 0, 0, 117 }, { 0, 0, 0, 99 }, { 0, 0, 0, 115 }, { 0, 0, 0, 34 }, { 0, 0, 0, 58 }, { 0, 0, 0, 34 }, { 0, 0, 0, 1 }, { 0, 0, 0, 34 }, { 0, 0, 0, 44 }, { 0, 0, 0, 34 }, { 0, 0, 0, 101 }, { 0, 0, 0, 34 }, { 0, 0, 0, 58 }, { 0, 0, 0, 34 }, { 0, 0, 0, 102 }, { 0, 0, 0, 105 }, { 0, 0, 0, 114 }, { 0, 0, 0, 115 }, { 0, 0, 0, 116 }, { 0, 0, 0, 34 }, { 0, 0, 0, 125 } },
us_3_uchars[] = { { 0, 0, 0, 123 }, { 0, 0, 0, 34 }, { 0, 0, 0, 117 }, { 0, 0, 0, 99 }, { 0, 0, 0, 115 }, { 0, 0, 0, 34 }, { 0, 0, 0, 58 }, { 0, 0, 0, 34 }, { 0, 0, 0, 1 }, { 0, 0, 0, 34 }, { 0, 0, 0, 125 } };
static const UNIVERSAL_CHARSTRING us_0(0, 0, 0, 1),
us_1(3, us_1_uchars),
us_2(66, us_2_uchars),
us_3(11, us_3_uchars);
static const unsigned char module_checksum[] = { 0x2a, 0x5f, 0x90, 0x97, 0x1f, 0x71, 0xb4, 0x61, 0xf4, 0xa5, 0x50, 0x54, 0x15, 0x23, 0x56, 0x51 };

/* Global variable definitions */

// No XER for CT
const TTCN_Typedescriptor_t CT_descr_ = { "@JsonBasicEncDecTest_bs.CT", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for RoU
const TTCN_JSONdescriptor_t RoU_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE, FALSE, 0, NULL };
const TTCN_Typedescriptor_t RoU_descr_ = { "@JsonBasicEncDecTest_bs.RoU", NULL, NULL, NULL, NULL, &RoU_json_, NULL, &RoU_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
// No XER for RoU_0
const TTCN_Typedescriptor_t RoU_0_descr_ = { "@JsonBasicEncDecTest_bs.RoU.<oftype>", NULL, NULL, NULL, NULL, &JsonBasicTypes::U__json_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING RoU_0_default_coding("JSON");
UNIVERSAL_CHARSTRING RoU_default_coding("JSON");
// No XER for RoBS
const TTCN_JSONdescriptor_t RoBS_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE, FALSE, 0, NULL };
const TTCN_Typedescriptor_t RoBS_descr_ = { "@JsonBasicEncDecTest_bs.RoBS", NULL, NULL, NULL, NULL, &RoBS_json_, NULL, &RoBS_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RoBS_0_xer_ = { {"BITSTRING>\n", "BITSTRING>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t RoBS_0_descr_ = { "@JsonBasicEncDecTest_bs.RoBS.<oftype>", &BITSTRING_ber_, &BITSTRING_raw_, NULL, &RoBS_0_xer_, &BITSTRING_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING RoBS_0_default_coding("JSON");
UNIVERSAL_CHARSTRING RoBS_default_coding("JSON");
const XERdescriptor_t       I_xer_ = { {"I>\n", "I>\n"}, {3, 3}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t I_descr_ = { "@JsonBasicEncDecTest_bs.I", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &I_xer_, &INTEGER_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING I_default_coding("JSON");
const XERdescriptor_t       CS_xer_ = { {"CS>\n", "CS>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t CS_descr_ = { "@JsonBasicEncDecTest_bs.CS", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &CS_xer_, &CHARSTRING_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING CS_default_coding("JSON");
// No XER for anytype
const TTCN_JSONdescriptor_t anytype_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE, FALSE, 0, NULL };
const TTCN_Typedescriptor_t anytype_descr_ = { "@JsonBasicEncDecTest_bs.anytype", NULL, NULL, NULL, NULL, &anytype_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       anytype_I_xer_ = { {"I>\n", "I>\n"}, {3, 3}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_OERdescriptor_t anytype_I_oer_ = { -1, FALSE, -1, FALSE, 0, 0, NULL, 0, NULL };
const TTCN_Typedescriptor_t anytype_I_descr_ = { "@JsonBasicEncDecTest_bs.anytype.I", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &anytype_I_xer_, &INTEGER_json_, &anytype_I_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING anytype_I_default_coding("JSON");
const XERdescriptor_t       anytype_CS_xer_ = { {"CS>\n", "CS>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t anytype_CS_descr_ = { "@JsonBasicEncDecTest_bs.anytype.CS", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &anytype_CS_xer_, &CHARSTRING_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING anytype_CS_default_coding("JSON");
UNIVERSAL_CHARSTRING anytype_default_coding("JSON");
TTCN_Module module_object("JsonBasicEncDecTest_bs", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, init_comp_type, NULL, NULL, module_control_part);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_6,
  current_runtime_version.requires_patch_level_1,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */


const JsonBasicTypes::U__json RoU::UNBOUND_ELEM;
RoU::RoU()
{
val_ptr = NULL;
}

RoU::RoU(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

RoU::RoU(const RoU& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @JsonBasicEncDecTest_bs.RoU.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

RoU::~RoU()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void RoU::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

RoU& RoU::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

RoU& RoU::operator=(const RoU& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @JsonBasicEncDecTest_bs.RoU.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean RoU::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @JsonBasicEncDecTest_bs.RoU.");
return val_ptr->n_elements == 0 ;
}

boolean RoU::operator==(const RoU& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @JsonBasicEncDecTest_bs.RoU.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @JsonBasicEncDecTest_bs.RoU.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

JsonBasicTypes::U__json& RoU::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @JsonBasicEncDecTest_bs.RoU using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (JsonBasicTypes::U__json**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new JsonBasicTypes::U__json(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new JsonBasicTypes::U__json;
}
return *val_ptr->value_elements[index_value];
}

JsonBasicTypes::U__json& RoU::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @JsonBasicEncDecTest_bs.RoU.");
return (*this)[(int)index_value];
}

const JsonBasicTypes::U__json& RoU::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @JsonBasicEncDecTest_bs.RoU.");
if (index_value < 0) TTCN_error("Accessing an element of type @JsonBasicEncDecTest_bs.RoU using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @JsonBasicEncDecTest_bs.RoU: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] == NULL) ?
UNBOUND_ELEM : *val_ptr->value_elements[index_value];
}

const JsonBasicTypes::U__json& RoU::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @JsonBasicEncDecTest_bs.RoU.");
return (*this)[(int)index_value];
}

RoU RoU::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

RoU RoU::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

RoU RoU::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

RoU RoU::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @JsonBasicEncDecTest_bs.RoU.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
RoU ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new JsonBasicTypes::U__json(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

RoU RoU::operator+(const RoU& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @JsonBasicEncDecTest_bs.RoU concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
RoU ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new JsonBasicTypes::U__json(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new JsonBasicTypes::U__json(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

RoU RoU::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @JsonBasicEncDecTest_bs.RoU.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@JsonBasicEncDecTest_bs.RoU","element");
RoU ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new JsonBasicTypes::U__json(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

RoU RoU::replace(int index, int len, const RoU& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @JsonBasicEncDecTest_bs.RoU.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @JsonBasicEncDecTest_bs.RoU.");
check_replace_arguments(val_ptr->n_elements, index, len, "@JsonBasicEncDecTest_bs.RoU","element");
RoU ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new JsonBasicTypes::U__json(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new JsonBasicTypes::U__json(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new JsonBasicTypes::U__json(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

RoU RoU::replace(int index, int len, const RoU_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void RoU::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @JsonBasicEncDecTest_bs.RoU.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (JsonBasicTypes::U__json**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new JsonBasicTypes::U__json(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (JsonBasicTypes::U__json**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @JsonBasicEncDecTest_bs.RoU: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (JsonBasicTypes::U__json**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean RoU::is_value() const
{
if (val_ptr == NULL) return FALSE;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int RoU::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @JsonBasicEncDecTest_bs.RoU.");
return val_ptr->n_elements;
}

int RoU::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @JsonBasicEncDecTest_bs.RoU.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void RoU::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void RoU::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
          if (!(*this)[i].is_bound()) {
            delete val_ptr->value_elements[i];
            val_ptr->value_elements[i] = NULL;
          }
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
        if (!(*this)[curr->get_id()->get_index()].is_bound()) {
          delete val_ptr->value_elements[curr->get_id()->get_index()];
          val_ptr->value_elements[curr->get_id()->get_index()] = NULL;
        }
      }
      break;
    default:
      param.type_error("record of value", "@JsonBasicEncDecTest_bs.RoU");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@JsonBasicEncDecTest_bs.RoU");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}

void RoU::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void RoU::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @JsonBasicEncDecTest_bs.RoU.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void RoU::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @JsonBasicEncDecTest_bs.RoU.");
val_ptr->value_elements = (JsonBasicTypes::U__json**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new JsonBasicTypes::U__json;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void RoU::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  case TTCN_EncDec::CT_OER: {
    TTCN_EncDec_ErrorContext ec("While OER-encoding type '%s': ", p_td.name);
    if(!p_td.oer)
      TTCN_EncDec_ErrorContext::error_internal
        ("No OER descriptor available for type '%s'.", p_td.name);
    OER_encode(p_td, p_buf);
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void RoU::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    int null_added=0;
    if(b_data[p_buf.get_len()-1]!='\0'){
      null_added=1;
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    if(null_added){
      size_t actpos=p_buf.get_pos();
      p_buf.set_pos(p_buf.get_len()-1);
      p_buf.cut_end();
      p_buf.set_pos(actpos);
    }
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, XER_NONE, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, FALSE)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  case TTCN_EncDec::CT_OER: {
    TTCN_EncDec_ErrorContext ec("While OER-decoding type '%s': ", p_td.name);
    if(!p_td.oer)
      TTCN_EncDec_ErrorContext::error_internal
        ("No OER descriptor available for type '%s'.", p_td.name);
     OER_struct p_oer;
    OER_decode(p_td, p_buf, p_oer);
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int RoU::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @JsonBasicEncDecTest_bs.RoU.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(p_td.json->as_map ? JSON_TOKEN_OBJECT_START : JSON_TOKEN_ARRAY_START, NULL);
  for (int i = 0; i < val_ptr->n_elements; ++i) {
    if (NULL != p_td.json && p_td.json->metainfo_unbound && !(*this)[i].is_bound()) {
      enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);
      enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "metainfo []");
      enc_len += p_tok.put_next_token(JSON_TOKEN_STRING, "\"unbound\"");
      enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
    }
    else {
      int ret_val = (*this)[i].JSON_encode(*p_td.oftype_descr, p_tok);
      if (0 > ret_val) break;
      enc_len += ret_val;
    }
  }
  enc_len += p_tok.put_next_token(p_td.json->as_map ? JSON_TOKEN_OBJECT_END : JSON_TOKEN_ARRAY_END, NULL);
  return enc_len;
}

int RoU::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent, int)
{
  if (NULL != p_td.json->default_value && 0 == p_tok.get_buffer_length()) {
    set_size(0);
    return strlen(p_td.json->default_value);
  }
  json_token_t token = JSON_TOKEN_NONE;
  size_t dec_len = p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if ((!p_td.json->as_map && JSON_TOKEN_ARRAY_START != token) ||
           (p_td.json->as_map && JSON_TOKEN_OBJECT_START != token)) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  set_size(0);
  for (int nof_elements = 0; TRUE; ++nof_elements) {
    size_t buf_pos = p_tok.get_buf_pos();
    size_t ret_val;
    if (NULL != p_td.json && p_td.json->metainfo_unbound) {
      ret_val = p_tok.get_next_token(&token, NULL, NULL);
      if (JSON_TOKEN_OBJECT_START == token) {
        char* value = NULL;
        size_t value_len = 0;
        ret_val += p_tok.get_next_token(&token, &value, &value_len);
        if (JSON_TOKEN_NAME == token && 11 == value_len &&
            0 == strncmp(value, "metainfo []", 11)) {
          ret_val += p_tok.get_next_token(&token, &value, &value_len);
          if (JSON_TOKEN_STRING == token && 9 == value_len &&
              0 == strncmp(value, "\"unbound\"", 9)) {
            ret_val = p_tok.get_next_token(&token, NULL, NULL);
            if (JSON_TOKEN_OBJECT_END == token) {
              dec_len += ret_val;
              continue;
            }
          }
        }
      }
      p_tok.set_buf_pos(buf_pos);
    }
    JsonBasicTypes::U__json* val = new JsonBasicTypes::U__json;
    int ret_val2 = val->JSON_decode(*p_td.oftype_descr, p_tok, p_silent);
    if (JSON_ERROR_INVALID_TOKEN == ret_val2) {
      p_tok.set_buf_pos(buf_pos);
      delete val;
      break;
    }
    else if (JSON_ERROR_FATAL == ret_val2) {
      delete val;
      if (p_silent) {
        clean_up();
      }
      return JSON_ERROR_FATAL;
    }
    val_ptr->value_elements = (JsonBasicTypes::U__json**)reallocate_pointers(
      (void**)val_ptr->value_elements, val_ptr->n_elements, nof_elements + 1);
    val_ptr->value_elements[nof_elements] = val;
    val_ptr->n_elements = nof_elements + 1;
    dec_len += (size_t)ret_val2;
  }

  dec_len += p_tok.get_next_token(&token, NULL, NULL);
  if ((!p_td.json->as_map && JSON_TOKEN_ARRAY_END != token) ||
      (p_td.json->as_map && JSON_TOKEN_OBJECT_END != token)) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_REC_OF_END_TOKEN_ERROR, "");
    if (p_silent) {
      clean_up();
    }
    return JSON_ERROR_FATAL;
  }

  return (int)dec_len;
}

void RoU_template::copy_value(const RoU& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @JsonBasicEncDecTest_bs.RoU with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (JsonBasicTypes::U__json_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new JsonBasicTypes::U__json_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new JsonBasicTypes::U__json_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void RoU_template::copy_template(const RoU_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (JsonBasicTypes::U__json_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new JsonBasicTypes::U__json_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new JsonBasicTypes::U__json_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new RoU_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @JsonBasicEncDecTest_bs.RoU.");
break;
}
set_selection(other_value);
}

boolean RoU_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy)
{
if (value_index >= 0) return ((const RoU_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const RoU*)value_ptr)[value_index], legacy);
else return ((const RoU_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

RoU_template::RoU_template()
{
}

RoU_template::RoU_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

RoU_template::RoU_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

RoU_template::RoU_template(const RoU& other_value)
{
copy_value(other_value);
}

RoU_template::RoU_template(const OPTIONAL<RoU>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RoU&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @JsonBasicEncDecTest_bs.RoU from an unbound optional field.");
}
}

RoU_template::RoU_template(const RoU_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

RoU_template::~RoU_template()
{
clean_up();
}

void RoU_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

RoU_template& RoU_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

RoU_template& RoU_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

RoU_template& RoU_template::operator=(const RoU& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

RoU_template& RoU_template::operator=(const OPTIONAL<RoU>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RoU&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @JsonBasicEncDecTest_bs.RoU.");
}
return *this;
}

RoU_template& RoU_template::operator=(const RoU_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

JsonBasicTypes::U__json_template& RoU_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @JsonBasicEncDecTest_bs.RoU using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @JsonBasicEncDecTest_bs.RoU.");
    break;
}
return *single_value.value_elements[index_value];
}

JsonBasicTypes::U__json_template& RoU_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @JsonBasicEncDecTest_bs.RoU.");
return (*this)[(int)index_value];
}

const JsonBasicTypes::U__json_template& RoU_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @JsonBasicEncDecTest_bs.RoU using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @JsonBasicEncDecTest_bs.RoU.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @JsonBasicEncDecTest_bs.RoU: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const JsonBasicTypes::U__json_template& RoU_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @JsonBasicEncDecTest_bs.RoU.");
return (*this)[(int)index_value];
}

void RoU_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @JsonBasicEncDecTest_bs.RoU.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (JsonBasicTypes::U__json_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new JsonBasicTypes::U__json_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new JsonBasicTypes::U__json_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (JsonBasicTypes::U__json_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int RoU_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int RoU_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @JsonBasicEncDecTest_bs.RoU which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @JsonBasicEncDecTest_bs.RoU containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @JsonBasicEncDecTest_bs.RoU containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @JsonBasicEncDecTest_bs.RoU containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @JsonBasicEncDecTest_bs.RoU containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @JsonBasicEncDecTest_bs.RoU containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @JsonBasicEncDecTest_bs.RoU.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @JsonBasicEncDecTest_bs.RoU");
}

boolean RoU_template::match(const RoU& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific, legacy);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @JsonBasicEncDecTest_bs.RoU.");
}
return FALSE;
}

boolean RoU_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return FALSE;
return TRUE;
}

RoU RoU_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @JsonBasicEncDecTest_bs.RoU.");
RoU ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

RoU RoU_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

RoU RoU_template::replace(int index, int len, const RoU_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

RoU RoU_template::replace(int index, int len, const RoU& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void RoU_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new RoU_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @JsonBasicEncDecTest_bs.RoU.");
}
set_selection(template_type);
}

RoU_template& RoU_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @JsonBasicEncDecTest_bs.RoU.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @JsonBasicEncDecTest_bs.RoU.");
return value_list.list_value[list_index];
}

void RoU_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void RoU_template::log_match(const RoU& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count], legacy)){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void RoU_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @JsonBasicEncDecTest_bs.RoU.");
}
}

void RoU_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @JsonBasicEncDecTest_bs.RoU.");
single_value.value_elements = (JsonBasicTypes::U__json_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new JsonBasicTypes::U__json_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new RoU_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @JsonBasicEncDecTest_bs.RoU.");
}
}

boolean RoU_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean RoU_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void RoU_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    RoU_template temp;
    temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        Module_Param* param_i = param.get_elem(p_i);
        for (size_t perm_i=0; perm_i<param_i->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param_i->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@JsonBasicEncDecTest_bs.RoU");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void RoU_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@JsonBasicEncDecTest_bs.RoU");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@JsonBasicEncDecTest_bs.RoU");
}

boolean RoU_template::get_istemplate_kind(const char* type) const {
if (!strcmp(type, "AnyElement")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_VALUE) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "AnyElementsOrNone")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_OR_OMIT) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "permutation")) {
  return number_of_permutations;
} else if (!strcmp(type, "length")) {
  return length_restriction_type != NO_LENGTH_RESTRICTION;
} else {
  return Base_Template::get_istemplate_kind(type);
}
}
void anytype::copy_value(const anytype& other_value)
{
switch (other_value.union_selection) {
case ALT_I:
field_I = new INTEGER(*other_value.field_I);
break;
case ALT_CS:
field_CS = new CHARSTRING(*other_value.field_CS);
break;
default:
TTCN_error("Assignment of an unbound union value of type @JsonBasicEncDecTest_bs.anytype.");
}
union_selection = other_value.union_selection;
}

anytype::anytype()
{
union_selection = UNBOUND_VALUE;
}

anytype::anytype(const anytype& other_value)
: Base_Type(){
copy_value(other_value);
}

anytype::~anytype()
{
clean_up();
}

anytype& anytype::operator=(const anytype& other_value)
{
if (this != &other_value) {
clean_up();
copy_value(other_value);
}
return *this;
}

boolean anytype::operator==(const anytype& other_value) const
{
if (union_selection == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of union type @JsonBasicEncDecTest_bs.anytype.");
if (other_value.union_selection == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of union type @JsonBasicEncDecTest_bs.anytype.");
if (union_selection != other_value.union_selection) return FALSE;
switch (union_selection) {
case ALT_I:
return *field_I == *other_value.field_I;
case ALT_CS:
return *field_CS == *other_value.field_CS;
default:
return FALSE;
}
}

INTEGER& anytype::AT_I()
{
if (union_selection != ALT_I) {
clean_up();
field_I = new INTEGER;
union_selection = ALT_I;
}
return *field_I;
}

const INTEGER& anytype::AT_I() const
{
if (union_selection != ALT_I) TTCN_error("Using non-selected field I in a value of union type @JsonBasicEncDecTest_bs.anytype.");
return *field_I;
}

CHARSTRING& anytype::AT_CS()
{
if (union_selection != ALT_CS) {
clean_up();
field_CS = new CHARSTRING;
union_selection = ALT_CS;
}
return *field_CS;
}

const CHARSTRING& anytype::AT_CS() const
{
if (union_selection != ALT_CS) TTCN_error("Using non-selected field CS in a value of union type @JsonBasicEncDecTest_bs.anytype.");
return *field_CS;
}

boolean anytype::ischosen(union_selection_type checked_selection) const
{
if (checked_selection == UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @JsonBasicEncDecTest_bs.anytype.");
return union_selection == checked_selection;
}

boolean anytype::is_bound() const
{
  return union_selection != UNBOUND_VALUE;
}

boolean anytype::is_value() const
{
switch (union_selection) {
case UNBOUND_VALUE: return FALSE;
case ALT_I: return field_I->is_value();
case ALT_CS: return field_CS->is_value();
default: TTCN_error("Invalid selection in union is_bound");}
}

void anytype::clean_up()
{
switch (union_selection) {
case ALT_I:
  delete field_I;
  break;
case ALT_CS:
  delete field_CS;
  break;
default:
  break;
}
union_selection = UNBOUND_VALUE;
}

void anytype::log() const
{
switch (union_selection) {
case ALT_I:
TTCN_Logger::log_event_str("{ I := ");
field_I->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_CS:
TTCN_Logger::log_event_str("{ CS := ");
field_CS->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_unbound();
}
}

void anytype::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "union value");
  Module_Param_Ptr m_p = &param;
  if (m_p->get_type()==Module_Param::MP_Value_List && m_p->get_size()==0) return;
  if (m_p->get_type()!=Module_Param::MP_Assignment_List) {
    param.error("union value with field name was expected");
  }
  Module_Param* mp_last = m_p->get_elem(m_p->get_size()-1);
  char* last_name = mp_last->get_id()->get_name();
  if (!strcmp(last_name, "I")) {
    AT_I().set_param(*mp_last);
    if (!AT_I().is_bound()) clean_up();
    return;
  }
  if (!strcmp(last_name, "CS")) {
    AT_CS().set_param(*mp_last);
    if (!AT_CS().is_bound()) clean_up();
    return;
  }
  mp_last->error("Field %s does not exist in type @JsonBasicEncDecTest_bs.anytype.", last_name);
}

void anytype::set_implicit_omit()
{
switch (union_selection) {
case ALT_I:
field_I->set_implicit_omit(); break;
case ALT_CS:
field_CS->set_implicit_omit(); break;
default: break;
}
}

void anytype::encode_text(Text_Buf& text_buf) const
{
text_buf.push_int(union_selection);
switch (union_selection) {
case ALT_I:
field_I->encode_text(text_buf);
break;
case ALT_CS:
field_CS->encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an unbound value of union type @JsonBasicEncDecTest_bs.anytype.");
}
}

void anytype::decode_text(Text_Buf& text_buf)
{
switch ((union_selection_type)text_buf.pull_int().get_val()) {
case ALT_I:
AT_I().decode_text(text_buf);
break;
case ALT_CS:
AT_CS().decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for type @JsonBasicEncDecTest_bs.anytype.");
}
}

void anytype::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  case TTCN_EncDec::CT_OER: {
    TTCN_EncDec_ErrorContext ec("While OER-encoding type '%s': ", p_td.name);
    if(!p_td.oer)
      TTCN_EncDec_ErrorContext::error_internal
        ("No OER descriptor available for type '%s'.", p_td.name);
    OER_encode(p_td, p_buf);
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void anytype::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    int null_added=0;
    if(b_data[p_buf.get_len()-1]!='\0'){
      null_added=1;
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    if(null_added){
      size_t actpos=p_buf.get_pos();
      p_buf.set_pos(p_buf.get_len()-1);
      p_buf.cut_end();
      p_buf.set_pos(actpos);
    }
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, XER_NONE, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, FALSE)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  case TTCN_EncDec::CT_OER: {
    TTCN_EncDec_ErrorContext ec("While OER-decoding type '%s': ", p_td.name);
    if(!p_td.oer)
      TTCN_EncDec_ErrorContext::error_internal
        ("No OER descriptor available for type '%s'.", p_td.name);
     OER_struct p_oer;
    OER_decode(p_td, p_buf, p_oer);
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int anytype::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  boolean as_value = NULL != p_td.json && p_td.json->as_value;
  int enc_len = as_value ? 0 : p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);
  switch(union_selection) {
  case ALT_I:
    if (!as_value) {
      enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "I");
    }
    enc_len += field_I->JSON_encode(anytype_I_descr_, p_tok);
    break;
  case ALT_CS:
    if (!as_value) {
      enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "CS");
    }
    enc_len += field_CS->JSON_encode(anytype_CS_descr_, p_tok);
    break;
  default:
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, 
      "Encoding an unbound value of type @JsonBasicEncDecTest_bs.anytype.");
    return -1;
  }

  if (!as_value) {
    enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  }
  return enc_len;
}

int anytype::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent, int p_chosen_field)
{
  if (0 <= p_chosen_field && 2 > p_chosen_field) {
    switch (p_chosen_field) {
    case 0:
      return AT_I().JSON_decode(anytype_I_descr_, p_tok, TRUE);
    case 1:
      return AT_CS().JSON_decode(anytype_CS_descr_, p_tok, TRUE);
    }
  }
  json_token_t j_token = JSON_TOKEN_NONE;
 if (NULL != p_td.json && p_td.json->as_value) {
  size_t buf_pos = p_tok.get_buf_pos();
  p_tok.get_next_token(&j_token, NULL, NULL);
  int ret_val = 0;
  switch(j_token) {
  case JSON_TOKEN_NUMBER: {
    p_tok.set_buf_pos(buf_pos);
    ret_val = AT_I().JSON_decode(anytype_I_descr_, p_tok, TRUE);
    if (0 <= ret_val) {
      return ret_val;
    }
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_AS_VALUE_ERROR, "number");
    clean_up();
    return JSON_ERROR_FATAL;
  }
  case JSON_TOKEN_STRING: {
    p_tok.set_buf_pos(buf_pos);
    ret_val = AT_CS().JSON_decode(anytype_CS_descr_, p_tok, TRUE);
    if (0 <= ret_val) {
      return ret_val;
    }
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_AS_VALUE_ERROR, "string");
    clean_up();
    return JSON_ERROR_FATAL;
  }
  case JSON_TOKEN_LITERAL_TRUE:
  case JSON_TOKEN_LITERAL_FALSE: {
    char* literal_str = mprintf("literal (%s)",
      (JSON_TOKEN_LITERAL_TRUE == j_token) ? "true" : "false");
    try {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_AS_VALUE_ERROR, literal_str);
    }
    catch (const TC_Error&) {
      Free(literal_str);
      throw;
    }
    Free(literal_str);
    clean_up();
    return JSON_ERROR_FATAL;
  }
  case JSON_TOKEN_ARRAY_START: {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_AS_VALUE_ERROR, "array");
    clean_up();
    return JSON_ERROR_FATAL;
  }
  case JSON_TOKEN_OBJECT_START: {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_AS_VALUE_ERROR, "object");
    clean_up();
    return JSON_ERROR_FATAL;
  }
  case JSON_TOKEN_LITERAL_NULL: {
    clean_up();
    return JSON_ERROR_INVALID_TOKEN;
  }
  case JSON_TOKEN_ERROR:
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  default:
    return JSON_ERROR_INVALID_TOKEN;
  }
  return ret_val;
 }
 else {
  size_t dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  char* fld_name = 0;
  size_t name_len = 0;
  dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
  if (JSON_TOKEN_NAME != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
    return JSON_ERROR_FATAL;
  } else {
if (1 == name_len && 0 == strncmp(fld_name, "I", name_len)) {
      int ret_val = AT_I().JSON_decode(anytype_I_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN == ret_val) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 1, "I");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += (size_t)ret_val;
      }
    } else if (2 == name_len && 0 == strncmp(fld_name, "CS", name_len)) {
      int ret_val = AT_CS().JSON_decode(anytype_CS_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN == ret_val) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 2, "CS");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += (size_t)ret_val;
      }
    } else {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, (int)name_len, fld_name);
      return JSON_ERROR_FATAL;
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_STATIC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  return (int)dec_len;
 }
}

void anytype_template::copy_value(const anytype& other_value)
{
single_value.union_selection = other_value.get_selection();
switch (single_value.union_selection) {
case anytype::ALT_I:
single_value.field_I = new INTEGER_template(other_value.AT_I());
break;
case anytype::ALT_CS:
single_value.field_CS = new CHARSTRING_template(other_value.AT_CS());
break;
default:
TTCN_error("Initializing a template with an unbound value of type @JsonBasicEncDecTest_bs.anytype.");
}
set_selection(SPECIFIC_VALUE);
}

void anytype_template::copy_template(const anytype_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.union_selection = other_value.single_value.union_selection;
switch (single_value.union_selection) {
case anytype::ALT_I:
single_value.field_I = new INTEGER_template(*other_value.single_value.field_I);
break;
case anytype::ALT_CS:
single_value.field_CS = new CHARSTRING_template(*other_value.single_value.field_CS);
break;
default:
TTCN_error("Internal error: Invalid union selector in a specific value when copying a template of type @JsonBasicEncDecTest_bs.anytype.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new anytype_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized template of union type @JsonBasicEncDecTest_bs.anytype.");
}
set_selection(other_value);
}

anytype_template::anytype_template()
{
}

anytype_template::anytype_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

anytype_template::anytype_template(const anytype& other_value)
{
copy_value(other_value);
}

anytype_template::anytype_template(const OPTIONAL<anytype>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const anytype&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of union type @JsonBasicEncDecTest_bs.anytype from an unbound optional field.");
}
}

anytype_template::anytype_template(const anytype_template& other_value)
: Base_Template(){
copy_template(other_value);
}

anytype_template::~anytype_template()
{
clean_up();
}

void anytype_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case anytype::ALT_I:
delete single_value.field_I;
break;
case anytype::ALT_CS:
delete single_value.field_CS;
default:
break;
}
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

anytype_template& anytype_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

anytype_template& anytype_template::operator=(const anytype& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

anytype_template& anytype_template::operator=(const OPTIONAL<anytype>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const anytype&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of union type @JsonBasicEncDecTest_bs.anytype.");
}
return *this;
}

anytype_template& anytype_template::operator=(const anytype_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean anytype_template::match(const anytype& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
{
anytype::union_selection_type value_selection = other_value.get_selection();
if (value_selection == anytype::UNBOUND_VALUE) return FALSE;
if (value_selection != single_value.union_selection) return FALSE;
switch (value_selection) {
case anytype::ALT_I:
return single_value.field_I->match(other_value.AT_I(), legacy);
case anytype::ALT_CS:
return single_value.field_CS->match(other_value.AT_CS(), legacy);
default:
TTCN_error("Internal error: Invalid selector in a specific value when matching a template of union type @JsonBasicEncDecTest_bs.anytype.");
}
}
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error ("Matching an uninitialized template of union type @JsonBasicEncDecTest_bs.anytype.");
}
return FALSE;
}

boolean anytype_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
switch (single_value.union_selection) {
case anytype::ALT_I:
return single_value.field_I->is_value();
case anytype::ALT_CS:
return single_value.field_CS->is_value();
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing is_value operation on a template of union type @JsonBasicEncDecTest_bs.anytype.");
}
}

anytype anytype_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of union type @JsonBasicEncDecTest_bs.anytype.");
anytype ret_val;
switch (single_value.union_selection) {
case anytype::ALT_I:
ret_val.AT_I() = single_value.field_I->valueof();
break;
case anytype::ALT_CS:
ret_val.AT_CS() = single_value.field_CS->valueof();
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing valueof operation on a template of union type @JsonBasicEncDecTest_bs.anytype.");
}
return ret_val;
}

anytype_template& anytype_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of union type @JsonBasicEncDecTest_bs.anytype.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of union type @JsonBasicEncDecTest_bs.anytype.");
return value_list.list_value[list_index];
}
void anytype_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error ("Internal error: Setting an invalid list for a template of union type @JsonBasicEncDecTest_bs.anytype.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new anytype_template[list_length];
}

INTEGER_template& anytype_template::AT_I()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != anytype::ALT_I) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_I = new INTEGER_template(ANY_VALUE);
else single_value.field_I = new INTEGER_template;
single_value.union_selection = anytype::ALT_I;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_I;
}

const INTEGER_template& anytype_template::AT_I() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field I in a non-specific template of union type @JsonBasicEncDecTest_bs.anytype.");
if (single_value.union_selection != anytype::ALT_I) TTCN_error("Accessing non-selected field I in a template of union type @JsonBasicEncDecTest_bs.anytype.");
return *single_value.field_I;
}

CHARSTRING_template& anytype_template::AT_CS()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != anytype::ALT_CS) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_CS = new CHARSTRING_template(ANY_VALUE);
else single_value.field_CS = new CHARSTRING_template;
single_value.union_selection = anytype::ALT_CS;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_CS;
}

const CHARSTRING_template& anytype_template::AT_CS() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field CS in a non-specific template of union type @JsonBasicEncDecTest_bs.anytype.");
if (single_value.union_selection != anytype::ALT_CS) TTCN_error("Accessing non-selected field CS in a template of union type @JsonBasicEncDecTest_bs.anytype.");
return *single_value.field_CS;
}

boolean anytype_template::ischosen(anytype::union_selection_type checked_selection) const
{
if (checked_selection == anytype::UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @JsonBasicEncDecTest_bs.anytype.");
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.union_selection == anytype::UNBOUND_VALUE) TTCN_error("Internal error: Invalid selector in a specific value when performing ischosen() operation on a template of union type @JsonBasicEncDecTest_bs.anytype.");
return single_value.union_selection == checked_selection;
case VALUE_LIST:
{
if (value_list.n_values < 1)
TTCN_error("Internal error: Performing ischosen() operation on a template of union type @JsonBasicEncDecTest_bs.anytype containing an empty list.");
boolean ret_val = value_list.list_value[0].ischosen(checked_selection);
for (unsigned int list_count = 1; ret_val == TRUE && list_count < value_list.n_values; list_count++) {
ret_val = value_list.list_value[list_count].ischosen(checked_selection);
}
return ret_val;
}
default:
return FALSE;
}
return FALSE;
}

void anytype_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case anytype::ALT_I:
TTCN_Logger::log_event_str("{ I := ");
single_value.field_I->log();
TTCN_Logger::log_event_str(" }");
break;
case anytype::ALT_CS:
TTCN_Logger::log_event_str("{ CS := ");
single_value.field_CS->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_str("<invalid selector>");
}
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void anytype_template::log_match(const anytype& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity() && match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.union_selection == match_value.get_selection()) {
switch (single_value.union_selection) {
case anytype::ALT_I:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".I");
single_value.field_I->log_match(match_value.AT_I(), legacy);
} else {
TTCN_Logger::log_event_str("{ I := ");
single_value.field_I->log_match(match_value.AT_I(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case anytype::ALT_CS:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".CS");
single_value.field_CS->log_match(match_value.AT_CS(), legacy);
} else {
TTCN_Logger::log_event_str("{ CS := ");
single_value.field_CS->log_match(match_value.AT_CS(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
default:
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str("<invalid selector>");
}
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void anytype_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.union_selection);
switch (single_value.union_selection) {
case anytype::ALT_I:
single_value.field_I->encode_text(text_buf);
break;
case anytype::ALT_CS:
single_value.field_CS->encode_text(text_buf);
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when encoding a template of union type @JsonBasicEncDecTest_bs.anytype.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized template of type @JsonBasicEncDecTest_bs.anytype.");
}
}

void anytype_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
{
single_value.union_selection = anytype::UNBOUND_VALUE;
anytype::union_selection_type new_selection = (anytype::union_selection_type)text_buf.pull_int().get_val();
switch (new_selection) {
case anytype::ALT_I:
single_value.field_I = new INTEGER_template;
single_value.field_I->decode_text(text_buf);
break;
case anytype::ALT_CS:
single_value.field_CS = new CHARSTRING_template;
single_value.field_CS->decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for a template of type @JsonBasicEncDecTest_bs.anytype.");
}
single_value.union_selection = new_selection;
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new anytype_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized selector was received in a template of type @JsonBasicEncDecTest_bs.anytype.");
}
}

boolean anytype_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean anytype_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int v_idx=0; v_idx<value_list.n_values; v_idx++)
if (value_list.list_value[v_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void anytype_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union template type `@JsonBasicEncDecTest_bs.anytype'");
    }
    if (strcmp("I", param_field) == 0) {
      AT_I().set_param(param);
      return;
    } else if (strcmp("CS", param_field) == 0) {
      AT_CS().set_param(param);
      return;
    } else param.error("Field `%s' not found in union template type `@JsonBasicEncDecTest_bs.anytype'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "union template");
  Module_Param_Ptr m_p = &param;
  switch (m_p->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    anytype_template new_temp;
    new_temp.set_type(m_p->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, m_p->get_size());
    for (size_t p_i=0; p_i<m_p->get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*m_p->get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (m_p->get_size()==0) break;
    param.type_error("union template", "@JsonBasicEncDecTest_bs.anytype");
    break;
  case Module_Param::MP_Assignment_List: {
    Module_Param* mp_last = m_p->get_elem(m_p->get_size()-1);
    char* last_name = mp_last->get_id()->get_name();
    if (!strcmp(last_name, "I")) {
      AT_I().set_param(*mp_last);
      break;
    }
    if (!strcmp(last_name, "CS")) {
      AT_CS().set_param(*mp_last);
      break;
    }
    mp_last->error("Field %s does not exist in type @JsonBasicEncDecTest_bs.anytype.", last_name);
  } break;
  default:
    param.type_error("union template", "@JsonBasicEncDecTest_bs.anytype");
  }
  is_ifpresent = param.get_ifpresent();
}

void anytype_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
switch (single_value.union_selection) {
case anytype::ALT_I:
single_value.field_I->check_restriction(t_res, t_name ? t_name : "@JsonBasicEncDecTest_bs.anytype");
return;
case anytype::ALT_CS:
single_value.field_CS->check_restriction(t_res, t_name ? t_name : "@JsonBasicEncDecTest_bs.anytype");
return;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing check_restriction operation on a template of union type @JsonBasicEncDecTest_bs.anytype.");
}
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@JsonBasicEncDecTest_bs.anytype");
}


/* Bodies of functions, altsteps and testcases */

void f__compare__bitstring(const BITSTRING& pl__val, const BITSTRING& pl__expected)
{
/* JsonBasicEncDecTest_bs.ttcn, line 15 */
if ((pl__val == pl__expected)) {
/* JsonBasicEncDecTest_bs.ttcn, line 16 */
TTCN_Runtime::setverdict(PASS);
}
else {
/* JsonBasicEncDecTest_bs.ttcn, line 18 */
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("expected: "),pl__expected.log(),TTCN_Logger::log_event_str(" got: "),pl__val.log(),TTCN_Logger::end_event_log2str()));
}
}

verdicttype testcase_tc__jsonBasic__encdec__integer(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 28, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_integer");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_integer", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(29);
/* JsonBasicEncDecTest_bs.ttcn, line 29 */
INTEGER x(2);
current_location.update_lineno(30);
/* JsonBasicEncDecTest_bs.ttcn, line 30 */
INTEGER y(2);
current_location.update_lineno(31);
/* JsonBasicEncDecTest_bs.ttcn, line 31 */
BITSTRING bs;
current_location.update_lineno(32);
/* JsonBasicEncDecTest_bs.ttcn, line 32 */
BITSTRING expected(bs_0);
current_location.update_lineno(33);
/* JsonBasicEncDecTest_bs.ttcn, line 33 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(34);
/* JsonBasicEncDecTest_bs.ttcn, line 34 */
bs = JsonEncDecFunctions::f__json__enc__i2bs(2);
current_location.update_lineno(35);
/* JsonBasicEncDecTest_bs.ttcn, line 35 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(37);
/* JsonBasicEncDecTest_bs.ttcn, line 37 */
bs = JsonEncDecFunctions::f__json__enc__i2bs(y);
current_location.update_lineno(38);
/* JsonBasicEncDecTest_bs.ttcn, line 38 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(41);
/* JsonBasicEncDecTest_bs.ttcn, line 41 */
{
OCTETSTRING tmp_3;
JsonBasicTypes::I__json_encoder(y, tmp_3, JsonBasicTypes::I__json_default_coding);
bs = oct2bit(tmp_3);
}
current_location.update_lineno(42);
/* JsonBasicEncDecTest_bs.ttcn, line 42 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(45);
/* JsonBasicEncDecTest_bs.ttcn, line 45 */
INTEGER z(JsonEncDecFunctions::f__json__dec__bs2i(expected));
current_location.update_lineno(46);
/* JsonBasicEncDecTest_bs.ttcn, line 46 */
if ((y == z)) {
current_location.update_lineno(47);
/* JsonBasicEncDecTest_bs.ttcn, line 47 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(49);
/* JsonBasicEncDecTest_bs.ttcn, line 49 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(52);
/* JsonBasicEncDecTest_bs.ttcn, line 52 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_4(bit2oct(expected));
INTEGER tmp_5(JsonBasicTypes::I__json_decoder(tmp_4, z, JsonBasicTypes::I__json_default_coding));
if (tmp_5 == 0) {
expected = oct2bit(tmp_4);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_5;
}
current_location.update_lineno(53);
/* JsonBasicEncDecTest_bs.ttcn, line 53 */
{
boolean tmp_6;
tmp_6 = (r == 0);
if (tmp_6) tmp_6 = (y == z);
if (tmp_6) {
current_location.update_lineno(54);
/* JsonBasicEncDecTest_bs.ttcn, line 54 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(56);
/* JsonBasicEncDecTest_bs.ttcn, line 56 */
TTCN_Runtime::setverdict(FAIL);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_integer was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__float1(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 61, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_float1");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_float1", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(62);
/* JsonBasicEncDecTest_bs.ttcn, line 62 */
FLOAT x(2.0);
current_location.update_lineno(63);
/* JsonBasicEncDecTest_bs.ttcn, line 63 */
FLOAT y(2.0);
current_location.update_lineno(64);
/* JsonBasicEncDecTest_bs.ttcn, line 64 */
BITSTRING bs;
current_location.update_lineno(65);
/* JsonBasicEncDecTest_bs.ttcn, line 65 */
BITSTRING expected(bs_1);
current_location.update_lineno(66);
/* JsonBasicEncDecTest_bs.ttcn, line 66 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(67);
/* JsonBasicEncDecTest_bs.ttcn, line 67 */
bs = JsonEncDecFunctions::f__json__enc__f2bs(2.0);
current_location.update_lineno(68);
/* JsonBasicEncDecTest_bs.ttcn, line 68 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(70);
/* JsonBasicEncDecTest_bs.ttcn, line 70 */
bs = JsonEncDecFunctions::f__json__enc__f2bs(y);
current_location.update_lineno(71);
/* JsonBasicEncDecTest_bs.ttcn, line 71 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(74);
/* JsonBasicEncDecTest_bs.ttcn, line 74 */
{
OCTETSTRING tmp_10;
JsonBasicTypes::F__json_encoder(y, tmp_10, JsonBasicTypes::F__json_default_coding);
bs = oct2bit(tmp_10);
}
current_location.update_lineno(75);
/* JsonBasicEncDecTest_bs.ttcn, line 75 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(78);
/* JsonBasicEncDecTest_bs.ttcn, line 78 */
FLOAT z(JsonEncDecFunctions::f__json__dec__bs2f(expected));
current_location.update_lineno(79);
/* JsonBasicEncDecTest_bs.ttcn, line 79 */
if ((y == z)) {
current_location.update_lineno(80);
/* JsonBasicEncDecTest_bs.ttcn, line 80 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(82);
/* JsonBasicEncDecTest_bs.ttcn, line 82 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(85);
/* JsonBasicEncDecTest_bs.ttcn, line 85 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_11(bit2oct(expected));
INTEGER tmp_12(JsonBasicTypes::F__json_decoder(tmp_11, z, JsonBasicTypes::F__json_default_coding));
if (tmp_12 == 0) {
expected = oct2bit(tmp_11);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_12;
}
current_location.update_lineno(86);
/* JsonBasicEncDecTest_bs.ttcn, line 86 */
{
boolean tmp_13;
tmp_13 = (r == 0);
if (tmp_13) tmp_13 = (y == z);
if (tmp_13) {
current_location.update_lineno(87);
/* JsonBasicEncDecTest_bs.ttcn, line 87 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(89);
/* JsonBasicEncDecTest_bs.ttcn, line 89 */
TTCN_Runtime::setverdict(FAIL);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_float1 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__float2(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 95, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_float2");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_float2", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(96);
/* JsonBasicEncDecTest_bs.ttcn, line 96 */
FLOAT x(PLUS_INFINITY);
current_location.update_lineno(97);
/* JsonBasicEncDecTest_bs.ttcn, line 97 */
FLOAT y(PLUS_INFINITY);
current_location.update_lineno(98);
/* JsonBasicEncDecTest_bs.ttcn, line 98 */
BITSTRING bs;
current_location.update_lineno(99);
/* JsonBasicEncDecTest_bs.ttcn, line 99 */
BITSTRING expected(bs_2);
current_location.update_lineno(100);
/* JsonBasicEncDecTest_bs.ttcn, line 100 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::log_event_str(" oct: ");
os_0.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(101);
/* JsonBasicEncDecTest_bs.ttcn, line 101 */
bs = JsonEncDecFunctions::f__json__enc__f2bs(PLUS_INFINITY);
current_location.update_lineno(102);
/* JsonBasicEncDecTest_bs.ttcn, line 102 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(104);
/* JsonBasicEncDecTest_bs.ttcn, line 104 */
bs = JsonEncDecFunctions::f__json__enc__f2bs(y);
current_location.update_lineno(105);
/* JsonBasicEncDecTest_bs.ttcn, line 105 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(108);
/* JsonBasicEncDecTest_bs.ttcn, line 108 */
{
OCTETSTRING tmp_17;
JsonBasicTypes::F__json_encoder(y, tmp_17, JsonBasicTypes::F__json_default_coding);
bs = oct2bit(tmp_17);
}
current_location.update_lineno(109);
/* JsonBasicEncDecTest_bs.ttcn, line 109 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(112);
/* JsonBasicEncDecTest_bs.ttcn, line 112 */
FLOAT z(JsonEncDecFunctions::f__json__dec__bs2f(expected));
current_location.update_lineno(113);
/* JsonBasicEncDecTest_bs.ttcn, line 113 */
if ((y == z)) {
current_location.update_lineno(114);
/* JsonBasicEncDecTest_bs.ttcn, line 114 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(116);
/* JsonBasicEncDecTest_bs.ttcn, line 116 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(119);
/* JsonBasicEncDecTest_bs.ttcn, line 119 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_18(bit2oct(expected));
INTEGER tmp_19(JsonBasicTypes::F__json_decoder(tmp_18, z, JsonBasicTypes::F__json_default_coding));
if (tmp_19 == 0) {
expected = oct2bit(tmp_18);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_19;
}
current_location.update_lineno(120);
/* JsonBasicEncDecTest_bs.ttcn, line 120 */
{
boolean tmp_20;
tmp_20 = (r == 0);
if (tmp_20) tmp_20 = (y == z);
if (tmp_20) {
current_location.update_lineno(121);
/* JsonBasicEncDecTest_bs.ttcn, line 121 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(123);
/* JsonBasicEncDecTest_bs.ttcn, line 123 */
TTCN_Runtime::setverdict(FAIL);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_float2 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__float3(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 127, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_float3");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_float3", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(128);
/* JsonBasicEncDecTest_bs.ttcn, line 128 */
FLOAT x(MINUS_INFINITY);
current_location.update_lineno(129);
/* JsonBasicEncDecTest_bs.ttcn, line 129 */
FLOAT y(MINUS_INFINITY);
current_location.update_lineno(130);
/* JsonBasicEncDecTest_bs.ttcn, line 130 */
BITSTRING bs;
current_location.update_lineno(131);
/* JsonBasicEncDecTest_bs.ttcn, line 131 */
BITSTRING expected(bs_3);
current_location.update_lineno(132);
/* JsonBasicEncDecTest_bs.ttcn, line 132 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::log_event_str(" oct: ");
os_1.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(133);
/* JsonBasicEncDecTest_bs.ttcn, line 133 */
bs = JsonEncDecFunctions::f__json__enc__f2bs(MINUS_INFINITY);
current_location.update_lineno(134);
/* JsonBasicEncDecTest_bs.ttcn, line 134 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(136);
/* JsonBasicEncDecTest_bs.ttcn, line 136 */
bs = JsonEncDecFunctions::f__json__enc__f2bs(y);
current_location.update_lineno(137);
/* JsonBasicEncDecTest_bs.ttcn, line 137 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(140);
/* JsonBasicEncDecTest_bs.ttcn, line 140 */
{
OCTETSTRING tmp_24;
JsonBasicTypes::F__json_encoder(y, tmp_24, JsonBasicTypes::F__json_default_coding);
bs = oct2bit(tmp_24);
}
current_location.update_lineno(141);
/* JsonBasicEncDecTest_bs.ttcn, line 141 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(144);
/* JsonBasicEncDecTest_bs.ttcn, line 144 */
FLOAT z(JsonEncDecFunctions::f__json__dec__bs2f(expected));
current_location.update_lineno(145);
/* JsonBasicEncDecTest_bs.ttcn, line 145 */
if ((y == z)) {
current_location.update_lineno(146);
/* JsonBasicEncDecTest_bs.ttcn, line 146 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(148);
/* JsonBasicEncDecTest_bs.ttcn, line 148 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(151);
/* JsonBasicEncDecTest_bs.ttcn, line 151 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_25(bit2oct(expected));
INTEGER tmp_26(JsonBasicTypes::F__json_decoder(tmp_25, z, JsonBasicTypes::F__json_default_coding));
if (tmp_26 == 0) {
expected = oct2bit(tmp_25);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_26;
}
current_location.update_lineno(152);
/* JsonBasicEncDecTest_bs.ttcn, line 152 */
{
boolean tmp_27;
tmp_27 = (r == 0);
if (tmp_27) tmp_27 = (y == z);
if (tmp_27) {
current_location.update_lineno(153);
/* JsonBasicEncDecTest_bs.ttcn, line 153 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(155);
/* JsonBasicEncDecTest_bs.ttcn, line 155 */
TTCN_Runtime::setverdict(FAIL);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_float3 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__float4(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 159, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_float4");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_float4", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(160);
/* JsonBasicEncDecTest_bs.ttcn, line 160 */
FLOAT x(NOT_A_NUMBER);
current_location.update_lineno(161);
/* JsonBasicEncDecTest_bs.ttcn, line 161 */
FLOAT y(NOT_A_NUMBER);
current_location.update_lineno(162);
/* JsonBasicEncDecTest_bs.ttcn, line 162 */
BITSTRING bs;
current_location.update_lineno(163);
/* JsonBasicEncDecTest_bs.ttcn, line 163 */
BITSTRING expected(bs_4);
current_location.update_lineno(164);
/* JsonBasicEncDecTest_bs.ttcn, line 164 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::log_event_str(" oct: ");
os_2.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(165);
/* JsonBasicEncDecTest_bs.ttcn, line 165 */
bs = JsonEncDecFunctions::f__json__enc__f2bs(NOT_A_NUMBER);
current_location.update_lineno(166);
/* JsonBasicEncDecTest_bs.ttcn, line 166 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(168);
/* JsonBasicEncDecTest_bs.ttcn, line 168 */
bs = JsonEncDecFunctions::f__json__enc__f2bs(y);
current_location.update_lineno(169);
/* JsonBasicEncDecTest_bs.ttcn, line 169 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(172);
/* JsonBasicEncDecTest_bs.ttcn, line 172 */
{
OCTETSTRING tmp_31;
JsonBasicTypes::F__json_encoder(y, tmp_31, JsonBasicTypes::F__json_default_coding);
bs = oct2bit(tmp_31);
}
current_location.update_lineno(173);
/* JsonBasicEncDecTest_bs.ttcn, line 173 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(176);
/* JsonBasicEncDecTest_bs.ttcn, line 176 */
FLOAT z(JsonEncDecFunctions::f__json__dec__bs2f(expected));
current_location.update_lineno(177);
/* JsonBasicEncDecTest_bs.ttcn, line 177 */
if ((y == z)) {
current_location.update_lineno(178);
/* JsonBasicEncDecTest_bs.ttcn, line 178 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(180);
/* JsonBasicEncDecTest_bs.ttcn, line 180 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(183);
/* JsonBasicEncDecTest_bs.ttcn, line 183 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_32(bit2oct(expected));
INTEGER tmp_33(JsonBasicTypes::F__json_decoder(tmp_32, z, JsonBasicTypes::F__json_default_coding));
if (tmp_33 == 0) {
expected = oct2bit(tmp_32);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_33;
}
current_location.update_lineno(184);
/* JsonBasicEncDecTest_bs.ttcn, line 184 */
{
boolean tmp_34;
tmp_34 = (r == 0);
if (tmp_34) tmp_34 = (y == z);
if (tmp_34) {
current_location.update_lineno(185);
/* JsonBasicEncDecTest_bs.ttcn, line 185 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(187);
/* JsonBasicEncDecTest_bs.ttcn, line 187 */
TTCN_Runtime::setverdict(FAIL);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_float4 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__enum(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 190, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_enum");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_enum", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(191);
/* JsonBasicEncDecTest_bs.ttcn, line 191 */
JsonBasicTypes::E__json x(JsonBasicTypes::E__json::second);
current_location.update_lineno(192);
/* JsonBasicEncDecTest_bs.ttcn, line 192 */
JsonBasicTypes::E__json y(JsonBasicTypes::E__json::second);
current_location.update_lineno(193);
/* JsonBasicEncDecTest_bs.ttcn, line 193 */
BITSTRING bs;
current_location.update_lineno(194);
/* JsonBasicEncDecTest_bs.ttcn, line 194 */
BITSTRING expected(bs_5);
current_location.update_lineno(195);
/* JsonBasicEncDecTest_bs.ttcn, line 195 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(196);
/* JsonBasicEncDecTest_bs.ttcn, line 196 */
bs = JsonEncDecFunctions::f__json__enc__e2bs(JsonBasicTypes::E__json::second);
current_location.update_lineno(197);
/* JsonBasicEncDecTest_bs.ttcn, line 197 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(199);
/* JsonBasicEncDecTest_bs.ttcn, line 199 */
bs = JsonEncDecFunctions::f__json__enc__e2bs(y);
current_location.update_lineno(200);
/* JsonBasicEncDecTest_bs.ttcn, line 200 */
if ((bs == expected)) {
current_location.update_lineno(201);
/* JsonBasicEncDecTest_bs.ttcn, line 201 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(203);
/* JsonBasicEncDecTest_bs.ttcn, line 203 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(207);
/* JsonBasicEncDecTest_bs.ttcn, line 207 */
{
OCTETSTRING tmp_38;
JsonBasicTypes::E__json_encoder(y, tmp_38, JsonBasicTypes::E__json_default_coding);
bs = oct2bit(tmp_38);
}
current_location.update_lineno(208);
/* JsonBasicEncDecTest_bs.ttcn, line 208 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(211);
/* JsonBasicEncDecTest_bs.ttcn, line 211 */
JsonBasicTypes::E__json z(JsonEncDecFunctions::f__json__dec__bs2e(expected));
current_location.update_lineno(212);
/* JsonBasicEncDecTest_bs.ttcn, line 212 */
if ((y == z)) {
current_location.update_lineno(213);
/* JsonBasicEncDecTest_bs.ttcn, line 213 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(215);
/* JsonBasicEncDecTest_bs.ttcn, line 215 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(218);
/* JsonBasicEncDecTest_bs.ttcn, line 218 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_39(bit2oct(expected));
INTEGER tmp_40(JsonBasicTypes::E__json_decoder(tmp_39, z, JsonBasicTypes::E__json_default_coding));
if (tmp_40 == 0) {
expected = oct2bit(tmp_39);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_40;
}
current_location.update_lineno(219);
/* JsonBasicEncDecTest_bs.ttcn, line 219 */
{
boolean tmp_41;
tmp_41 = (r == 0);
if (tmp_41) tmp_41 = (y == z);
if (tmp_41) {
current_location.update_lineno(220);
/* JsonBasicEncDecTest_bs.ttcn, line 220 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(222);
/* JsonBasicEncDecTest_bs.ttcn, line 222 */
TTCN_Runtime::setverdict(FAIL);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_enum was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__bool1(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 227, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_bool1");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_bool1", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(228);
/* JsonBasicEncDecTest_bs.ttcn, line 228 */
BOOLEAN x(TRUE);
current_location.update_lineno(229);
/* JsonBasicEncDecTest_bs.ttcn, line 229 */
BOOLEAN y(TRUE);
current_location.update_lineno(230);
/* JsonBasicEncDecTest_bs.ttcn, line 230 */
BITSTRING bs;
current_location.update_lineno(231);
/* JsonBasicEncDecTest_bs.ttcn, line 231 */
BITSTRING expected(bs_6);
current_location.update_lineno(232);
/* JsonBasicEncDecTest_bs.ttcn, line 232 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(233);
/* JsonBasicEncDecTest_bs.ttcn, line 233 */
bs = JsonEncDecFunctions::f__json__enc__b2bs(TRUE);
current_location.update_lineno(234);
/* JsonBasicEncDecTest_bs.ttcn, line 234 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(236);
/* JsonBasicEncDecTest_bs.ttcn, line 236 */
bs = JsonEncDecFunctions::f__json__enc__b2bs(y);
current_location.update_lineno(237);
/* JsonBasicEncDecTest_bs.ttcn, line 237 */
if ((bs == expected)) {
current_location.update_lineno(238);
/* JsonBasicEncDecTest_bs.ttcn, line 238 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(240);
/* JsonBasicEncDecTest_bs.ttcn, line 240 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(244);
/* JsonBasicEncDecTest_bs.ttcn, line 244 */
{
OCTETSTRING tmp_45;
JsonBasicTypes::B__json_encoder(y, tmp_45, JsonBasicTypes::B__json_default_coding);
bs = oct2bit(tmp_45);
}
current_location.update_lineno(245);
/* JsonBasicEncDecTest_bs.ttcn, line 245 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(248);
/* JsonBasicEncDecTest_bs.ttcn, line 248 */
BOOLEAN z(JsonEncDecFunctions::f__json__dec__bs2b(expected));
current_location.update_lineno(249);
/* JsonBasicEncDecTest_bs.ttcn, line 249 */
if ((y == z)) {
current_location.update_lineno(250);
/* JsonBasicEncDecTest_bs.ttcn, line 250 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(252);
/* JsonBasicEncDecTest_bs.ttcn, line 252 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(255);
/* JsonBasicEncDecTest_bs.ttcn, line 255 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_46(bit2oct(expected));
INTEGER tmp_47(JsonBasicTypes::B__json_decoder(tmp_46, z, JsonBasicTypes::B__json_default_coding));
if (tmp_47 == 0) {
expected = oct2bit(tmp_46);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_47;
}
current_location.update_lineno(256);
/* JsonBasicEncDecTest_bs.ttcn, line 256 */
{
boolean tmp_48;
tmp_48 = (r == 0);
if (tmp_48) tmp_48 = (y == z);
if (tmp_48) {
current_location.update_lineno(257);
/* JsonBasicEncDecTest_bs.ttcn, line 257 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(259);
/* JsonBasicEncDecTest_bs.ttcn, line 259 */
TTCN_Runtime::setverdict(FAIL);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_bool1 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__bool2(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 264, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_bool2");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_bool2", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(265);
/* JsonBasicEncDecTest_bs.ttcn, line 265 */
BOOLEAN x(FALSE);
current_location.update_lineno(266);
/* JsonBasicEncDecTest_bs.ttcn, line 266 */
BOOLEAN y(FALSE);
current_location.update_lineno(267);
/* JsonBasicEncDecTest_bs.ttcn, line 267 */
BITSTRING bs;
current_location.update_lineno(268);
/* JsonBasicEncDecTest_bs.ttcn, line 268 */
BITSTRING expected(bs_7);
current_location.update_lineno(269);
/* JsonBasicEncDecTest_bs.ttcn, line 269 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(270);
/* JsonBasicEncDecTest_bs.ttcn, line 270 */
bs = JsonEncDecFunctions::f__json__enc__b2bs(FALSE);
current_location.update_lineno(271);
/* JsonBasicEncDecTest_bs.ttcn, line 271 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(273);
/* JsonBasicEncDecTest_bs.ttcn, line 273 */
bs = JsonEncDecFunctions::f__json__enc__b2bs(y);
current_location.update_lineno(274);
/* JsonBasicEncDecTest_bs.ttcn, line 274 */
if ((bs == expected)) {
current_location.update_lineno(275);
/* JsonBasicEncDecTest_bs.ttcn, line 275 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(277);
/* JsonBasicEncDecTest_bs.ttcn, line 277 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(281);
/* JsonBasicEncDecTest_bs.ttcn, line 281 */
{
OCTETSTRING tmp_52;
JsonBasicTypes::B__json_encoder(y, tmp_52, JsonBasicTypes::B__json_default_coding);
bs = oct2bit(tmp_52);
}
current_location.update_lineno(282);
/* JsonBasicEncDecTest_bs.ttcn, line 282 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(285);
/* JsonBasicEncDecTest_bs.ttcn, line 285 */
BOOLEAN z(JsonEncDecFunctions::f__json__dec__bs2b(expected));
current_location.update_lineno(286);
/* JsonBasicEncDecTest_bs.ttcn, line 286 */
if ((y == z)) {
current_location.update_lineno(287);
/* JsonBasicEncDecTest_bs.ttcn, line 287 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(289);
/* JsonBasicEncDecTest_bs.ttcn, line 289 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(292);
/* JsonBasicEncDecTest_bs.ttcn, line 292 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_53(bit2oct(expected));
INTEGER tmp_54(JsonBasicTypes::B__json_decoder(tmp_53, z, JsonBasicTypes::B__json_default_coding));
if (tmp_54 == 0) {
expected = oct2bit(tmp_53);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_54;
}
current_location.update_lineno(293);
/* JsonBasicEncDecTest_bs.ttcn, line 293 */
{
boolean tmp_55;
tmp_55 = (r == 0);
if (tmp_55) tmp_55 = (y == z);
if (tmp_55) {
current_location.update_lineno(294);
/* JsonBasicEncDecTest_bs.ttcn, line 294 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(296);
/* JsonBasicEncDecTest_bs.ttcn, line 296 */
TTCN_Runtime::setverdict(FAIL);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_bool2 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__bitstring(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 300, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_bitstring");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_bitstring", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(301);
/* JsonBasicEncDecTest_bs.ttcn, line 301 */
BITSTRING x(bs_8);
current_location.update_lineno(302);
/* JsonBasicEncDecTest_bs.ttcn, line 302 */
BITSTRING y(bs_8);
current_location.update_lineno(303);
/* JsonBasicEncDecTest_bs.ttcn, line 303 */
BITSTRING bs;
current_location.update_lineno(304);
/* JsonBasicEncDecTest_bs.ttcn, line 304 */
BITSTRING expected(bs_9);
current_location.update_lineno(306);
/* JsonBasicEncDecTest_bs.ttcn, line 306 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(307);
/* JsonBasicEncDecTest_bs.ttcn, line 307 */
bs = JsonEncDecFunctions::f__json__enc__bs2bs(bs_8);
current_location.update_lineno(308);
/* JsonBasicEncDecTest_bs.ttcn, line 308 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(310);
/* JsonBasicEncDecTest_bs.ttcn, line 310 */
bs = JsonEncDecFunctions::f__json__enc__bs2bs(y);
current_location.update_lineno(311);
/* JsonBasicEncDecTest_bs.ttcn, line 311 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(314);
/* JsonBasicEncDecTest_bs.ttcn, line 314 */
{
OCTETSTRING tmp_59;
JsonBasicTypes::BS__json_encoder(y, tmp_59, JsonBasicTypes::BS__json_default_coding);
bs = oct2bit(tmp_59);
}
current_location.update_lineno(315);
/* JsonBasicEncDecTest_bs.ttcn, line 315 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(318);
/* JsonBasicEncDecTest_bs.ttcn, line 318 */
BITSTRING z(JsonEncDecFunctions::f__json__dec__bs2bs(expected));
current_location.update_lineno(319);
/* JsonBasicEncDecTest_bs.ttcn, line 319 */
if ((y == z)) {
current_location.update_lineno(320);
/* JsonBasicEncDecTest_bs.ttcn, line 320 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(322);
/* JsonBasicEncDecTest_bs.ttcn, line 322 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(325);
/* JsonBasicEncDecTest_bs.ttcn, line 325 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_60(bit2oct(expected));
INTEGER tmp_61(JsonBasicTypes::BS__json_decoder(tmp_60, z, JsonBasicTypes::BS__json_default_coding));
if (tmp_61 == 0) {
expected = oct2bit(tmp_60);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_61;
}
current_location.update_lineno(326);
/* JsonBasicEncDecTest_bs.ttcn, line 326 */
{
boolean tmp_62;
tmp_62 = (r == 0);
if (tmp_62) tmp_62 = (y == z);
if (tmp_62) {
current_location.update_lineno(327);
/* JsonBasicEncDecTest_bs.ttcn, line 327 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(329);
/* JsonBasicEncDecTest_bs.ttcn, line 329 */
TTCN_Runtime::setverdict(FAIL);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_bitstring was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__charstring(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 333, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_charstring");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_charstring", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(334);
/* JsonBasicEncDecTest_bs.ttcn, line 334 */
CHARSTRING x(cs_0);
current_location.update_lineno(335);
/* JsonBasicEncDecTest_bs.ttcn, line 335 */
CHARSTRING y(cs_0);
current_location.update_lineno(336);
/* JsonBasicEncDecTest_bs.ttcn, line 336 */
BITSTRING bs;
current_location.update_lineno(337);
/* JsonBasicEncDecTest_bs.ttcn, line 337 */
BITSTRING expected(bs_9);
current_location.update_lineno(338);
/* JsonBasicEncDecTest_bs.ttcn, line 338 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(339);
/* JsonBasicEncDecTest_bs.ttcn, line 339 */
bs = JsonEncDecFunctions::f__json__enc__cs2bs(cs_0);
current_location.update_lineno(340);
/* JsonBasicEncDecTest_bs.ttcn, line 340 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(342);
/* JsonBasicEncDecTest_bs.ttcn, line 342 */
bs = JsonEncDecFunctions::f__json__enc__cs2bs(y);
current_location.update_lineno(343);
/* JsonBasicEncDecTest_bs.ttcn, line 343 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(346);
/* JsonBasicEncDecTest_bs.ttcn, line 346 */
{
OCTETSTRING tmp_66;
JsonBasicTypes::CS__json_encoder(y, tmp_66, JsonBasicTypes::CS__json_default_coding);
bs = oct2bit(tmp_66);
}
current_location.update_lineno(347);
/* JsonBasicEncDecTest_bs.ttcn, line 347 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(350);
/* JsonBasicEncDecTest_bs.ttcn, line 350 */
CHARSTRING z(JsonEncDecFunctions::f__json__dec__bs2cs(expected));
current_location.update_lineno(351);
/* JsonBasicEncDecTest_bs.ttcn, line 351 */
if ((y == z)) {
current_location.update_lineno(352);
/* JsonBasicEncDecTest_bs.ttcn, line 352 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(354);
/* JsonBasicEncDecTest_bs.ttcn, line 354 */
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("Decode input: "),expected.log(),TTCN_Logger::log_event_str(" output: "),z.log(),TTCN_Logger::log_event_str("expected: "),y.log(),TTCN_Logger::end_event_log2str()));
}
current_location.update_lineno(357);
/* JsonBasicEncDecTest_bs.ttcn, line 357 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("Encoded before decoding: ");
expected.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(358);
/* JsonBasicEncDecTest_bs.ttcn, line 358 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_67(bit2oct(expected));
INTEGER tmp_68(JsonBasicTypes::CS__json_decoder(tmp_67, z, JsonBasicTypes::CS__json_default_coding));
if (tmp_68 == 0) {
expected = oct2bit(tmp_67);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_68;
}
current_location.update_lineno(359);
/* JsonBasicEncDecTest_bs.ttcn, line 359 */
{
boolean tmp_69;
tmp_69 = (r == 0);
if (tmp_69) tmp_69 = (y == z);
if (tmp_69) {
current_location.update_lineno(360);
/* JsonBasicEncDecTest_bs.ttcn, line 360 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(362);
/* JsonBasicEncDecTest_bs.ttcn, line 362 */
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("input: "),expected.log(),TTCN_Logger::log_event_str(" expected: "),y.log(),TTCN_Logger::log_event_str(" got: "),z.log(),TTCN_Logger::log_event_str(" r: "),r.log(),TTCN_Logger::end_event_log2str()));
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_charstring was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__hexstring(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 366, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_hexstring");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_hexstring", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(367);
/* JsonBasicEncDecTest_bs.ttcn, line 367 */
HEXSTRING x(hs_0);
current_location.update_lineno(368);
/* JsonBasicEncDecTest_bs.ttcn, line 368 */
HEXSTRING y(hs_0);
current_location.update_lineno(369);
/* JsonBasicEncDecTest_bs.ttcn, line 369 */
BITSTRING bs;
current_location.update_lineno(370);
/* JsonBasicEncDecTest_bs.ttcn, line 370 */
BITSTRING expected(bs_9);
current_location.update_lineno(371);
/* JsonBasicEncDecTest_bs.ttcn, line 371 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(372);
/* JsonBasicEncDecTest_bs.ttcn, line 372 */
bs = JsonEncDecFunctions::f__json__enc__hs2bs(hs_0);
current_location.update_lineno(373);
/* JsonBasicEncDecTest_bs.ttcn, line 373 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(375);
/* JsonBasicEncDecTest_bs.ttcn, line 375 */
bs = JsonEncDecFunctions::f__json__enc__hs2bs(y);
current_location.update_lineno(376);
/* JsonBasicEncDecTest_bs.ttcn, line 376 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(379);
/* JsonBasicEncDecTest_bs.ttcn, line 379 */
{
OCTETSTRING tmp_73;
JsonBasicTypes::HS__json_encoder(y, tmp_73, JsonBasicTypes::HS__json_default_coding);
bs = oct2bit(tmp_73);
}
current_location.update_lineno(380);
/* JsonBasicEncDecTest_bs.ttcn, line 380 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(383);
/* JsonBasicEncDecTest_bs.ttcn, line 383 */
HEXSTRING z(JsonEncDecFunctions::f__json__dec__bs2hs(expected));
current_location.update_lineno(384);
/* JsonBasicEncDecTest_bs.ttcn, line 384 */
if ((y == z)) {
current_location.update_lineno(385);
/* JsonBasicEncDecTest_bs.ttcn, line 385 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(387);
/* JsonBasicEncDecTest_bs.ttcn, line 387 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(390);
/* JsonBasicEncDecTest_bs.ttcn, line 390 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_74(bit2oct(expected));
INTEGER tmp_75(JsonBasicTypes::HS__json_decoder(tmp_74, z, JsonBasicTypes::HS__json_default_coding));
if (tmp_75 == 0) {
expected = oct2bit(tmp_74);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_75;
}
current_location.update_lineno(391);
/* JsonBasicEncDecTest_bs.ttcn, line 391 */
{
boolean tmp_76;
tmp_76 = (r == 0);
if (tmp_76) tmp_76 = (y == z);
if (tmp_76) {
current_location.update_lineno(392);
/* JsonBasicEncDecTest_bs.ttcn, line 392 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(394);
/* JsonBasicEncDecTest_bs.ttcn, line 394 */
TTCN_Runtime::setverdict(FAIL);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_hexstring was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__octetstring(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 398, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_octetstring");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_octetstring", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(399);
/* JsonBasicEncDecTest_bs.ttcn, line 399 */
OCTETSTRING x(os_3);
current_location.update_lineno(400);
/* JsonBasicEncDecTest_bs.ttcn, line 400 */
OCTETSTRING y(os_3);
current_location.update_lineno(401);
/* JsonBasicEncDecTest_bs.ttcn, line 401 */
BITSTRING bs;
current_location.update_lineno(402);
/* JsonBasicEncDecTest_bs.ttcn, line 402 */
BITSTRING expected(bs_10);
current_location.update_lineno(403);
/* JsonBasicEncDecTest_bs.ttcn, line 403 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(404);
/* JsonBasicEncDecTest_bs.ttcn, line 404 */
bs = JsonEncDecFunctions::f__json__enc__os2bs(os_3);
current_location.update_lineno(405);
/* JsonBasicEncDecTest_bs.ttcn, line 405 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(407);
/* JsonBasicEncDecTest_bs.ttcn, line 407 */
bs = JsonEncDecFunctions::f__json__enc__os2bs(y);
current_location.update_lineno(408);
/* JsonBasicEncDecTest_bs.ttcn, line 408 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(411);
/* JsonBasicEncDecTest_bs.ttcn, line 411 */
{
OCTETSTRING tmp_80;
JsonBasicTypes::OS__json_encoder(y, tmp_80, JsonBasicTypes::OS__json_default_coding);
bs = oct2bit(tmp_80);
}
current_location.update_lineno(412);
/* JsonBasicEncDecTest_bs.ttcn, line 412 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(415);
/* JsonBasicEncDecTest_bs.ttcn, line 415 */
OCTETSTRING z(JsonEncDecFunctions::f__json__dec__bs2os(expected));
current_location.update_lineno(416);
/* JsonBasicEncDecTest_bs.ttcn, line 416 */
if ((y == z)) {
current_location.update_lineno(417);
/* JsonBasicEncDecTest_bs.ttcn, line 417 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(419);
/* JsonBasicEncDecTest_bs.ttcn, line 419 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(422);
/* JsonBasicEncDecTest_bs.ttcn, line 422 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_81(bit2oct(expected));
INTEGER tmp_82(JsonBasicTypes::OS__json_decoder(tmp_81, z, JsonBasicTypes::OS__json_default_coding));
if (tmp_82 == 0) {
expected = oct2bit(tmp_81);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_82;
}
current_location.update_lineno(423);
/* JsonBasicEncDecTest_bs.ttcn, line 423 */
{
boolean tmp_83;
tmp_83 = (r == 0);
if (tmp_83) tmp_83 = (y == z);
if (tmp_83) {
current_location.update_lineno(424);
/* JsonBasicEncDecTest_bs.ttcn, line 424 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(426);
/* JsonBasicEncDecTest_bs.ttcn, line 426 */
TTCN_Runtime::setverdict(FAIL);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_octetstring was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__ucharstring(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 430, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_ucharstring");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_ucharstring", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(431);
/* JsonBasicEncDecTest_bs.ttcn, line 431 */
UNIVERSAL_CHARSTRING x(us_0);
current_location.update_lineno(432);
/* JsonBasicEncDecTest_bs.ttcn, line 432 */
UNIVERSAL_CHARSTRING y(us_0);
current_location.update_lineno(433);
/* JsonBasicEncDecTest_bs.ttcn, line 433 */
BITSTRING bs;
current_location.update_lineno(435);
/* JsonBasicEncDecTest_bs.ttcn, line 435 */
BITSTRING expected(oct2bit(unichar2oct(us_1)));
current_location.update_lineno(436);
/* JsonBasicEncDecTest_bs.ttcn, line 436 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(437);
/* JsonBasicEncDecTest_bs.ttcn, line 437 */
bs = JsonEncDecFunctions::f__json__enc__ucs2bs(us_0);
current_location.update_lineno(441);
/* JsonBasicEncDecTest_bs.ttcn, line 441 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(443);
/* JsonBasicEncDecTest_bs.ttcn, line 443 */
bs = JsonEncDecFunctions::f__json__enc__ucs2bs(y);
current_location.update_lineno(444);
/* JsonBasicEncDecTest_bs.ttcn, line 444 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(447);
/* JsonBasicEncDecTest_bs.ttcn, line 447 */
{
OCTETSTRING tmp_87;
JsonBasicTypes::UCS__json_encoder(y, tmp_87, JsonBasicTypes::UCS__json_default_coding);
bs = oct2bit(tmp_87);
}
current_location.update_lineno(448);
/* JsonBasicEncDecTest_bs.ttcn, line 448 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(451);
/* JsonBasicEncDecTest_bs.ttcn, line 451 */
UNIVERSAL_CHARSTRING z(JsonEncDecFunctions::f__json__dec__bs2ucs(expected));
current_location.update_lineno(452);
/* JsonBasicEncDecTest_bs.ttcn, line 452 */
if ((y == z)) {
current_location.update_lineno(453);
/* JsonBasicEncDecTest_bs.ttcn, line 453 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(455);
/* JsonBasicEncDecTest_bs.ttcn, line 455 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(458);
/* JsonBasicEncDecTest_bs.ttcn, line 458 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_88(bit2oct(expected));
INTEGER tmp_89(JsonBasicTypes::UCS__json_decoder(tmp_88, z, JsonBasicTypes::UCS__json_default_coding));
if (tmp_89 == 0) {
expected = oct2bit(tmp_88);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_89;
}
current_location.update_lineno(459);
/* JsonBasicEncDecTest_bs.ttcn, line 459 */
{
boolean tmp_90;
tmp_90 = (r == 0);
if (tmp_90) tmp_90 = (y == z);
if (tmp_90) {
current_location.update_lineno(460);
/* JsonBasicEncDecTest_bs.ttcn, line 460 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(462);
/* JsonBasicEncDecTest_bs.ttcn, line 462 */
TTCN_Runtime::setverdict(FAIL);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_ucharstring was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__verdict(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 469, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_verdict");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_verdict", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(470);
/* JsonBasicEncDecTest_bs.ttcn, line 470 */
VERDICTTYPE x(PASS);
current_location.update_lineno(471);
/* JsonBasicEncDecTest_bs.ttcn, line 471 */
VERDICTTYPE y(PASS);
current_location.update_lineno(472);
/* JsonBasicEncDecTest_bs.ttcn, line 472 */
BITSTRING bs;
current_location.update_lineno(473);
/* JsonBasicEncDecTest_bs.ttcn, line 473 */
BITSTRING expected(bs_11);
current_location.update_lineno(474);
/* JsonBasicEncDecTest_bs.ttcn, line 474 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::log_event_str(" oct: ");
os_4.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(475);
/* JsonBasicEncDecTest_bs.ttcn, line 475 */
bs = JsonEncDecFunctions::f__json__enc__v2bs(PASS);
current_location.update_lineno(476);
/* JsonBasicEncDecTest_bs.ttcn, line 476 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(478);
/* JsonBasicEncDecTest_bs.ttcn, line 478 */
bs = JsonEncDecFunctions::f__json__enc__v2bs(y);
current_location.update_lineno(479);
/* JsonBasicEncDecTest_bs.ttcn, line 479 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(486);
/* JsonBasicEncDecTest_bs.ttcn, line 486 */
VERDICTTYPE z(JsonEncDecFunctions::f__json__dec__bs2v(expected));
current_location.update_lineno(487);
/* JsonBasicEncDecTest_bs.ttcn, line 487 */
if ((y == z)) {
current_location.update_lineno(488);
/* JsonBasicEncDecTest_bs.ttcn, line 488 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(490);
/* JsonBasicEncDecTest_bs.ttcn, line 490 */
TTCN_Runtime::setverdict(FAIL);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_verdict was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__record(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 509, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_record");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_record", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(510);
/* JsonBasicEncDecTest_bs.ttcn, line 510 */
JsonBasicTypes::R__json x;
x.i() = 1;
x.bs() = bs_8;
x.cs() = cs_0;
x.hs() = hs_0;
x.os() = os_5;
x.ucs() = us_0;
x.e() = JsonBasicTypes::E__json::first;
current_location.update_lineno(519);
/* JsonBasicEncDecTest_bs.ttcn, line 519 */
JsonBasicTypes::R__json y;
y.i() = 1;
y.bs() = bs_8;
y.cs() = cs_0;
y.hs() = hs_0;
y.os() = os_5;
y.ucs() = us_0;
y.e() = JsonBasicTypes::E__json::first;
current_location.update_lineno(528);
/* JsonBasicEncDecTest_bs.ttcn, line 528 */
BITSTRING bs;
current_location.update_lineno(529);
/* JsonBasicEncDecTest_bs.ttcn, line 529 */
BITSTRING expected(oct2bit(unichar2oct(us_2)));
current_location.update_lineno(530);
/* JsonBasicEncDecTest_bs.ttcn, line 530 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(531);
/* JsonBasicEncDecTest_bs.ttcn, line 531 */
bs = JsonEncDecFunctions::f__json__enc__r2bs(x);
current_location.update_lineno(532);
/* JsonBasicEncDecTest_bs.ttcn, line 532 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bs.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(533);
/* JsonBasicEncDecTest_bs.ttcn, line 533 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bit2oct(bs).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(534);
/* JsonBasicEncDecTest_bs.ttcn, line 534 */
try {
TTCN_Logger::begin_event(TTCN_USER);
oct2char(bit2oct(bs)).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(535);
/* JsonBasicEncDecTest_bs.ttcn, line 535 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(537);
/* JsonBasicEncDecTest_bs.ttcn, line 537 */
bs = JsonEncDecFunctions::f__json__enc__r2bs(y);
current_location.update_lineno(538);
/* JsonBasicEncDecTest_bs.ttcn, line 538 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bit2oct(bs).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(539);
/* JsonBasicEncDecTest_bs.ttcn, line 539 */
if ((bs == expected)) {
current_location.update_lineno(540);
/* JsonBasicEncDecTest_bs.ttcn, line 540 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(542);
/* JsonBasicEncDecTest_bs.ttcn, line 542 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(546);
/* JsonBasicEncDecTest_bs.ttcn, line 546 */
{
OCTETSTRING tmp_96;
JsonBasicTypes::R__json_encoder(y, tmp_96, JsonBasicTypes::R__json_default_coding);
bs = oct2bit(tmp_96);
}
current_location.update_lineno(547);
/* JsonBasicEncDecTest_bs.ttcn, line 547 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(550);
/* JsonBasicEncDecTest_bs.ttcn, line 550 */
JsonBasicTypes::R__json z(JsonEncDecFunctions::f__json__dec__bs2r(expected));
current_location.update_lineno(551);
/* JsonBasicEncDecTest_bs.ttcn, line 551 */
if ((y == z)) {
current_location.update_lineno(552);
/* JsonBasicEncDecTest_bs.ttcn, line 552 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(554);
/* JsonBasicEncDecTest_bs.ttcn, line 554 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(557);
/* JsonBasicEncDecTest_bs.ttcn, line 557 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_97(bit2oct(expected));
INTEGER tmp_98(JsonBasicTypes::R__json_decoder(tmp_97, z, JsonBasicTypes::R__json_default_coding));
if (tmp_98 == 0) {
expected = oct2bit(tmp_97);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_98;
}
current_location.update_lineno(558);
/* JsonBasicEncDecTest_bs.ttcn, line 558 */
{
boolean tmp_99;
tmp_99 = (r == 0);
if (tmp_99) tmp_99 = (y == z);
if (tmp_99) {
current_location.update_lineno(559);
/* JsonBasicEncDecTest_bs.ttcn, line 559 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(561);
/* JsonBasicEncDecTest_bs.ttcn, line 561 */
TTCN_Runtime::setverdict(FAIL);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_record was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__set(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 565, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_set");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_set", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(566);
/* JsonBasicEncDecTest_bs.ttcn, line 566 */
JsonBasicTypes::S__json x;
x.i() = 1;
x.bs() = bs_8;
x.cs() = cs_0;
x.hs() = hs_0;
x.os() = os_5;
x.ucs() = us_0;
x.e() = JsonBasicTypes::E__json::first;
current_location.update_lineno(575);
/* JsonBasicEncDecTest_bs.ttcn, line 575 */
JsonBasicTypes::S__json y;
y.i() = 1;
y.bs() = bs_8;
y.cs() = cs_0;
y.hs() = hs_0;
y.os() = os_5;
y.ucs() = us_0;
y.e() = JsonBasicTypes::E__json::first;
current_location.update_lineno(584);
/* JsonBasicEncDecTest_bs.ttcn, line 584 */
BITSTRING bs;
current_location.update_lineno(585);
/* JsonBasicEncDecTest_bs.ttcn, line 585 */
BITSTRING expected(oct2bit(unichar2oct(us_2)));
current_location.update_lineno(586);
/* JsonBasicEncDecTest_bs.ttcn, line 586 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(587);
/* JsonBasicEncDecTest_bs.ttcn, line 587 */
bs = JsonEncDecFunctions::f__json__enc__s2bs(x);
current_location.update_lineno(591);
/* JsonBasicEncDecTest_bs.ttcn, line 591 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(593);
/* JsonBasicEncDecTest_bs.ttcn, line 593 */
bs = JsonEncDecFunctions::f__json__enc__s2bs(y);
current_location.update_lineno(594);
/* JsonBasicEncDecTest_bs.ttcn, line 594 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bit2oct(bs).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(595);
/* JsonBasicEncDecTest_bs.ttcn, line 595 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(598);
/* JsonBasicEncDecTest_bs.ttcn, line 598 */
{
OCTETSTRING tmp_103;
JsonBasicTypes::S__json_encoder(y, tmp_103, JsonBasicTypes::S__json_default_coding);
bs = oct2bit(tmp_103);
}
current_location.update_lineno(599);
/* JsonBasicEncDecTest_bs.ttcn, line 599 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(602);
/* JsonBasicEncDecTest_bs.ttcn, line 602 */
JsonBasicTypes::S__json z(JsonEncDecFunctions::f__json__dec__bs2s(expected));
current_location.update_lineno(603);
/* JsonBasicEncDecTest_bs.ttcn, line 603 */
if ((y == z)) {
current_location.update_lineno(604);
/* JsonBasicEncDecTest_bs.ttcn, line 604 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(606);
/* JsonBasicEncDecTest_bs.ttcn, line 606 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(609);
/* JsonBasicEncDecTest_bs.ttcn, line 609 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_104(bit2oct(expected));
INTEGER tmp_105(JsonBasicTypes::S__json_decoder(tmp_104, z, JsonBasicTypes::S__json_default_coding));
if (tmp_105 == 0) {
expected = oct2bit(tmp_104);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_105;
}
current_location.update_lineno(610);
/* JsonBasicEncDecTest_bs.ttcn, line 610 */
{
boolean tmp_106;
tmp_106 = (r == 0);
if (tmp_106) tmp_106 = (y == z);
if (tmp_106) {
current_location.update_lineno(611);
/* JsonBasicEncDecTest_bs.ttcn, line 611 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(613);
/* JsonBasicEncDecTest_bs.ttcn, line 613 */
TTCN_Runtime::setverdict(FAIL);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_set was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__AI3(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 621, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_AI3");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_AI3", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(622);
/* JsonBasicEncDecTest_bs.ttcn, line 622 */
JsonBasicTypes::AI3__json x;
x[0] = 0;
x[1] = 1;
x[2] = -1234;
current_location.update_lineno(623);
/* JsonBasicEncDecTest_bs.ttcn, line 623 */
JsonBasicTypes::AI3__json y;
y[0] = 0;
y[1] = 1;
y[2] = -1234;
current_location.update_lineno(624);
/* JsonBasicEncDecTest_bs.ttcn, line 624 */
BITSTRING bs;
current_location.update_lineno(625);
/* JsonBasicEncDecTest_bs.ttcn, line 625 */
BITSTRING expected(oct2bit(unichar2oct(cs_1)));
current_location.update_lineno(626);
/* JsonBasicEncDecTest_bs.ttcn, line 626 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(627);
/* JsonBasicEncDecTest_bs.ttcn, line 627 */
bs = JsonEncDecFunctions::f__json__enc__ai3tobs(x);
current_location.update_lineno(628);
/* JsonBasicEncDecTest_bs.ttcn, line 628 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bs.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(629);
/* JsonBasicEncDecTest_bs.ttcn, line 629 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bit2oct(bs).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(630);
/* JsonBasicEncDecTest_bs.ttcn, line 630 */
try {
TTCN_Logger::begin_event(TTCN_USER);
oct2char(bit2oct(bs)).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(631);
/* JsonBasicEncDecTest_bs.ttcn, line 631 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(633);
/* JsonBasicEncDecTest_bs.ttcn, line 633 */
bs = JsonEncDecFunctions::f__json__enc__ai3tobs(y);
current_location.update_lineno(634);
/* JsonBasicEncDecTest_bs.ttcn, line 634 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bit2oct(bs).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(635);
/* JsonBasicEncDecTest_bs.ttcn, line 635 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(638);
/* JsonBasicEncDecTest_bs.ttcn, line 638 */
{
OCTETSTRING tmp_110;
JsonBasicTypes::AI3__json_encoder(y, tmp_110, JsonBasicTypes::AI3__json_default_coding);
bs = oct2bit(tmp_110);
}
current_location.update_lineno(639);
/* JsonBasicEncDecTest_bs.ttcn, line 639 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(642);
/* JsonBasicEncDecTest_bs.ttcn, line 642 */
JsonBasicTypes::AI3__json z(JsonEncDecFunctions::f__json__dec__bstoai3(expected));
current_location.update_lineno(643);
/* JsonBasicEncDecTest_bs.ttcn, line 643 */
if ((y == z)) {
current_location.update_lineno(644);
/* JsonBasicEncDecTest_bs.ttcn, line 644 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(646);
/* JsonBasicEncDecTest_bs.ttcn, line 646 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(649);
/* JsonBasicEncDecTest_bs.ttcn, line 649 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_111(bit2oct(expected));
INTEGER tmp_112(JsonBasicTypes::AI3__json_decoder(tmp_111, z, JsonBasicTypes::AI3__json_default_coding));
if (tmp_112 == 0) {
expected = oct2bit(tmp_111);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_112;
}
current_location.update_lineno(650);
/* JsonBasicEncDecTest_bs.ttcn, line 650 */
{
boolean tmp_113;
tmp_113 = (r == 0);
if (tmp_113) tmp_113 = (y == z);
if (tmp_113) {
current_location.update_lineno(651);
/* JsonBasicEncDecTest_bs.ttcn, line 651 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(653);
/* JsonBasicEncDecTest_bs.ttcn, line 653 */
TTCN_Runtime::setverdict(FAIL);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_AI3 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__roi1(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 657, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_roi1");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_roi1", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(658);
/* JsonBasicEncDecTest_bs.ttcn, line 658 */
JsonBasicTypes::RoI__json x(NULL_VALUE);
current_location.update_lineno(659);
/* JsonBasicEncDecTest_bs.ttcn, line 659 */
JsonBasicTypes::RoI__json y(NULL_VALUE);
current_location.update_lineno(660);
/* JsonBasicEncDecTest_bs.ttcn, line 660 */
BITSTRING bs;
current_location.update_lineno(661);
/* JsonBasicEncDecTest_bs.ttcn, line 661 */
BITSTRING expected(oct2bit(unichar2oct(cs_2)));
current_location.update_lineno(662);
/* JsonBasicEncDecTest_bs.ttcn, line 662 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(663);
/* JsonBasicEncDecTest_bs.ttcn, line 663 */
bs = JsonEncDecFunctions::f__json__enc__roi2bs(NULL_VALUE);
current_location.update_lineno(664);
/* JsonBasicEncDecTest_bs.ttcn, line 664 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bs.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(665);
/* JsonBasicEncDecTest_bs.ttcn, line 665 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bit2oct(bs).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(666);
/* JsonBasicEncDecTest_bs.ttcn, line 666 */
try {
TTCN_Logger::begin_event(TTCN_USER);
oct2char(bit2oct(bs)).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(667);
/* JsonBasicEncDecTest_bs.ttcn, line 667 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(669);
/* JsonBasicEncDecTest_bs.ttcn, line 669 */
bs = JsonEncDecFunctions::f__json__enc__roi2bs(y);
current_location.update_lineno(670);
/* JsonBasicEncDecTest_bs.ttcn, line 670 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bit2oct(bs).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(671);
/* JsonBasicEncDecTest_bs.ttcn, line 671 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(674);
/* JsonBasicEncDecTest_bs.ttcn, line 674 */
{
OCTETSTRING tmp_117;
JsonBasicTypes::RoI__json_encoder(y, tmp_117, JsonBasicTypes::RoI__json_default_coding);
bs = oct2bit(tmp_117);
}
current_location.update_lineno(675);
/* JsonBasicEncDecTest_bs.ttcn, line 675 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(678);
/* JsonBasicEncDecTest_bs.ttcn, line 678 */
JsonBasicTypes::RoI__json z(JsonEncDecFunctions::f__json__dec__bs2roi(expected));
current_location.update_lineno(679);
/* JsonBasicEncDecTest_bs.ttcn, line 679 */
if ((y == z)) {
current_location.update_lineno(680);
/* JsonBasicEncDecTest_bs.ttcn, line 680 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(682);
/* JsonBasicEncDecTest_bs.ttcn, line 682 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(685);
/* JsonBasicEncDecTest_bs.ttcn, line 685 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_118(bit2oct(expected));
INTEGER tmp_119(JsonBasicTypes::RoI__json_decoder(tmp_118, z, JsonBasicTypes::RoI__json_default_coding));
if (tmp_119 == 0) {
expected = oct2bit(tmp_118);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_119;
}
current_location.update_lineno(686);
/* JsonBasicEncDecTest_bs.ttcn, line 686 */
{
boolean tmp_120;
tmp_120 = (r == 0);
if (tmp_120) tmp_120 = (y == z);
if (tmp_120) {
current_location.update_lineno(687);
/* JsonBasicEncDecTest_bs.ttcn, line 687 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(689);
/* JsonBasicEncDecTest_bs.ttcn, line 689 */
TTCN_Runtime::setverdict(FAIL);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_roi1 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__roi2(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 693, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_roi2");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_roi2", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(694);
/* JsonBasicEncDecTest_bs.ttcn, line 694 */
JsonBasicTypes::RoI__json x;
x.set_size(7);
x[0] = 0;
x[1] = 1;
x[2] = 9;
x[3] = 10;
x[4] = 123456789;
x[5] = -1;
{ INTEGER INTEGER_tmp("-1234567890123");
x[6] = INTEGER_tmp; }
current_location.update_lineno(695);
/* JsonBasicEncDecTest_bs.ttcn, line 695 */
JsonBasicTypes::RoI__json y;
y.set_size(7);
y[0] = 0;
y[1] = 1;
y[2] = 9;
y[3] = 10;
y[4] = 123456789;
y[5] = -1;
{ INTEGER INTEGER_tmp("-1234567890123");
y[6] = INTEGER_tmp; }
current_location.update_lineno(696);
/* JsonBasicEncDecTest_bs.ttcn, line 696 */
BITSTRING bs;
current_location.update_lineno(697);
/* JsonBasicEncDecTest_bs.ttcn, line 697 */
BITSTRING expected(oct2bit(unichar2oct(cs_3)));
current_location.update_lineno(698);
/* JsonBasicEncDecTest_bs.ttcn, line 698 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(699);
/* JsonBasicEncDecTest_bs.ttcn, line 699 */
bs = JsonEncDecFunctions::f__json__enc__roi2bs(x);
current_location.update_lineno(700);
/* JsonBasicEncDecTest_bs.ttcn, line 700 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bs.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(701);
/* JsonBasicEncDecTest_bs.ttcn, line 701 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bit2oct(bs).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(702);
/* JsonBasicEncDecTest_bs.ttcn, line 702 */
try {
TTCN_Logger::begin_event(TTCN_USER);
oct2char(bit2oct(bs)).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(703);
/* JsonBasicEncDecTest_bs.ttcn, line 703 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(705);
/* JsonBasicEncDecTest_bs.ttcn, line 705 */
bs = JsonEncDecFunctions::f__json__enc__roi2bs(y);
current_location.update_lineno(706);
/* JsonBasicEncDecTest_bs.ttcn, line 706 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bit2oct(bs).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(707);
/* JsonBasicEncDecTest_bs.ttcn, line 707 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(710);
/* JsonBasicEncDecTest_bs.ttcn, line 710 */
{
OCTETSTRING tmp_124;
JsonBasicTypes::RoI__json_encoder(y, tmp_124, JsonBasicTypes::RoI__json_default_coding);
bs = oct2bit(tmp_124);
}
current_location.update_lineno(711);
/* JsonBasicEncDecTest_bs.ttcn, line 711 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(714);
/* JsonBasicEncDecTest_bs.ttcn, line 714 */
JsonBasicTypes::RoI__json z(JsonEncDecFunctions::f__json__dec__bs2roi(expected));
current_location.update_lineno(715);
/* JsonBasicEncDecTest_bs.ttcn, line 715 */
if ((y == z)) {
current_location.update_lineno(716);
/* JsonBasicEncDecTest_bs.ttcn, line 716 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(718);
/* JsonBasicEncDecTest_bs.ttcn, line 718 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(721);
/* JsonBasicEncDecTest_bs.ttcn, line 721 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_125(bit2oct(expected));
INTEGER tmp_126(JsonBasicTypes::RoI__json_decoder(tmp_125, z, JsonBasicTypes::RoI__json_default_coding));
if (tmp_126 == 0) {
expected = oct2bit(tmp_125);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_126;
}
current_location.update_lineno(722);
/* JsonBasicEncDecTest_bs.ttcn, line 722 */
{
boolean tmp_127;
tmp_127 = (r == 0);
if (tmp_127) tmp_127 = (y == z);
if (tmp_127) {
current_location.update_lineno(723);
/* JsonBasicEncDecTest_bs.ttcn, line 723 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(725);
/* JsonBasicEncDecTest_bs.ttcn, line 725 */
TTCN_Runtime::setverdict(FAIL);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_roi2 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__soi1(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 730, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_soi1");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_soi1", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(731);
/* JsonBasicEncDecTest_bs.ttcn, line 731 */
JsonBasicTypes::SoI__json x(NULL_VALUE);
current_location.update_lineno(732);
/* JsonBasicEncDecTest_bs.ttcn, line 732 */
JsonBasicTypes::SoI__json y(NULL_VALUE);
current_location.update_lineno(733);
/* JsonBasicEncDecTest_bs.ttcn, line 733 */
BITSTRING bs;
current_location.update_lineno(734);
/* JsonBasicEncDecTest_bs.ttcn, line 734 */
BITSTRING expected(oct2bit(unichar2oct(cs_2)));
current_location.update_lineno(735);
/* JsonBasicEncDecTest_bs.ttcn, line 735 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(736);
/* JsonBasicEncDecTest_bs.ttcn, line 736 */
bs = JsonEncDecFunctions::f__json__enc__soi2bs(NULL_VALUE);
current_location.update_lineno(737);
/* JsonBasicEncDecTest_bs.ttcn, line 737 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bs.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(738);
/* JsonBasicEncDecTest_bs.ttcn, line 738 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bit2oct(bs).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(739);
/* JsonBasicEncDecTest_bs.ttcn, line 739 */
try {
TTCN_Logger::begin_event(TTCN_USER);
oct2char(bit2oct(bs)).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(740);
/* JsonBasicEncDecTest_bs.ttcn, line 740 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(742);
/* JsonBasicEncDecTest_bs.ttcn, line 742 */
bs = JsonEncDecFunctions::f__json__enc__soi2bs(y);
current_location.update_lineno(743);
/* JsonBasicEncDecTest_bs.ttcn, line 743 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bit2oct(bs).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(744);
/* JsonBasicEncDecTest_bs.ttcn, line 744 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(747);
/* JsonBasicEncDecTest_bs.ttcn, line 747 */
{
OCTETSTRING tmp_131;
JsonBasicTypes::SoI__json_encoder(y, tmp_131, JsonBasicTypes::SoI__json_default_coding);
bs = oct2bit(tmp_131);
}
current_location.update_lineno(748);
/* JsonBasicEncDecTest_bs.ttcn, line 748 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(751);
/* JsonBasicEncDecTest_bs.ttcn, line 751 */
JsonBasicTypes::SoI__json z(JsonEncDecFunctions::f__json__dec__bs2soi(expected));
current_location.update_lineno(752);
/* JsonBasicEncDecTest_bs.ttcn, line 752 */
if ((y == z)) {
current_location.update_lineno(753);
/* JsonBasicEncDecTest_bs.ttcn, line 753 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(755);
/* JsonBasicEncDecTest_bs.ttcn, line 755 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(758);
/* JsonBasicEncDecTest_bs.ttcn, line 758 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_132(bit2oct(expected));
INTEGER tmp_133(JsonBasicTypes::SoI__json_decoder(tmp_132, z, JsonBasicTypes::SoI__json_default_coding));
if (tmp_133 == 0) {
expected = oct2bit(tmp_132);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_133;
}
current_location.update_lineno(759);
/* JsonBasicEncDecTest_bs.ttcn, line 759 */
{
boolean tmp_134;
tmp_134 = (r == 0);
if (tmp_134) tmp_134 = (y == z);
if (tmp_134) {
current_location.update_lineno(760);
/* JsonBasicEncDecTest_bs.ttcn, line 760 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(762);
/* JsonBasicEncDecTest_bs.ttcn, line 762 */
TTCN_Runtime::setverdict(FAIL);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_soi1 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__soi2(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 766, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_soi2");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_soi2", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(767);
/* JsonBasicEncDecTest_bs.ttcn, line 767 */
JsonBasicTypes::SoI__json x;
x.set_size(1);
x[0] = 0;
current_location.update_lineno(768);
/* JsonBasicEncDecTest_bs.ttcn, line 768 */
JsonBasicTypes::SoI__json y;
y.set_size(1);
y[0] = 0;
current_location.update_lineno(769);
/* JsonBasicEncDecTest_bs.ttcn, line 769 */
BITSTRING bs;
current_location.update_lineno(770);
/* JsonBasicEncDecTest_bs.ttcn, line 770 */
BITSTRING expected(oct2bit(unichar2oct(cs_4)));
current_location.update_lineno(771);
/* JsonBasicEncDecTest_bs.ttcn, line 771 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(772);
/* JsonBasicEncDecTest_bs.ttcn, line 772 */
bs = JsonEncDecFunctions::f__json__enc__soi2bs(x);
current_location.update_lineno(773);
/* JsonBasicEncDecTest_bs.ttcn, line 773 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bs.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(774);
/* JsonBasicEncDecTest_bs.ttcn, line 774 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bit2oct(bs).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(775);
/* JsonBasicEncDecTest_bs.ttcn, line 775 */
try {
TTCN_Logger::begin_event(TTCN_USER);
oct2char(bit2oct(bs)).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(776);
/* JsonBasicEncDecTest_bs.ttcn, line 776 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(778);
/* JsonBasicEncDecTest_bs.ttcn, line 778 */
bs = JsonEncDecFunctions::f__json__enc__soi2bs(y);
current_location.update_lineno(779);
/* JsonBasicEncDecTest_bs.ttcn, line 779 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bit2oct(bs).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(780);
/* JsonBasicEncDecTest_bs.ttcn, line 780 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(783);
/* JsonBasicEncDecTest_bs.ttcn, line 783 */
{
OCTETSTRING tmp_138;
JsonBasicTypes::SoI__json_encoder(y, tmp_138, JsonBasicTypes::SoI__json_default_coding);
bs = oct2bit(tmp_138);
}
current_location.update_lineno(784);
/* JsonBasicEncDecTest_bs.ttcn, line 784 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(787);
/* JsonBasicEncDecTest_bs.ttcn, line 787 */
JsonBasicTypes::SoI__json z(JsonEncDecFunctions::f__json__dec__bs2soi(expected));
current_location.update_lineno(788);
/* JsonBasicEncDecTest_bs.ttcn, line 788 */
if ((y == z)) {
current_location.update_lineno(789);
/* JsonBasicEncDecTest_bs.ttcn, line 789 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(791);
/* JsonBasicEncDecTest_bs.ttcn, line 791 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(794);
/* JsonBasicEncDecTest_bs.ttcn, line 794 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_139(bit2oct(expected));
INTEGER tmp_140(JsonBasicTypes::SoI__json_decoder(tmp_139, z, JsonBasicTypes::SoI__json_default_coding));
if (tmp_140 == 0) {
expected = oct2bit(tmp_139);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_140;
}
current_location.update_lineno(795);
/* JsonBasicEncDecTest_bs.ttcn, line 795 */
{
boolean tmp_141;
tmp_141 = (r == 0);
if (tmp_141) tmp_141 = (y == z);
if (tmp_141) {
current_location.update_lineno(796);
/* JsonBasicEncDecTest_bs.ttcn, line 796 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(798);
/* JsonBasicEncDecTest_bs.ttcn, line 798 */
TTCN_Runtime::setverdict(FAIL);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_soi2 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__soi3(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 803, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_soi3");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_soi3", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(804);
/* JsonBasicEncDecTest_bs.ttcn, line 804 */
JsonBasicTypes::SoI__json x;
x.set_size(7);
x[0] = 0;
x[1] = 1;
x[2] = 9;
x[3] = 10;
x[4] = 123456789;
x[5] = -1;
{ INTEGER INTEGER_tmp("-1234567890123");
x[6] = INTEGER_tmp; }
current_location.update_lineno(805);
/* JsonBasicEncDecTest_bs.ttcn, line 805 */
JsonBasicTypes::SoI__json y;
y.set_size(7);
y[0] = 0;
y[1] = 1;
y[2] = 9;
y[3] = 10;
y[4] = 123456789;
y[5] = -1;
{ INTEGER INTEGER_tmp("-1234567890123");
y[6] = INTEGER_tmp; }
current_location.update_lineno(806);
/* JsonBasicEncDecTest_bs.ttcn, line 806 */
BITSTRING bs;
current_location.update_lineno(807);
/* JsonBasicEncDecTest_bs.ttcn, line 807 */
BITSTRING expected(oct2bit(unichar2oct(cs_3)));
current_location.update_lineno(808);
/* JsonBasicEncDecTest_bs.ttcn, line 808 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(809);
/* JsonBasicEncDecTest_bs.ttcn, line 809 */
bs = JsonEncDecFunctions::f__json__enc__soi2bs(x);
current_location.update_lineno(810);
/* JsonBasicEncDecTest_bs.ttcn, line 810 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bs.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(811);
/* JsonBasicEncDecTest_bs.ttcn, line 811 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bit2oct(bs).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(812);
/* JsonBasicEncDecTest_bs.ttcn, line 812 */
try {
TTCN_Logger::begin_event(TTCN_USER);
oct2char(bit2oct(bs)).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(813);
/* JsonBasicEncDecTest_bs.ttcn, line 813 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(815);
/* JsonBasicEncDecTest_bs.ttcn, line 815 */
bs = JsonEncDecFunctions::f__json__enc__soi2bs(y);
current_location.update_lineno(816);
/* JsonBasicEncDecTest_bs.ttcn, line 816 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bit2oct(bs).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(817);
/* JsonBasicEncDecTest_bs.ttcn, line 817 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(820);
/* JsonBasicEncDecTest_bs.ttcn, line 820 */
{
OCTETSTRING tmp_145;
JsonBasicTypes::SoI__json_encoder(y, tmp_145, JsonBasicTypes::SoI__json_default_coding);
bs = oct2bit(tmp_145);
}
current_location.update_lineno(821);
/* JsonBasicEncDecTest_bs.ttcn, line 821 */
f__compare__bitstring(bs, expected);
current_location.update_lineno(824);
/* JsonBasicEncDecTest_bs.ttcn, line 824 */
JsonBasicTypes::SoI__json z(JsonEncDecFunctions::f__json__dec__bs2soi(expected));
current_location.update_lineno(825);
/* JsonBasicEncDecTest_bs.ttcn, line 825 */
if ((y == z)) {
current_location.update_lineno(826);
/* JsonBasicEncDecTest_bs.ttcn, line 826 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(828);
/* JsonBasicEncDecTest_bs.ttcn, line 828 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(831);
/* JsonBasicEncDecTest_bs.ttcn, line 831 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_146(bit2oct(expected));
INTEGER tmp_147(JsonBasicTypes::SoI__json_decoder(tmp_146, z, JsonBasicTypes::SoI__json_default_coding));
if (tmp_147 == 0) {
expected = oct2bit(tmp_146);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_147;
}
current_location.update_lineno(832);
/* JsonBasicEncDecTest_bs.ttcn, line 832 */
{
boolean tmp_148;
tmp_148 = (r == 0);
if (tmp_148) tmp_148 = (y == z);
if (tmp_148) {
current_location.update_lineno(833);
/* JsonBasicEncDecTest_bs.ttcn, line 833 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(835);
/* JsonBasicEncDecTest_bs.ttcn, line 835 */
TTCN_Runtime::setverdict(FAIL);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_soi3 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__jsonBasic__encdec__union__const(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 841, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_union_const");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_union_const", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(842);
/* JsonBasicEncDecTest_bs.ttcn, line 842 */
JsonBasicTypes::U__json x;
x.i() = 1;
current_location.update_lineno(843);
/* JsonBasicEncDecTest_bs.ttcn, line 843 */
BITSTRING bs;
current_location.update_lineno(844);
/* JsonBasicEncDecTest_bs.ttcn, line 844 */
BITSTRING expected(oct2bit(unichar2oct(cs_5)));
current_location.update_lineno(845);
/* JsonBasicEncDecTest_bs.ttcn, line 845 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
expected.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(846);
/* JsonBasicEncDecTest_bs.ttcn, line 846 */
bs = JsonEncDecFunctions::f__json__enc__u2bs(x);
current_location.update_lineno(850);
/* JsonBasicEncDecTest_bs.ttcn, line 850 */
f__compare__bitstring(bs, expected);
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_union_const was stopped.");
}
return TTCN_Runtime::end_testcase();
}

boolean operator==(null_type, const RoU& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @JsonBasicEncDecTest_bs.RoU.");
return other_value.val_ptr->n_elements == 0;
}

void RoU_encoder(const RoU& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicEncDecTest_bs.RoU' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(RoU_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER RoU_decoder(OCTETSTRING& input_stream, RoU& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicEncDecTest_bs.RoU' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(RoU_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void RoBS_0_encoder(const BITSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `bitstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(RoBS_0_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER RoBS_0_decoder(OCTETSTRING& input_stream, BITSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `bitstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(RoBS_0_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void RoBS_encoder(const RoBS& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicEncDecTest_bs.RoBS' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(RoBS_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER RoBS_decoder(OCTETSTRING& input_stream, RoBS& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicEncDecTest_bs.RoBS' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(RoBS_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

verdicttype testcase_tc__jsonBasic__encdec__union(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 860, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_union");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_union", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(863);
/* JsonBasicEncDecTest_bs.ttcn, line 863 */
RoU rou;
rou.set_size(7);
rou[0].i() = 1;
rou[1].bs() = bs_8;
rou[2].cs() = cs_0;
rou[3].hs() = hs_0;
rou[4].os() = os_5;
rou[5].ucs() = us_0;
rou[6].e() = JsonBasicTypes::E__json::first;
current_location.update_lineno(873);
/* JsonBasicEncDecTest_bs.ttcn, line 873 */
RoBS es;
es.set_size(7);
es[0] = oct2bit(unichar2oct(cs_5));
es[1] = oct2bit(unichar2oct(cs_6));
es[2] = oct2bit(unichar2oct(cs_7));
es[3] = oct2bit(unichar2oct(cs_8));
es[4] = oct2bit(unichar2oct(cs_9));
es[5] = oct2bit(unichar2oct(us_3));
es[6] = oct2bit(unichar2oct(cs_10));
current_location.update_lineno(882);
/* JsonBasicEncDecTest_bs.ttcn, line 882 */
BITSTRING bs;
current_location.update_lineno(883);
/* JsonBasicEncDecTest_bs.ttcn, line 883 */
INTEGER N(rou.size_of());
{
current_location.update_lineno(884);
/* JsonBasicEncDecTest_bs.ttcn, line 884 */
INTEGER i(0);
current_location.update_lineno(884);
/* JsonBasicEncDecTest_bs.ttcn, line 884 */
for ( ; ; ) {
current_location.update_lineno(884);
/* JsonBasicEncDecTest_bs.ttcn, line 884 */
if (!(i < N)) break;
current_location.update_lineno(885);
/* JsonBasicEncDecTest_bs.ttcn, line 885 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("expected:");
const_cast< const RoBS&>(es)[i].log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(886);
/* JsonBasicEncDecTest_bs.ttcn, line 886 */
bs = JsonEncDecFunctions::f__json__enc__u2bs(const_cast< const RoU&>(rou)[i]);
current_location.update_lineno(887);
/* JsonBasicEncDecTest_bs.ttcn, line 887 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bs.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(888);
/* JsonBasicEncDecTest_bs.ttcn, line 888 */
try {
TTCN_Logger::begin_event(TTCN_USER);
bit2oct(bs).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(889);
/* JsonBasicEncDecTest_bs.ttcn, line 889 */
try {
TTCN_Logger::begin_event(TTCN_USER);
oct2char(bit2oct(bs)).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(890);
/* JsonBasicEncDecTest_bs.ttcn, line 890 */
f__compare__bitstring(bs, const_cast< const RoBS&>(es)[i]);
current_location.update_lineno(893);
/* JsonBasicEncDecTest_bs.ttcn, line 893 */
{
OCTETSTRING tmp_152;
JsonBasicTypes::U__json_encoder(const_cast< const RoU&>(rou)[i], tmp_152, RoU_0_default_coding);
bs = oct2bit(tmp_152);
}
current_location.update_lineno(894);
/* JsonBasicEncDecTest_bs.ttcn, line 894 */
f__compare__bitstring(bs, const_cast< const RoBS&>(es)[i]);
current_location.update_lineno(897);
/* JsonBasicEncDecTest_bs.ttcn, line 897 */
JsonBasicTypes::U__json z(JsonEncDecFunctions::f__json__dec__bs2u(bs));
current_location.update_lineno(898);
/* JsonBasicEncDecTest_bs.ttcn, line 898 */
if ((const_cast< const RoU&>(rou)[i] == z)) {
current_location.update_lineno(899);
/* JsonBasicEncDecTest_bs.ttcn, line 899 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(901);
/* JsonBasicEncDecTest_bs.ttcn, line 901 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(904);
/* JsonBasicEncDecTest_bs.ttcn, line 904 */
INTEGER r;
{
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
OCTETSTRING tmp_153(bit2oct(bs));
INTEGER tmp_154(JsonBasicTypes::U__json_decoder(tmp_153, z, JsonBasicTypes::U__json_default_coding));
if (tmp_154 == 0) {
bs = oct2bit(tmp_153);
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
r = tmp_154;
}
current_location.update_lineno(905);
/* JsonBasicEncDecTest_bs.ttcn, line 905 */
{
boolean tmp_155;
tmp_155 = (r == 0);
if (tmp_155) tmp_155 = (const_cast< const RoU&>(rou)[i] == z);
if (tmp_155) {
current_location.update_lineno(906);
/* JsonBasicEncDecTest_bs.ttcn, line 906 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(908);
/* JsonBasicEncDecTest_bs.ttcn, line 908 */
TTCN_Runtime::setverdict(FAIL);
}
}
current_location.update_lineno(884);
/* JsonBasicEncDecTest_bs.ttcn, line 884 */
{
INTEGER tmp_156;
++i;
}
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_union was stopped.");
}
return TTCN_Runtime::end_testcase();
}

void I_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `integer' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(I_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER I_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `integer' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(I_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void CS_encoder(const CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `charstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(CS_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER CS_decoder(OCTETSTRING& input_stream, CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `charstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(CS_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

verdicttype testcase_tc__jsonBasic__encdec__anytype__i(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 920, TTCN_Location::LOCATION_TESTCASE, "tc_jsonBasic_encdec_anytype_i");
try {
TTCN_Runtime::begin_testcase("JsonBasicEncDecTest_bs", "tc_jsonBasic_encdec_anytype_i", "JsonBasicEncDecTest_bs", "CT", "JsonBasicEncDecTest_bs", "CT", has_timer, timer_value);
current_location.update_lineno(921);
/* JsonBasicEncDecTest_bs.ttcn, line 921 */
anytype a1;
a1.AT_I() = 1;
current_location.update_lineno(922);
/* JsonBasicEncDecTest_bs.ttcn, line 922 */
try {
TTCN_Logger::begin_event(TTCN_USER);
a1.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(923);
/* JsonBasicEncDecTest_bs.ttcn, line 923 */
BITSTRING expected(oct2bit(unichar2oct(cs_11)));
current_location.update_lineno(924);
/* JsonBasicEncDecTest_bs.ttcn, line 924 */
BITSTRING bs;
current_location.update_lineno(925);
/* JsonBasicEncDecTest_bs.ttcn, line 925 */
{
OCTETSTRING tmp_158;
anytype_encoder(a1, tmp_158, anytype_default_coding);
bs = oct2bit(tmp_158);
}
current_location.update_lineno(926);
/* JsonBasicEncDecTest_bs.ttcn, line 926 */
if ((bs == expected)) {
current_location.update_lineno(927);
/* JsonBasicEncDecTest_bs.ttcn, line 927 */
TTCN_Runtime::setverdict(PASS);
}
else {
current_location.update_lineno(929);
/* JsonBasicEncDecTest_bs.ttcn, line 929 */
TTCN_Runtime::setverdict(FAIL,(TTCN_Logger::begin_event_log2str(),TTCN_Logger::log_event_str("expected: "),expected.log(),TTCN_Logger::log_event_str(" got: "),bs.log(),TTCN_Logger::log_event_str(" oct: "),bit2oct(bs).log(),TTCN_Logger::end_event_log2str()));
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_jsonBasic_encdec_anytype_i was stopped.");
}
return TTCN_Runtime::end_testcase();
}

void anytype_encoder(const anytype& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicEncDecTest_bs.anytype' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(anytype_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER anytype_decoder(OCTETSTRING& input_stream, anytype& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicEncDecTest_bs.anytype' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(anytype_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "JsonBasicEncDecTest_bs");
JsonEncDecFunctions::module_object.pre_init_module();
module_object.add_function("f_compare_bitstring", (genericfunc_t)&f__compare__bitstring, NULL);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_integer", testcase_tc__jsonBasic__encdec__integer);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_float1", testcase_tc__jsonBasic__encdec__float1);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_float2", testcase_tc__jsonBasic__encdec__float2);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_float3", testcase_tc__jsonBasic__encdec__float3);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_float4", testcase_tc__jsonBasic__encdec__float4);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_enum", testcase_tc__jsonBasic__encdec__enum);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_bool1", testcase_tc__jsonBasic__encdec__bool1);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_bool2", testcase_tc__jsonBasic__encdec__bool2);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_bitstring", testcase_tc__jsonBasic__encdec__bitstring);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_charstring", testcase_tc__jsonBasic__encdec__charstring);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_hexstring", testcase_tc__jsonBasic__encdec__hexstring);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_octetstring", testcase_tc__jsonBasic__encdec__octetstring);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_ucharstring", testcase_tc__jsonBasic__encdec__ucharstring);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_verdict", testcase_tc__jsonBasic__encdec__verdict);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_record", testcase_tc__jsonBasic__encdec__record);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_set", testcase_tc__jsonBasic__encdec__set);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_AI3", testcase_tc__jsonBasic__encdec__AI3);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_roi1", testcase_tc__jsonBasic__encdec__roi1);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_roi2", testcase_tc__jsonBasic__encdec__roi2);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_soi1", testcase_tc__jsonBasic__encdec__soi1);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_soi2", testcase_tc__jsonBasic__encdec__soi2);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_soi3", testcase_tc__jsonBasic__encdec__soi3);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_union_const", testcase_tc__jsonBasic__encdec__union__const);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_union", testcase_tc__jsonBasic__encdec__union);
module_object.add_testcase_nonpard("tc_jsonBasic_encdec_anytype_i", testcase_tc__jsonBasic__encdec__anytype__i);
}

static void post_init_module()
{
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "JsonBasicEncDecTest_bs");
JsonEncDecFunctions::module_object.post_init_module();
}

static boolean init_comp_type(const char *component_type, boolean init_base_comps)
{
(void)init_base_comps;
if (!strcmp(component_type, "CT")) {
return TRUE;
} else return FALSE;
}

static void module_control_part()
{
TTCN_Location current_location("JsonBasicEncDecTest_bs.ttcn", 934, TTCN_Location::LOCATION_CONTROLPART, "JsonBasicEncDecTest_bs");
TTCN_Runtime::begin_controlpart("JsonBasicEncDecTest_bs");
current_location.update_lineno(935);
/* JsonBasicEncDecTest_bs.ttcn, line 935 */
testcase_tc__jsonBasic__encdec__integer(FALSE, 0.0);
current_location.update_lineno(936);
/* JsonBasicEncDecTest_bs.ttcn, line 936 */
testcase_tc__jsonBasic__encdec__float1(FALSE, 0.0);
current_location.update_lineno(937);
/* JsonBasicEncDecTest_bs.ttcn, line 937 */
testcase_tc__jsonBasic__encdec__float2(FALSE, 0.0);
current_location.update_lineno(938);
/* JsonBasicEncDecTest_bs.ttcn, line 938 */
testcase_tc__jsonBasic__encdec__float3(FALSE, 0.0);
current_location.update_lineno(939);
/* JsonBasicEncDecTest_bs.ttcn, line 939 */
testcase_tc__jsonBasic__encdec__float4(FALSE, 0.0);
current_location.update_lineno(940);
/* JsonBasicEncDecTest_bs.ttcn, line 940 */
testcase_tc__jsonBasic__encdec__enum(FALSE, 0.0);
current_location.update_lineno(941);
/* JsonBasicEncDecTest_bs.ttcn, line 941 */
testcase_tc__jsonBasic__encdec__bool1(FALSE, 0.0);
current_location.update_lineno(942);
/* JsonBasicEncDecTest_bs.ttcn, line 942 */
testcase_tc__jsonBasic__encdec__bool2(FALSE, 0.0);
current_location.update_lineno(943);
/* JsonBasicEncDecTest_bs.ttcn, line 943 */
testcase_tc__jsonBasic__encdec__bitstring(FALSE, 0.0);
current_location.update_lineno(944);
/* JsonBasicEncDecTest_bs.ttcn, line 944 */
testcase_tc__jsonBasic__encdec__charstring(FALSE, 0.0);
current_location.update_lineno(945);
/* JsonBasicEncDecTest_bs.ttcn, line 945 */
testcase_tc__jsonBasic__encdec__hexstring(FALSE, 0.0);
current_location.update_lineno(946);
/* JsonBasicEncDecTest_bs.ttcn, line 946 */
testcase_tc__jsonBasic__encdec__octetstring(FALSE, 0.0);
current_location.update_lineno(947);
/* JsonBasicEncDecTest_bs.ttcn, line 947 */
testcase_tc__jsonBasic__encdec__ucharstring(FALSE, 0.0);
current_location.update_lineno(950);
/* JsonBasicEncDecTest_bs.ttcn, line 950 */
testcase_tc__jsonBasic__encdec__record(FALSE, 0.0);
current_location.update_lineno(951);
/* JsonBasicEncDecTest_bs.ttcn, line 951 */
testcase_tc__jsonBasic__encdec__set(FALSE, 0.0);
current_location.update_lineno(952);
/* JsonBasicEncDecTest_bs.ttcn, line 952 */
testcase_tc__jsonBasic__encdec__roi1(FALSE, 0.0);
current_location.update_lineno(953);
/* JsonBasicEncDecTest_bs.ttcn, line 953 */
testcase_tc__jsonBasic__encdec__roi2(FALSE, 0.0);
current_location.update_lineno(955);
/* JsonBasicEncDecTest_bs.ttcn, line 955 */
testcase_tc__jsonBasic__encdec__soi1(FALSE, 0.0);
current_location.update_lineno(956);
/* JsonBasicEncDecTest_bs.ttcn, line 956 */
testcase_tc__jsonBasic__encdec__soi2(FALSE, 0.0);
current_location.update_lineno(957);
/* JsonBasicEncDecTest_bs.ttcn, line 957 */
testcase_tc__jsonBasic__encdec__soi3(FALSE, 0.0);
current_location.update_lineno(958);
/* JsonBasicEncDecTest_bs.ttcn, line 958 */
testcase_tc__jsonBasic__encdec__union__const(FALSE, 0.0);
current_location.update_lineno(959);
/* JsonBasicEncDecTest_bs.ttcn, line 959 */
testcase_tc__jsonBasic__encdec__union(FALSE, 0.0);
current_location.update_lineno(960);
/* JsonBasicEncDecTest_bs.ttcn, line 960 */
testcase_tc__jsonBasic__encdec__anytype__i(FALSE, 0.0);
TTCN_Runtime::end_controlpart();
}


} /* end of namespace */
