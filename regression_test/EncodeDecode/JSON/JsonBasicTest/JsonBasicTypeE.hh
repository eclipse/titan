// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R6B
// for U-ERICSSON\ethbaat (ethbaat@HU-00000670) on Thu Feb 20 17:43:37 2020

// Copyright (c) 2000-2019 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef JsonBasicTypeE_HH
#define JsonBasicTypeE_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>

#if TTCN3_VERSION != 60601
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef WIN32
#error This file should be compiled on WIN32
#endif

#undef JsonBasicTypeE_HH
#endif

namespace JsonBasicTypeE {

/* Forward declarations of classes */

class E__json;
class E__json_template;

} /* end of namespace */

#ifndef JsonBasicTypeE_HH
#define JsonBasicTypeE_HH

namespace JsonBasicTypeE {

/* Class definitions */

class E__json : public Base_Type { // enum
friend class E__json_template;
public:
enum enum_type { first = 0, second = 1, UNKNOWN_VALUE = 2, UNBOUND_VALUE = 3 };
private:
enum_type enum_value;

public:
E__json();
E__json(int other_value);
E__json(enum_type other_value);
E__json(const E__json& other_value);

E__json& operator=(int other_value);
E__json& operator=(enum_type other_value);
E__json& operator=(const E__json& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const E__json& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const E__json& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const E__json& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const E__json& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const E__json& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const E__json& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const E__json& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
void int2enum(int int_val);
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean, int p_chosen_field = CHOSEN_FIELD_UNSET);
};

class E__json_template : public Base_Template {
union {
E__json::enum_type single_value;
struct {
unsigned int n_values;
E__json_template *list_value;
} value_list;
};

void copy_template(const E__json_template& other_value);

public:
E__json_template();
E__json_template(template_sel other_value);
E__json_template(int other_value);
E__json_template(E__json::enum_type other_value);
E__json_template(const E__json& other_value);
E__json_template(const OPTIONAL<E__json>& other_value);
E__json_template(const E__json_template& other_value);
~E__json_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
E__json_template& operator=(template_sel other_value);
E__json_template& operator=(int other_value);
E__json_template& operator=(E__json::enum_type other_value);
E__json_template& operator=(const E__json& other_value);
E__json_template& operator=(const OPTIONAL<E__json>& other_value);
E__json_template& operator=(const E__json_template& other_value);

boolean match(E__json::enum_type other_value, boolean legacy = FALSE) const;
boolean match(const E__json& other_value, boolean legacy = FALSE) const;
E__json::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
E__json_template& list_item(unsigned int list_index);
void log() const;
void log_match(const E__json& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};


/* Function prototypes */

extern void E__json_encoder(const E__json& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER E__json_decoder(OCTETSTRING& input_stream, E__json& output_value, const UNIVERSAL_CHARSTRING& coding_name);

/* Global variable declarations */

extern const TTCN_JSONdescriptor_t E__json_json_;
extern const TTCN_Typedescriptor_t E__json_descr_;
extern UNIVERSAL_CHARSTRING E__json_default_coding;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
