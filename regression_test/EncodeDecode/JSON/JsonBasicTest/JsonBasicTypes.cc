// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R6B
// for U-ERICSSON\ethbaat (ethbaat@HU-00000670) on Thu Feb 20 17:43:37 2020

// Copyright (c) 2000-2019 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "JsonBasicTypes.hh"

namespace JsonBasicTypes {

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x33, 0x90, 0x70, 0x6c, 0x28, 0x69, 0x73, 0x2c, 0x4f, 0x3d, 0xb7, 0x6e, 0x70, 0x9c, 0xc7, 0x43 };

/* Global variable definitions */

const XERdescriptor_t       I__json_xer_ = { {"I_json>\n", "I_json>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_OERdescriptor_t I__json_oer_ = { -1, FALSE, -1, FALSE, 0, 0, NULL, 0, NULL };
const TTCN_Typedescriptor_t I__json_descr_ = { "@JsonBasicTypes.I_json", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &I__json_xer_, &INTEGER_json_, &I__json_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING I__json_default_coding("JSON");
const XERdescriptor_t       F__json_xer_ = { {"F_json>\n", "F_json>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const int F__json_oer_ext_arr_[0] = {};
const int F__json_oer_p_[0] = {};
const TTCN_OERdescriptor_t F__json_oer_ = { -1, TRUE, -1, FALSE, 0, 0, F__json_oer_ext_arr_, 0, F__json_oer_p_};
const TTCN_Typedescriptor_t F__json_descr_ = { "@JsonBasicTypes.F_json", &FLOAT_ber_, &FLOAT_raw_, NULL, &F__json_xer_, &FLOAT_json_, &F__json_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING F__json_default_coding("JSON");
// No XER for E__json
const TTCN_JSONdescriptor_t E__json_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE, FALSE, 0, NULL };
const TTCN_Typedescriptor_t E__json_descr_ = { "@JsonBasicTypes.E_json", NULL, NULL, NULL, NULL, &E__json_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING E__json_default_coding("JSON");
const XERdescriptor_t       B__json_xer_ = { {"B_json>\n", "B_json>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const int B__json_oer_ext_arr_[0] = {};
const int B__json_oer_p_[0] = {};
const TTCN_OERdescriptor_t B__json_oer_ = { -1, TRUE, -1, FALSE, 0, 0, B__json_oer_ext_arr_, 0, B__json_oer_p_};
const TTCN_Typedescriptor_t B__json_descr_ = { "@JsonBasicTypes.B_json", &BOOLEAN_ber_, &BOOLEAN_raw_, &BOOLEAN_text_, &B__json_xer_, &BOOLEAN_json_, &B__json_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING B__json_default_coding("JSON");
const XERdescriptor_t       BS__json_xer_ = { {"BS_json>\n", "BS_json>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t BS__json_descr_ = { "@JsonBasicTypes.BS_json", &BITSTRING_ber_, &BITSTRING_raw_, NULL, &BS__json_xer_, &BITSTRING_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING BS__json_default_coding("JSON");
const XERdescriptor_t       CS__json_xer_ = { {"CS_json>\n", "CS_json>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t CS__json_descr_ = { "@JsonBasicTypes.CS_json", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &CS__json_xer_, &CHARSTRING_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING CS__json_default_coding("JSON");
const XERdescriptor_t       HS__json_xer_ = { {"HS_json>\n", "HS_json>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t HS__json_descr_ = { "@JsonBasicTypes.HS_json", NULL, &HEXSTRING_raw_, NULL, &HS__json_xer_, &HEXSTRING_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING HS__json_default_coding("JSON");
const XERdescriptor_t       OS__json_xer_ = { {"OS_json>\n", "OS_json>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const int OS__json_oer_ext_arr_[0] = {};
const int OS__json_oer_p_[0] = {};
const TTCN_OERdescriptor_t OS__json_oer_ = { -1, TRUE, -1, FALSE, 0, 0, OS__json_oer_ext_arr_, 0, OS__json_oer_p_};
const TTCN_Typedescriptor_t OS__json_descr_ = { "@JsonBasicTypes.OS_json", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &OS__json_xer_, &OCTETSTRING_json_, &OS__json_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING OS__json_default_coding("JSON");
const XERdescriptor_t       UCS__json_xer_ = { {"UCS_json>\n", "UCS_json>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t UCS__json_descr_ = { "@JsonBasicTypes.UCS_json", NULL, &UNIVERSAL_CHARSTRING_raw_, &UNIVERSAL_CHARSTRING_text_, &UCS__json_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING UCS__json_default_coding("JSON");
const XERdescriptor_t       AI3__json_0_xer_ = { {"INTEGER>\n", "INTEGER>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t AI3__json_0_descr_ = { "@JsonBasicTypes.AI3_json.<element_type>", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &AI3__json_0_xer_, &INTEGER_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING AI3__json_0_default_coding("JSON");
// No XER for AI3__json
const TTCN_JSONdescriptor_t AI3__json_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE, FALSE, 0, NULL };
const TTCN_Typedescriptor_t AI3__json_descr_ = { "@JsonBasicTypes.AI3_json", NULL, NULL, NULL, NULL, &AI3__json_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING AI3__json_default_coding("JSON");
const XERdescriptor_t       V__json_xer_ = { {"V_json>\n", "V_json>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t V__json_descr_ = { "@JsonBasicTypes.V_json", NULL, NULL, NULL, &V__json_xer_, &VERDICTTYPE_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING V__json_default_coding("JSON");
const XERdescriptor_t       R__json_i_xer_ = { {"i>\n", "i>\n"}, {3, 3}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_OERdescriptor_t R__json_i_oer_ = { -1, FALSE, -1, FALSE, 0, 0, NULL, 0, NULL };
const TTCN_Typedescriptor_t R__json_i_descr_ = { "@JsonBasicTypes.R_json.i", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &R__json_i_xer_, &INTEGER_json_, &R__json_i_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING R__json_i_default_coding("JSON");
const XERdescriptor_t       R__json_bs_xer_ = { {"bs>\n", "bs>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_OERdescriptor_t R__json_bs_oer_ = { -1, FALSE, -1, FALSE, 0, 0, NULL, 0, NULL };
const TTCN_Typedescriptor_t R__json_bs_descr_ = { "@JsonBasicTypes.R_json.bs", &BITSTRING_ber_, &BITSTRING_raw_, NULL, &R__json_bs_xer_, &BITSTRING_json_, &R__json_bs_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING R__json_bs_default_coding("JSON");
const XERdescriptor_t       R__json_cs_xer_ = { {"cs>\n", "cs>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t R__json_cs_descr_ = { "@JsonBasicTypes.R_json.cs", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &R__json_cs_xer_, &CHARSTRING_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING R__json_cs_default_coding("JSON");
const XERdescriptor_t       R__json_hs_xer_ = { {"hs>\n", "hs>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t R__json_hs_descr_ = { "@JsonBasicTypes.R_json.hs", NULL, &HEXSTRING_raw_, NULL, &R__json_hs_xer_, &HEXSTRING_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING R__json_hs_default_coding("JSON");
const XERdescriptor_t       R__json_os_xer_ = { {"os>\n", "os>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const int R__json_os_oer_ext_arr_[0] = {};
const int R__json_os_oer_p_[0] = {};
const TTCN_OERdescriptor_t R__json_os_oer_ = { -1, TRUE, -1, FALSE, 0, 0, R__json_os_oer_ext_arr_, 0, R__json_os_oer_p_};
const TTCN_Typedescriptor_t R__json_os_descr_ = { "@JsonBasicTypes.R_json.os", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &R__json_os_xer_, &OCTETSTRING_json_, &R__json_os_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING R__json_os_default_coding("JSON");
const XERdescriptor_t       R__json_ucs_xer_ = { {"ucs>\n", "ucs>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t R__json_ucs_descr_ = { "@JsonBasicTypes.R_json.ucs", NULL, &UNIVERSAL_CHARSTRING_raw_, &UNIVERSAL_CHARSTRING_text_, &R__json_ucs_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING R__json_ucs_default_coding("JSON");
// No XER for R__json_e
const TTCN_Typedescriptor_t R__json_e_descr_ = { "@JsonBasicTypes.R_json.e", NULL, NULL, NULL, NULL, &E__json_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING R__json_e_default_coding("JSON");
// No XER for R__json
const TTCN_JSONdescriptor_t R__json_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE, FALSE, 0, NULL };
const TTCN_Typedescriptor_t R__json_descr_ = { "@JsonBasicTypes.R_json", NULL, NULL, NULL, NULL, &R__json_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING R__json_default_coding("JSON");
// No XER for RoI__json
const TTCN_JSONdescriptor_t RoI__json_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE, FALSE, 0, NULL };
const TTCN_Typedescriptor_t RoI__json_descr_ = { "@JsonBasicTypes.RoI_json", NULL, NULL, NULL, NULL, &RoI__json_json_, NULL, &RoI__json_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RoI__json_0_xer_ = { {"INTEGER>\n", "INTEGER>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t RoI__json_0_descr_ = { "@JsonBasicTypes.RoI_json.INTEGER", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &RoI__json_0_xer_, &INTEGER_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING RoI__json_0_default_coding("JSON");
UNIVERSAL_CHARSTRING RoI__json_default_coding("JSON");
const XERdescriptor_t       S__json_i_xer_ = { {"i>\n", "i>\n"}, {3, 3}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_OERdescriptor_t S__json_i_oer_ = { -1, FALSE, -1, FALSE, 0, 0, NULL, 0, NULL };
const TTCN_Typedescriptor_t S__json_i_descr_ = { "@JsonBasicTypes.S_json.i", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &S__json_i_xer_, &INTEGER_json_, &S__json_i_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING S__json_i_default_coding("JSON");
const XERdescriptor_t       S__json_bs_xer_ = { {"bs>\n", "bs>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_OERdescriptor_t S__json_bs_oer_ = { -1, FALSE, -1, FALSE, 0, 0, NULL, 0, NULL };
const TTCN_Typedescriptor_t S__json_bs_descr_ = { "@JsonBasicTypes.S_json.bs", &BITSTRING_ber_, &BITSTRING_raw_, NULL, &S__json_bs_xer_, &BITSTRING_json_, &S__json_bs_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING S__json_bs_default_coding("JSON");
const XERdescriptor_t       S__json_cs_xer_ = { {"cs>\n", "cs>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t S__json_cs_descr_ = { "@JsonBasicTypes.S_json.cs", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &S__json_cs_xer_, &CHARSTRING_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING S__json_cs_default_coding("JSON");
const XERdescriptor_t       S__json_hs_xer_ = { {"hs>\n", "hs>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t S__json_hs_descr_ = { "@JsonBasicTypes.S_json.hs", NULL, &HEXSTRING_raw_, NULL, &S__json_hs_xer_, &HEXSTRING_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING S__json_hs_default_coding("JSON");
const XERdescriptor_t       S__json_os_xer_ = { {"os>\n", "os>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const int S__json_os_oer_ext_arr_[0] = {};
const int S__json_os_oer_p_[0] = {};
const TTCN_OERdescriptor_t S__json_os_oer_ = { -1, TRUE, -1, FALSE, 0, 0, S__json_os_oer_ext_arr_, 0, S__json_os_oer_p_};
const TTCN_Typedescriptor_t S__json_os_descr_ = { "@JsonBasicTypes.S_json.os", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &S__json_os_xer_, &OCTETSTRING_json_, &S__json_os_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING S__json_os_default_coding("JSON");
const XERdescriptor_t       S__json_ucs_xer_ = { {"ucs>\n", "ucs>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t S__json_ucs_descr_ = { "@JsonBasicTypes.S_json.ucs", NULL, &UNIVERSAL_CHARSTRING_raw_, &UNIVERSAL_CHARSTRING_text_, &S__json_ucs_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING S__json_ucs_default_coding("JSON");
// No XER for S__json_e
const TTCN_Typedescriptor_t S__json_e_descr_ = { "@JsonBasicTypes.S_json.e", NULL, NULL, NULL, NULL, &E__json_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING S__json_e_default_coding("JSON");
// No XER for S__json
const TTCN_JSONdescriptor_t S__json_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE, FALSE, 0, NULL };
const TTCN_Typedescriptor_t S__json_descr_ = { "@JsonBasicTypes.S_json", NULL, NULL, NULL, NULL, &S__json_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING S__json_default_coding("JSON");
// No XER for SoI__json
const TTCN_JSONdescriptor_t SoI__json_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE, FALSE, 0, NULL };
const TTCN_Typedescriptor_t SoI__json_descr_ = { "@JsonBasicTypes.SoI_json", NULL, NULL, NULL, NULL, &SoI__json_json_, NULL, &SoI__json_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       SoI__json_0_xer_ = { {"INTEGER>\n", "INTEGER>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t SoI__json_0_descr_ = { "@JsonBasicTypes.SoI_json.INTEGER", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &SoI__json_0_xer_, &INTEGER_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING SoI__json_0_default_coding("JSON");
UNIVERSAL_CHARSTRING SoI__json_default_coding("JSON");
// No XER for U__json
const TTCN_JSONdescriptor_t U__json_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE, FALSE, 0, NULL };
const TTCN_Typedescriptor_t U__json_descr_ = { "@JsonBasicTypes.U_json", NULL, NULL, NULL, NULL, &U__json_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       U__json_i_xer_ = { {"i>\n", "i>\n"}, {3, 3}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_OERdescriptor_t U__json_i_oer_ = { -1, FALSE, -1, FALSE, 0, 0, NULL, 0, NULL };
const TTCN_Typedescriptor_t U__json_i_descr_ = { "@JsonBasicTypes.U_json.i", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &U__json_i_xer_, &INTEGER_json_, &U__json_i_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING U__json_i_default_coding("JSON");
const XERdescriptor_t       U__json_bs_xer_ = { {"bs>\n", "bs>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_OERdescriptor_t U__json_bs_oer_ = { -1, FALSE, -1, FALSE, 0, 0, NULL, 0, NULL };
const TTCN_Typedescriptor_t U__json_bs_descr_ = { "@JsonBasicTypes.U_json.bs", &BITSTRING_ber_, &BITSTRING_raw_, NULL, &U__json_bs_xer_, &BITSTRING_json_, &U__json_bs_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING U__json_bs_default_coding("JSON");
const XERdescriptor_t       U__json_cs_xer_ = { {"cs>\n", "cs>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t U__json_cs_descr_ = { "@JsonBasicTypes.U_json.cs", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &U__json_cs_xer_, &CHARSTRING_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING U__json_cs_default_coding("JSON");
const XERdescriptor_t       U__json_hs_xer_ = { {"hs>\n", "hs>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t U__json_hs_descr_ = { "@JsonBasicTypes.U_json.hs", NULL, &HEXSTRING_raw_, NULL, &U__json_hs_xer_, &HEXSTRING_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING U__json_hs_default_coding("JSON");
const XERdescriptor_t       U__json_os_xer_ = { {"os>\n", "os>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const int U__json_os_oer_ext_arr_[0] = {};
const int U__json_os_oer_p_[0] = {};
const TTCN_OERdescriptor_t U__json_os_oer_ = { -1, TRUE, -1, FALSE, 0, 0, U__json_os_oer_ext_arr_, 0, U__json_os_oer_p_};
const TTCN_Typedescriptor_t U__json_os_descr_ = { "@JsonBasicTypes.U_json.os", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &U__json_os_xer_, &OCTETSTRING_json_, &U__json_os_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING U__json_os_default_coding("JSON");
const XERdescriptor_t       U__json_ucs_xer_ = { {"ucs>\n", "ucs>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t U__json_ucs_descr_ = { "@JsonBasicTypes.U_json.ucs", NULL, &UNIVERSAL_CHARSTRING_raw_, &UNIVERSAL_CHARSTRING_text_, &U__json_ucs_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING U__json_ucs_default_coding("JSON");
// No XER for U__json_e
const TTCN_Typedescriptor_t U__json_e_descr_ = { "@JsonBasicTypes.U_json.e", NULL, NULL, NULL, NULL, &E__json_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING U__json_e_default_coding("JSON");
UNIVERSAL_CHARSTRING U__json_default_coding("JSON");
TTCN_Module module_object("JsonBasicTypes", __DATE__, __TIME__, module_checksum, NULL, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_6,
  current_runtime_version.requires_patch_level_1,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

E__json::E__json()
{
enum_value = UNBOUND_VALUE;
}

E__json::E__json(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @JsonBasicTypes.E_json with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

E__json::E__json(enum_type other_value)
{
enum_value = other_value;
}

E__json::E__json(const E__json& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @JsonBasicTypes.E_json.");
enum_value = other_value.enum_value;
}

E__json& E__json::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @JsonBasicTypes.E_json.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

E__json& E__json::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

E__json& E__json::operator=(const E__json& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @JsonBasicTypes.E_json.");
enum_value = other_value.enum_value;
return *this;
}

boolean E__json::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @JsonBasicTypes.E_json.");
return enum_value == other_value;
}

boolean E__json::operator==(const E__json& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @JsonBasicTypes.E_json.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @JsonBasicTypes.E_json.");
return enum_value == other_value.enum_value;
}

boolean E__json::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @JsonBasicTypes.E_json.");
return enum_value < other_value;
}

boolean E__json::operator<(const E__json& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @JsonBasicTypes.E_json.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @JsonBasicTypes.E_json.");
return enum_value < other_value.enum_value;
}

boolean E__json::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @JsonBasicTypes.E_json.");
return enum_value > other_value;
}

boolean E__json::operator>(const E__json& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @JsonBasicTypes.E_json.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @JsonBasicTypes.E_json.");
return enum_value > other_value.enum_value;
}

const char *E__json::enum_to_str(enum_type enum_par)
{
switch (enum_par) {
case first: return "first";
case second: return "second";
default: return "<unknown>";
}
}

E__json::enum_type E__json::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, "first")) return first;
else if (!strcmp(str_par, "second")) return second;
else return UNKNOWN_VALUE;
}

boolean E__json::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
case 1:
return TRUE;
default:
return FALSE;
}
}

int E__json::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @JsonBasicTypes.E_json.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int E__json::enum2int(const E__json& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @JsonBasicTypes.E_json.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

void E__json::int2enum(int int_val)
{
if (!is_valid_enum(int_val)) TTCN_error("Assigning invalid numeric value %d to a variable of enumerated type @JsonBasicTypes.E_json.", int_val);
enum_value = (enum_type)int_val;
}

E__json::operator E__json::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @JsonBasicTypes.E_json.");
return enum_value;
}

void E__json::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void E__json::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  if (param.get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@JsonBasicTypes.E_json");
  enum_value = str_to_enum(param.get_enumerated());
  if (!is_valid_enum(enum_value)) {
    param.error("Invalid enumerated value for type @JsonBasicTypes.E_json.");
  }
}

void E__json::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @JsonBasicTypes.E_json.");
text_buf.push_int(enum_value);
}

void E__json::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @JsonBasicTypes.E_json.", enum_value);
}

void E__json::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  case TTCN_EncDec::CT_OER: {
    TTCN_EncDec_ErrorContext ec("While OER-encoding type '%s': ", p_td.name);
    if(!p_td.oer)
      TTCN_EncDec_ErrorContext::error_internal
        ("No OER descriptor available for type '%s'.", p_td.name);
    OER_encode(p_td, p_buf);
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void E__json::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    int null_added=0;
    if(b_data[p_buf.get_len()-1]!='\0'){
      null_added=1;
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    if(null_added){
      size_t actpos=p_buf.get_pos();
      p_buf.set_pos(p_buf.get_len()-1);
      p_buf.cut_end();
      p_buf.set_pos(actpos);
    }
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, XER_NONE, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, FALSE)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  case TTCN_EncDec::CT_OER: {
    TTCN_EncDec_ErrorContext ec("While OER-decoding type '%s': ", p_td.name);
    if(!p_td.oer)
      TTCN_EncDec_ErrorContext::error_internal
        ("No OER descriptor available for type '%s'.", p_td.name);
     OER_struct p_oer;
    OER_decode(p_td, p_buf, p_oer);
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int E__json::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  if (enum_value == UNBOUND_VALUE) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of enumerated type @JsonBasicTypes.E_json.");
    return -1;
  }

  char* tmp_str;
  if (p_td.json->as_number) {    tmp_str = mprintf("%d", enum_value);
  }
  else {
    boolean text_found = false;
    for (size_t i = 0; i < p_td.json->nof_enum_texts; ++i) {
      if (p_td.json->enum_texts[i].index == enum_value) {
        tmp_str = mprintf("\"%s\"", p_td.json->enum_texts[i].text);
        text_found = true;
        break;
      }
    }
    if (!text_found) {
      tmp_str = mprintf("\"%s\"", enum_to_str(enum_value));
    }
  }
  int enc_len = p_tok.put_next_token(p_td.json->as_number ? JSON_TOKEN_NUMBER : JSON_TOKEN_STRING, tmp_str);
  Free(tmp_str);
  return enc_len;
}

int E__json::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent, int)
{
  json_token_t token = JSON_TOKEN_NONE;
  char* value = 0;
  size_t value_len = 0;
  boolean error = FALSE;
  size_t dec_len = 0;
  boolean use_default = p_td.json->default_value && 0 == p_tok.get_buffer_length();
  if (use_default) {
    value = const_cast<char*>(p_td.json->default_value);
    value_len = strlen(value);
  } else {
    dec_len = p_tok.get_next_token(&token, &value, &value_len);
  }
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if ((JSON_TOKEN_STRING == token && !p_td.json->as_number) || use_default) {
    if (use_default || (value_len > 2 && value[0] == '\"' && value[value_len - 1] == '\"')) {
      if (!use_default) value[value_len - 1] = 0;
      boolean text_found = false;
      for (size_t i = 0; i < p_td.json->nof_enum_texts; ++i) {
        if (strcmp(p_td.json->enum_texts[i].text, value + (use_default ? 0 : 1)) == 0) {
          enum_value = static_cast<enum_type>(p_td.json->enum_texts[i].index);
          text_found = true;
          break;
        }
      }
      if (!text_found) {
        enum_value = str_to_enum(value + (use_default ? 0 : 1));
      }
      if (!use_default) value[value_len - 1] = '\"';
      if (UNKNOWN_VALUE == enum_value) {
        error = TRUE;
      }
    } else {
      error = TRUE;
    }
  }
  else if (JSON_TOKEN_NUMBER == token && p_td.json->as_number) {
    char* value_str = mcopystrn(value, value_len);
    int number = atoi(value_str);
    if (strchr(value_str, '.') != NULL || strchr(value_str, 'e') != NULL || strchr(value_str, 'E') != NULL) {
      error = TRUE;
    }
    else if (is_valid_enum(number)) {
      enum_value = static_cast<enum_type>(number);
    }
    else {
      error = TRUE;
    }
    Free(value_str);
  }
  else {
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_INVALID_TOKEN;
  }

  if (error) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FORMAT_ERROR, p_td.json->as_number ? "number" : "string", "enumerated");
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_FATAL;
  }
  return (int)dec_len;
}

void E__json_template::copy_template(const E__json_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new E__json_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @JsonBasicTypes.E_json.");
}
}

E__json_template::E__json_template()
{
}

E__json_template::E__json_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

E__json_template::E__json_template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!E__json::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @JsonBasicTypes.E_json with unknown numeric value %d.", other_value);
single_value = (E__json::enum_type)other_value;
}

E__json_template::E__json_template(E__json::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

E__json_template::E__json_template(const E__json& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == E__json::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @JsonBasicTypes.E_json.");
single_value = other_value.enum_value;
}

E__json_template::E__json_template(const OPTIONAL<E__json>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (E__json::enum_type)(const E__json&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @JsonBasicTypes.E_json from an unbound optional field.");
}
}

E__json_template::E__json_template(const E__json_template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

E__json_template::~E__json_template()
{
clean_up();
}

boolean E__json_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean E__json_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != E__json::UNBOUND_VALUE;
}

void E__json_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

E__json_template& E__json_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

E__json_template& E__json_template::operator=(int other_value)
{
if (!E__json::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @JsonBasicTypes.E_json.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (E__json::enum_type)other_value;
return *this;
}

E__json_template& E__json_template::operator=(E__json::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

E__json_template& E__json_template::operator=(const E__json& other_value)
{
if (other_value.enum_value == E__json::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @JsonBasicTypes.E_json to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

E__json_template& E__json_template::operator=(const OPTIONAL<E__json>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (E__json::enum_type)(const E__json&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @JsonBasicTypes.E_json.");
}
return *this;
}

E__json_template& E__json_template::operator=(const E__json_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean E__json_template::match(E__json::enum_type other_value, boolean) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @JsonBasicTypes.E_json.");
}
return FALSE;
}

boolean E__json_template::match(const E__json& other_value, boolean) const
{
if (other_value.enum_value == E__json::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @JsonBasicTypes.E_json with an unbound value.");
return match(other_value.enum_value);
}

E__json::enum_type E__json_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @JsonBasicTypes.E_json.");
return single_value;
}

void E__json_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @JsonBasicTypes.E_json.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new E__json_template[list_length];
}

E__json_template& E__json_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @JsonBasicTypes.E_json.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @JsonBasicTypes.E_json.");
return value_list.list_value[list_index];
}

void E__json_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(E__json::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void E__json_template::log_match(const E__json& match_value, boolean) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void E__json_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @JsonBasicTypes.E_json.");
}
}

void E__json_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (E__json::enum_type)text_buf.pull_int().get_val();
if (!E__json::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @JsonBasicTypes.E_json.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new E__json_template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @JsonBasicTypes.E_json.");
}
}

boolean E__json_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean E__json_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void E__json_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  Module_Param_Ptr m_p = &param;
  switch (m_p->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    E__json_template new_temp;
    new_temp.set_type(m_p->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, m_p->get_size());
    for (size_t p_i=0; p_i<m_p->get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*m_p->get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Enumerated: {
    E__json::enum_type enum_val = E__json::str_to_enum(m_p->get_enumerated());
    if (!E__json::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @JsonBasicTypes.E_json.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@JsonBasicTypes.E_json");
  }
  is_ifpresent = param.get_ifpresent();
}

void E__json_template::check_restriction(template_res t_res, const char* t_name,
boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@JsonBasicTypes.E_json");
}

const TTCN_Typedescriptor_t* AI3__json::get_elem_descr() const { return &AI3__json_0_descr_; }

R__json::R__json()
{
}

R__json::R__json(const INTEGER& par_i,
    const BITSTRING& par_bs,
    const CHARSTRING& par_cs,
    const HEXSTRING& par_hs,
    const OCTETSTRING& par_os,
    const UNIVERSAL_CHARSTRING& par_ucs,
    const E__json& par_e)
  :   field_i(par_i),
  field_bs(par_bs),
  field_cs(par_cs),
  field_hs(par_hs),
  field_os(par_os),
  field_ucs(par_ucs),
  field_e(par_e)
{
}

R__json::R__json(const R__json& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @JsonBasicTypes.R_json.");
if (other_value.i().is_bound()) field_i = other_value.i();
else field_i.clean_up();
if (other_value.bs().is_bound()) field_bs = other_value.bs();
else field_bs.clean_up();
if (other_value.cs().is_bound()) field_cs = other_value.cs();
else field_cs.clean_up();
if (other_value.hs().is_bound()) field_hs = other_value.hs();
else field_hs.clean_up();
if (other_value.os().is_bound()) field_os = other_value.os();
else field_os.clean_up();
if (other_value.ucs().is_bound()) field_ucs = other_value.ucs();
else field_ucs.clean_up();
if (other_value.e().is_bound()) field_e = other_value.e();
else field_e.clean_up();
}

void R__json::clean_up()
{
field_i.clean_up();
field_bs.clean_up();
field_cs.clean_up();
field_hs.clean_up();
field_os.clean_up();
field_ucs.clean_up();
field_e.clean_up();
}

const TTCN_Typedescriptor_t* R__json::get_descriptor() const { return &R__json_descr_; }
R__json& R__json::operator=(const R__json& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @JsonBasicTypes.R_json.");
  if (other_value.i().is_bound()) field_i = other_value.i();
  else field_i.clean_up();
  if (other_value.bs().is_bound()) field_bs = other_value.bs();
  else field_bs.clean_up();
  if (other_value.cs().is_bound()) field_cs = other_value.cs();
  else field_cs.clean_up();
  if (other_value.hs().is_bound()) field_hs = other_value.hs();
  else field_hs.clean_up();
  if (other_value.os().is_bound()) field_os = other_value.os();
  else field_os.clean_up();
  if (other_value.ucs().is_bound()) field_ucs = other_value.ucs();
  else field_ucs.clean_up();
  if (other_value.e().is_bound()) field_e = other_value.e();
  else field_e.clean_up();
}
return *this;
}

boolean R__json::operator==(const R__json& other_value) const
{
return field_i==other_value.field_i
  && field_bs==other_value.field_bs
  && field_cs==other_value.field_cs
  && field_hs==other_value.field_hs
  && field_os==other_value.field_os
  && field_ucs==other_value.field_ucs
  && field_e==other_value.field_e;
}

boolean R__json::is_bound() const
{
return (field_i.is_bound())
  || (field_bs.is_bound())
  || (field_cs.is_bound())
  || (field_hs.is_bound())
  || (field_os.is_bound())
  || (field_ucs.is_bound())
  || (field_e.is_bound());
}
boolean R__json::is_value() const
{
return field_i.is_value()
  && field_bs.is_value()
  && field_cs.is_value()
  && field_hs.is_value()
  && field_os.is_value()
  && field_ucs.is_value()
  && field_e.is_value();
}
void R__json::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ i := ");
field_i.log();
TTCN_Logger::log_event_str(", bs := ");
field_bs.log();
TTCN_Logger::log_event_str(", cs := ");
field_cs.log();
TTCN_Logger::log_event_str(", hs := ");
field_hs.log();
TTCN_Logger::log_event_str(", os := ");
field_os.log();
TTCN_Logger::log_event_str(", ucs := ");
field_ucs.log();
TTCN_Logger::log_event_str(", e := ");
field_e.log();
TTCN_Logger::log_event_str(" }");
}

void R__json::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (7<param.get_size()) {
      param.error("record value of type @JsonBasicTypes.R_json has 7 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) i().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) bs().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) cs().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) hs().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) os().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) ucs().set_param(*param.get_elem(5));
    if (param.get_size()>6 && param.get_elem(6)->get_type()!=Module_Param::MP_NotUsed) e().set_param(*param.get_elem(6));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "i")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          i().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "bs")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          bs().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "cs")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          cs().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "hs")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          hs().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "os")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          os().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "ucs")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          ucs().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "e")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          e().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      curr_param->error("Non existent field name in type @JsonBasicTypes.R_json: %s", curr_param->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@JsonBasicTypes.R_json");
  }
}

void R__json::set_implicit_omit()
{
if (i().is_bound()) i().set_implicit_omit();
if (bs().is_bound()) bs().set_implicit_omit();
if (cs().is_bound()) cs().set_implicit_omit();
if (hs().is_bound()) hs().set_implicit_omit();
if (os().is_bound()) os().set_implicit_omit();
if (ucs().is_bound()) ucs().set_implicit_omit();
if (e().is_bound()) e().set_implicit_omit();
}

void R__json::encode_text(Text_Buf& text_buf) const
{
field_i.encode_text(text_buf);
field_bs.encode_text(text_buf);
field_cs.encode_text(text_buf);
field_hs.encode_text(text_buf);
field_os.encode_text(text_buf);
field_ucs.encode_text(text_buf);
field_e.encode_text(text_buf);
}

void R__json::decode_text(Text_Buf& text_buf)
{
field_i.decode_text(text_buf);
field_bs.decode_text(text_buf);
field_cs.decode_text(text_buf);
field_hs.decode_text(text_buf);
field_os.decode_text(text_buf);
field_ucs.decode_text(text_buf);
field_e.decode_text(text_buf);
}

void R__json::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  case TTCN_EncDec::CT_OER: {
    TTCN_EncDec_ErrorContext ec("While OER-encoding type '%s': ", p_td.name);
    if(!p_td.oer)
      TTCN_EncDec_ErrorContext::error_internal
        ("No OER descriptor available for type '%s'.", p_td.name);
    OER_encode(p_td, p_buf);
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void R__json::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    int null_added=0;
    if(b_data[p_buf.get_len()-1]!='\0'){
      null_added=1;
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    if(null_added){
      size_t actpos=p_buf.get_pos();
      p_buf.set_pos(p_buf.get_len()-1);
      p_buf.cut_end();
      p_buf.set_pos(actpos);
    }
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, XER_NONE, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, FALSE)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  case TTCN_EncDec::CT_OER: {
    TTCN_EncDec_ErrorContext ec("While OER-decoding type '%s': ", p_td.name);
    if(!p_td.oer)
      TTCN_EncDec_ErrorContext::error_internal
        ("No OER descriptor available for type '%s'.", p_td.name);
     OER_struct p_oer;
    OER_decode(p_td, p_buf, p_oer);
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int R__json::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @JsonBasicTypes.R_json.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "i");
    enc_len += field_i.JSON_encode(R__json_i_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "bs");
    enc_len += field_bs.JSON_encode(R__json_bs_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "cs");
    enc_len += field_cs.JSON_encode(R__json_cs_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "hs");
    enc_len += field_hs.JSON_encode(R__json_hs_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "os");
    enc_len += field_os.JSON_encode(R__json_os_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "ucs");
    enc_len += field_ucs.JSON_encode(R__json_ucs_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "e");
    enc_len += field_e.JSON_encode(R__json_e_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int R__json::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent, int)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  size_t dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  boolean i_found = FALSE;
  boolean bs_found = FALSE;
  boolean cs_found = FALSE;
  boolean hs_found = FALSE;
  boolean os_found = FALSE;
  boolean ucs_found = FALSE;
  boolean e_found = FALSE;

  while (TRUE) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (1 == name_len && 0 == strncmp(fld_name, "i", name_len)) {
        i_found = TRUE;
         int ret_val = field_i.JSON_decode(R__json_i_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 1, "i");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += (size_t)ret_val;
      }
      else if (2 == name_len && 0 == strncmp(fld_name, "bs", name_len)) {
        bs_found = TRUE;
         int ret_val = field_bs.JSON_decode(R__json_bs_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 2, "bs");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += (size_t)ret_val;
      }
      else if (2 == name_len && 0 == strncmp(fld_name, "cs", name_len)) {
        cs_found = TRUE;
         int ret_val = field_cs.JSON_decode(R__json_cs_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 2, "cs");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += (size_t)ret_val;
      }
      else if (2 == name_len && 0 == strncmp(fld_name, "hs", name_len)) {
        hs_found = TRUE;
         int ret_val = field_hs.JSON_decode(R__json_hs_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 2, "hs");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += (size_t)ret_val;
      }
      else if (2 == name_len && 0 == strncmp(fld_name, "os", name_len)) {
        os_found = TRUE;
         int ret_val = field_os.JSON_decode(R__json_os_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 2, "os");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += (size_t)ret_val;
      }
      else if (3 == name_len && 0 == strncmp(fld_name, "ucs", name_len)) {
        ucs_found = TRUE;
         int ret_val = field_ucs.JSON_decode(R__json_ucs_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 3, "ucs");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += (size_t)ret_val;
      }
      else if (1 == name_len && 0 == strncmp(fld_name, "e", name_len)) {
        e_found = TRUE;
         int ret_val = field_e.JSON_decode(R__json_e_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 1, "e");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += (size_t)ret_val;
      }
      else {
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, (int)name_len, fld_name);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, (int)name_len, fld_name);
          return JSON_ERROR_FATAL;
        }
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!i_found) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "i");
    return JSON_ERROR_FATAL;
  }
  if (!bs_found) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "bs");
    return JSON_ERROR_FATAL;
  }
  if (!cs_found) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "cs");
    return JSON_ERROR_FATAL;
  }
  if (!hs_found) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "hs");
    return JSON_ERROR_FATAL;
  }
  if (!os_found) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "os");
    return JSON_ERROR_FATAL;
  }
  if (!ucs_found) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "ucs");
    return JSON_ERROR_FATAL;
  }
  if (!e_found) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "e");
    return JSON_ERROR_FATAL;
  }
  
  return (int)dec_len;
}

struct R__json_template::single_value_struct {
INTEGER_template field_i;
BITSTRING_template field_bs;
CHARSTRING_template field_cs;
HEXSTRING_template field_hs;
OCTETSTRING_template field_os;
UNIVERSAL_CHARSTRING_template field_ucs;
E__json_template field_e;
};

void R__json_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_i = ANY_VALUE;
single_value->field_bs = ANY_VALUE;
single_value->field_cs = ANY_VALUE;
single_value->field_hs = ANY_VALUE;
single_value->field_os = ANY_VALUE;
single_value->field_ucs = ANY_VALUE;
single_value->field_e = ANY_VALUE;
}
}
}

void R__json_template::copy_value(const R__json& other_value)
{
single_value = new single_value_struct;
if (other_value.i().is_bound()) {
  single_value->field_i = other_value.i();
} else {
  single_value->field_i.clean_up();
}
if (other_value.bs().is_bound()) {
  single_value->field_bs = other_value.bs();
} else {
  single_value->field_bs.clean_up();
}
if (other_value.cs().is_bound()) {
  single_value->field_cs = other_value.cs();
} else {
  single_value->field_cs.clean_up();
}
if (other_value.hs().is_bound()) {
  single_value->field_hs = other_value.hs();
} else {
  single_value->field_hs.clean_up();
}
if (other_value.os().is_bound()) {
  single_value->field_os = other_value.os();
} else {
  single_value->field_os.clean_up();
}
if (other_value.ucs().is_bound()) {
  single_value->field_ucs = other_value.ucs();
} else {
  single_value->field_ucs.clean_up();
}
if (other_value.e().is_bound()) {
  single_value->field_e = other_value.e();
} else {
  single_value->field_e.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void R__json_template::copy_template(const R__json_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.i().get_selection()) {
single_value->field_i = other_value.i();
} else {
single_value->field_i.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.bs().get_selection()) {
single_value->field_bs = other_value.bs();
} else {
single_value->field_bs.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.cs().get_selection()) {
single_value->field_cs = other_value.cs();
} else {
single_value->field_cs.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.hs().get_selection()) {
single_value->field_hs = other_value.hs();
} else {
single_value->field_hs.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.os().get_selection()) {
single_value->field_os = other_value.os();
} else {
single_value->field_os.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.ucs().get_selection()) {
single_value->field_ucs = other_value.ucs();
} else {
single_value->field_ucs.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.e().get_selection()) {
single_value->field_e = other_value.e();
} else {
single_value->field_e.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new R__json_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @JsonBasicTypes.R_json.");
break;
}
set_selection(other_value);
}

R__json_template::R__json_template()
{
}

R__json_template::R__json_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

R__json_template::R__json_template(const R__json& other_value)
{
copy_value(other_value);
}

R__json_template::R__json_template(const OPTIONAL<R__json>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const R__json&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @JsonBasicTypes.R_json from an unbound optional field.");
}
}

R__json_template::R__json_template(const R__json_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

R__json_template::~R__json_template()
{
clean_up();
}

R__json_template& R__json_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

R__json_template& R__json_template::operator=(const R__json& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

R__json_template& R__json_template::operator=(const OPTIONAL<R__json>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const R__json&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @JsonBasicTypes.R_json.");
}
return *this;
}

R__json_template& R__json_template::operator=(const R__json_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean R__json_template::match(const R__json& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.i().is_bound()) return FALSE;
if(!single_value->field_i.match(other_value.i(), legacy))return FALSE;
if(!other_value.bs().is_bound()) return FALSE;
if(!single_value->field_bs.match(other_value.bs(), legacy))return FALSE;
if(!other_value.cs().is_bound()) return FALSE;
if(!single_value->field_cs.match(other_value.cs(), legacy))return FALSE;
if(!other_value.hs().is_bound()) return FALSE;
if(!single_value->field_hs.match(other_value.hs(), legacy))return FALSE;
if(!other_value.os().is_bound()) return FALSE;
if(!single_value->field_os.match(other_value.os(), legacy))return FALSE;
if(!other_value.ucs().is_bound()) return FALSE;
if(!single_value->field_ucs.match(other_value.ucs(), legacy))return FALSE;
if(!other_value.e().is_bound()) return FALSE;
if(!single_value->field_e.match(other_value.e(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @JsonBasicTypes.R_json.");
}
return FALSE;
}

boolean R__json_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
return single_value->field_i.is_bound()

 ||single_value->field_bs.is_bound()

 ||single_value->field_cs.is_bound()

 ||single_value->field_hs.is_bound()

 ||single_value->field_os.is_bound()

 ||single_value->field_ucs.is_bound()

 ||single_value->field_e.is_bound()
;
}

boolean R__json_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value->field_i.is_value()
 &&single_value->field_bs.is_value()
 &&single_value->field_cs.is_value()
 &&single_value->field_hs.is_value()
 &&single_value->field_os.is_value()
 &&single_value->field_ucs.is_value()
 &&single_value->field_e.is_value();
}

void R__json_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

R__json R__json_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @JsonBasicTypes.R_json.");
R__json ret_val;
if (single_value->field_i.is_bound()) {
ret_val.i() = single_value->field_i.valueof();
}
if (single_value->field_bs.is_bound()) {
ret_val.bs() = single_value->field_bs.valueof();
}
if (single_value->field_cs.is_bound()) {
ret_val.cs() = single_value->field_cs.valueof();
}
if (single_value->field_hs.is_bound()) {
ret_val.hs() = single_value->field_hs.valueof();
}
if (single_value->field_os.is_bound()) {
ret_val.os() = single_value->field_os.valueof();
}
if (single_value->field_ucs.is_bound()) {
ret_val.ucs() = single_value->field_ucs.valueof();
}
if (single_value->field_e.is_bound()) {
ret_val.e() = single_value->field_e.valueof();
}
return ret_val;
}

void R__json_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @JsonBasicTypes.R_json.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new R__json_template[list_length];
}

R__json_template& R__json_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @JsonBasicTypes.R_json.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @JsonBasicTypes.R_json.");
return value_list.list_value[list_index];
}

INTEGER_template& R__json_template::i()
{
set_specific();
return single_value->field_i;
}

const INTEGER_template& R__json_template::i() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field i of a non-specific template of type @JsonBasicTypes.R_json.");
return single_value->field_i;
}

BITSTRING_template& R__json_template::bs()
{
set_specific();
return single_value->field_bs;
}

const BITSTRING_template& R__json_template::bs() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field bs of a non-specific template of type @JsonBasicTypes.R_json.");
return single_value->field_bs;
}

CHARSTRING_template& R__json_template::cs()
{
set_specific();
return single_value->field_cs;
}

const CHARSTRING_template& R__json_template::cs() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field cs of a non-specific template of type @JsonBasicTypes.R_json.");
return single_value->field_cs;
}

HEXSTRING_template& R__json_template::hs()
{
set_specific();
return single_value->field_hs;
}

const HEXSTRING_template& R__json_template::hs() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field hs of a non-specific template of type @JsonBasicTypes.R_json.");
return single_value->field_hs;
}

OCTETSTRING_template& R__json_template::os()
{
set_specific();
return single_value->field_os;
}

const OCTETSTRING_template& R__json_template::os() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field os of a non-specific template of type @JsonBasicTypes.R_json.");
return single_value->field_os;
}

UNIVERSAL_CHARSTRING_template& R__json_template::ucs()
{
set_specific();
return single_value->field_ucs;
}

const UNIVERSAL_CHARSTRING_template& R__json_template::ucs() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field ucs of a non-specific template of type @JsonBasicTypes.R_json.");
return single_value->field_ucs;
}

E__json_template& R__json_template::e()
{
set_specific();
return single_value->field_e;
}

const E__json_template& R__json_template::e() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field e of a non-specific template of type @JsonBasicTypes.R_json.");
return single_value->field_e;
}

int R__json_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @JsonBasicTypes.R_json which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 7;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @JsonBasicTypes.R_json containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @JsonBasicTypes.R_json containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @JsonBasicTypes.R_json containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @JsonBasicTypes.R_json containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @JsonBasicTypes.R_json containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @JsonBasicTypes.R_json.");
  }
  return 0;
}

void R__json_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ i := ");
single_value->field_i.log();
TTCN_Logger::log_event_str(", bs := ");
single_value->field_bs.log();
TTCN_Logger::log_event_str(", cs := ");
single_value->field_cs.log();
TTCN_Logger::log_event_str(", hs := ");
single_value->field_hs.log();
TTCN_Logger::log_event_str(", os := ");
single_value->field_os.log();
TTCN_Logger::log_event_str(", ucs := ");
single_value->field_ucs.log();
TTCN_Logger::log_event_str(", e := ");
single_value->field_e.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void R__json_template::log_match(const R__json& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_i.match(match_value.i(), legacy)){
TTCN_Logger::log_logmatch_info(".i");
single_value->field_i.log_match(match_value.i(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_bs.match(match_value.bs(), legacy)){
TTCN_Logger::log_logmatch_info(".bs");
single_value->field_bs.log_match(match_value.bs(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_cs.match(match_value.cs(), legacy)){
TTCN_Logger::log_logmatch_info(".cs");
single_value->field_cs.log_match(match_value.cs(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_hs.match(match_value.hs(), legacy)){
TTCN_Logger::log_logmatch_info(".hs");
single_value->field_hs.log_match(match_value.hs(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_os.match(match_value.os(), legacy)){
TTCN_Logger::log_logmatch_info(".os");
single_value->field_os.log_match(match_value.os(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_ucs.match(match_value.ucs(), legacy)){
TTCN_Logger::log_logmatch_info(".ucs");
single_value->field_ucs.log_match(match_value.ucs(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_e.match(match_value.e(), legacy)){
TTCN_Logger::log_logmatch_info(".e");
single_value->field_e.log_match(match_value.e(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ i := ");
single_value->field_i.log_match(match_value.i(), legacy);
TTCN_Logger::log_event_str(", bs := ");
single_value->field_bs.log_match(match_value.bs(), legacy);
TTCN_Logger::log_event_str(", cs := ");
single_value->field_cs.log_match(match_value.cs(), legacy);
TTCN_Logger::log_event_str(", hs := ");
single_value->field_hs.log_match(match_value.hs(), legacy);
TTCN_Logger::log_event_str(", os := ");
single_value->field_os.log_match(match_value.os(), legacy);
TTCN_Logger::log_event_str(", ucs := ");
single_value->field_ucs.log_match(match_value.ucs(), legacy);
TTCN_Logger::log_event_str(", e := ");
single_value->field_e.log_match(match_value.e(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void R__json_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_i.encode_text(text_buf);
single_value->field_bs.encode_text(text_buf);
single_value->field_cs.encode_text(text_buf);
single_value->field_hs.encode_text(text_buf);
single_value->field_os.encode_text(text_buf);
single_value->field_ucs.encode_text(text_buf);
single_value->field_e.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @JsonBasicTypes.R_json.");
}
}

void R__json_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_i.decode_text(text_buf);
single_value->field_bs.decode_text(text_buf);
single_value->field_cs.decode_text(text_buf);
single_value->field_hs.decode_text(text_buf);
single_value->field_os.decode_text(text_buf);
single_value->field_ucs.decode_text(text_buf);
single_value->field_e.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new R__json_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @JsonBasicTypes.R_json.");
}
}

void R__json_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    R__json_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (7<param.get_size()) {
      param.error("record template of type @JsonBasicTypes.R_json has 7 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) i().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) bs().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) cs().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) hs().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) os().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) ucs().set_param(*param.get_elem(5));
    if (param.get_size()>6 && param.get_elem(6)->get_type()!=Module_Param::MP_NotUsed) e().set_param(*param.get_elem(6));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "i")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          i().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "bs")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          bs().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "cs")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          cs().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "hs")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          hs().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "os")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          os().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "ucs")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          ucs().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "e")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          e().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      curr_param->error("Non existent field name in type @JsonBasicTypes.R_json: %s", curr_param->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@JsonBasicTypes.R_json");
  }
  is_ifpresent = param.get_ifpresent();
}

void R__json_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_i.check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.R_json");
single_value->field_bs.check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.R_json");
single_value->field_cs.check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.R_json");
single_value->field_hs.check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.R_json");
single_value->field_os.check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.R_json");
single_value->field_ucs.check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.R_json");
single_value->field_e.check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.R_json");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@JsonBasicTypes.R_json");
}

boolean R__json_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean R__json_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

S__json::S__json()
{
}

S__json::S__json(const INTEGER& par_i,
    const BITSTRING& par_bs,
    const CHARSTRING& par_cs,
    const HEXSTRING& par_hs,
    const OCTETSTRING& par_os,
    const UNIVERSAL_CHARSTRING& par_ucs,
    const E__json& par_e)
  :   field_i(par_i),
  field_bs(par_bs),
  field_cs(par_cs),
  field_hs(par_hs),
  field_os(par_os),
  field_ucs(par_ucs),
  field_e(par_e)
{
}

S__json::S__json(const S__json& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @JsonBasicTypes.S_json.");
if (other_value.i().is_bound()) field_i = other_value.i();
else field_i.clean_up();
if (other_value.bs().is_bound()) field_bs = other_value.bs();
else field_bs.clean_up();
if (other_value.cs().is_bound()) field_cs = other_value.cs();
else field_cs.clean_up();
if (other_value.hs().is_bound()) field_hs = other_value.hs();
else field_hs.clean_up();
if (other_value.os().is_bound()) field_os = other_value.os();
else field_os.clean_up();
if (other_value.ucs().is_bound()) field_ucs = other_value.ucs();
else field_ucs.clean_up();
if (other_value.e().is_bound()) field_e = other_value.e();
else field_e.clean_up();
}

void S__json::clean_up()
{
field_i.clean_up();
field_bs.clean_up();
field_cs.clean_up();
field_hs.clean_up();
field_os.clean_up();
field_ucs.clean_up();
field_e.clean_up();
}

const TTCN_Typedescriptor_t* S__json::get_descriptor() const { return &S__json_descr_; }
S__json& S__json::operator=(const S__json& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @JsonBasicTypes.S_json.");
  if (other_value.i().is_bound()) field_i = other_value.i();
  else field_i.clean_up();
  if (other_value.bs().is_bound()) field_bs = other_value.bs();
  else field_bs.clean_up();
  if (other_value.cs().is_bound()) field_cs = other_value.cs();
  else field_cs.clean_up();
  if (other_value.hs().is_bound()) field_hs = other_value.hs();
  else field_hs.clean_up();
  if (other_value.os().is_bound()) field_os = other_value.os();
  else field_os.clean_up();
  if (other_value.ucs().is_bound()) field_ucs = other_value.ucs();
  else field_ucs.clean_up();
  if (other_value.e().is_bound()) field_e = other_value.e();
  else field_e.clean_up();
}
return *this;
}

boolean S__json::operator==(const S__json& other_value) const
{
return field_i==other_value.field_i
  && field_bs==other_value.field_bs
  && field_cs==other_value.field_cs
  && field_hs==other_value.field_hs
  && field_os==other_value.field_os
  && field_ucs==other_value.field_ucs
  && field_e==other_value.field_e;
}

boolean S__json::is_bound() const
{
return (field_i.is_bound())
  || (field_bs.is_bound())
  || (field_cs.is_bound())
  || (field_hs.is_bound())
  || (field_os.is_bound())
  || (field_ucs.is_bound())
  || (field_e.is_bound());
}
boolean S__json::is_value() const
{
return field_i.is_value()
  && field_bs.is_value()
  && field_cs.is_value()
  && field_hs.is_value()
  && field_os.is_value()
  && field_ucs.is_value()
  && field_e.is_value();
}
void S__json::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ i := ");
field_i.log();
TTCN_Logger::log_event_str(", bs := ");
field_bs.log();
TTCN_Logger::log_event_str(", cs := ");
field_cs.log();
TTCN_Logger::log_event_str(", hs := ");
field_hs.log();
TTCN_Logger::log_event_str(", os := ");
field_os.log();
TTCN_Logger::log_event_str(", ucs := ");
field_ucs.log();
TTCN_Logger::log_event_str(", e := ");
field_e.log();
TTCN_Logger::log_event_str(" }");
}

void S__json::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "set value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (7<param.get_size()) {
      param.error("set value of type @JsonBasicTypes.S_json has 7 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) i().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) bs().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) cs().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) hs().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) os().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) ucs().set_param(*param.get_elem(5));
    if (param.get_size()>6 && param.get_elem(6)->get_type()!=Module_Param::MP_NotUsed) e().set_param(*param.get_elem(6));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "i")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          i().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "bs")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          bs().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "cs")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          cs().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "hs")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          hs().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "os")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          os().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "ucs")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          ucs().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "e")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          e().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      curr_param->error("Non existent field name in type @JsonBasicTypes.S_json: %s", curr_param->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("set value", "@JsonBasicTypes.S_json");
  }
}

void S__json::set_implicit_omit()
{
if (i().is_bound()) i().set_implicit_omit();
if (bs().is_bound()) bs().set_implicit_omit();
if (cs().is_bound()) cs().set_implicit_omit();
if (hs().is_bound()) hs().set_implicit_omit();
if (os().is_bound()) os().set_implicit_omit();
if (ucs().is_bound()) ucs().set_implicit_omit();
if (e().is_bound()) e().set_implicit_omit();
}

void S__json::encode_text(Text_Buf& text_buf) const
{
field_i.encode_text(text_buf);
field_bs.encode_text(text_buf);
field_cs.encode_text(text_buf);
field_hs.encode_text(text_buf);
field_os.encode_text(text_buf);
field_ucs.encode_text(text_buf);
field_e.encode_text(text_buf);
}

void S__json::decode_text(Text_Buf& text_buf)
{
field_i.decode_text(text_buf);
field_bs.decode_text(text_buf);
field_cs.decode_text(text_buf);
field_hs.decode_text(text_buf);
field_os.decode_text(text_buf);
field_ucs.decode_text(text_buf);
field_e.decode_text(text_buf);
}

void S__json::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  case TTCN_EncDec::CT_OER: {
    TTCN_EncDec_ErrorContext ec("While OER-encoding type '%s': ", p_td.name);
    if(!p_td.oer)
      TTCN_EncDec_ErrorContext::error_internal
        ("No OER descriptor available for type '%s'.", p_td.name);
    OER_encode(p_td, p_buf);
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void S__json::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    int null_added=0;
    if(b_data[p_buf.get_len()-1]!='\0'){
      null_added=1;
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    if(null_added){
      size_t actpos=p_buf.get_pos();
      p_buf.set_pos(p_buf.get_len()-1);
      p_buf.cut_end();
      p_buf.set_pos(actpos);
    }
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, XER_NONE, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, FALSE)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  case TTCN_EncDec::CT_OER: {
    TTCN_EncDec_ErrorContext ec("While OER-decoding type '%s': ", p_td.name);
    if(!p_td.oer)
      TTCN_EncDec_ErrorContext::error_internal
        ("No OER descriptor available for type '%s'.", p_td.name);
     OER_struct p_oer;
    OER_decode(p_td, p_buf, p_oer);
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int S__json::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @JsonBasicTypes.S_json.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "i");
    enc_len += field_i.JSON_encode(S__json_i_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "bs");
    enc_len += field_bs.JSON_encode(S__json_bs_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "cs");
    enc_len += field_cs.JSON_encode(S__json_cs_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "hs");
    enc_len += field_hs.JSON_encode(S__json_hs_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "os");
    enc_len += field_os.JSON_encode(S__json_os_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "ucs");
    enc_len += field_ucs.JSON_encode(S__json_ucs_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "e");
    enc_len += field_e.JSON_encode(S__json_e_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int S__json::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent, int)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  size_t dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  boolean i_found = FALSE;
  boolean bs_found = FALSE;
  boolean cs_found = FALSE;
  boolean hs_found = FALSE;
  boolean os_found = FALSE;
  boolean ucs_found = FALSE;
  boolean e_found = FALSE;

  while (TRUE) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (1 == name_len && 0 == strncmp(fld_name, "i", name_len)) {
        i_found = TRUE;
         int ret_val = field_i.JSON_decode(S__json_i_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 1, "i");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += (size_t)ret_val;
      }
      else if (2 == name_len && 0 == strncmp(fld_name, "bs", name_len)) {
        bs_found = TRUE;
         int ret_val = field_bs.JSON_decode(S__json_bs_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 2, "bs");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += (size_t)ret_val;
      }
      else if (2 == name_len && 0 == strncmp(fld_name, "cs", name_len)) {
        cs_found = TRUE;
         int ret_val = field_cs.JSON_decode(S__json_cs_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 2, "cs");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += (size_t)ret_val;
      }
      else if (2 == name_len && 0 == strncmp(fld_name, "hs", name_len)) {
        hs_found = TRUE;
         int ret_val = field_hs.JSON_decode(S__json_hs_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 2, "hs");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += (size_t)ret_val;
      }
      else if (2 == name_len && 0 == strncmp(fld_name, "os", name_len)) {
        os_found = TRUE;
         int ret_val = field_os.JSON_decode(S__json_os_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 2, "os");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += (size_t)ret_val;
      }
      else if (3 == name_len && 0 == strncmp(fld_name, "ucs", name_len)) {
        ucs_found = TRUE;
         int ret_val = field_ucs.JSON_decode(S__json_ucs_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 3, "ucs");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += (size_t)ret_val;
      }
      else if (1 == name_len && 0 == strncmp(fld_name, "e", name_len)) {
        e_found = TRUE;
         int ret_val = field_e.JSON_decode(S__json_e_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 1, "e");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += (size_t)ret_val;
      }
      else {
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, (int)name_len, fld_name);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, (int)name_len, fld_name);
          return JSON_ERROR_FATAL;
        }
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!i_found) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "i");
    return JSON_ERROR_FATAL;
  }
  if (!bs_found) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "bs");
    return JSON_ERROR_FATAL;
  }
  if (!cs_found) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "cs");
    return JSON_ERROR_FATAL;
  }
  if (!hs_found) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "hs");
    return JSON_ERROR_FATAL;
  }
  if (!os_found) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "os");
    return JSON_ERROR_FATAL;
  }
  if (!ucs_found) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "ucs");
    return JSON_ERROR_FATAL;
  }
  if (!e_found) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "e");
    return JSON_ERROR_FATAL;
  }
  
  return (int)dec_len;
}

struct S__json_template::single_value_struct {
INTEGER_template field_i;
BITSTRING_template field_bs;
CHARSTRING_template field_cs;
HEXSTRING_template field_hs;
OCTETSTRING_template field_os;
UNIVERSAL_CHARSTRING_template field_ucs;
E__json_template field_e;
};

void S__json_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_i = ANY_VALUE;
single_value->field_bs = ANY_VALUE;
single_value->field_cs = ANY_VALUE;
single_value->field_hs = ANY_VALUE;
single_value->field_os = ANY_VALUE;
single_value->field_ucs = ANY_VALUE;
single_value->field_e = ANY_VALUE;
}
}
}

void S__json_template::copy_value(const S__json& other_value)
{
single_value = new single_value_struct;
if (other_value.i().is_bound()) {
  single_value->field_i = other_value.i();
} else {
  single_value->field_i.clean_up();
}
if (other_value.bs().is_bound()) {
  single_value->field_bs = other_value.bs();
} else {
  single_value->field_bs.clean_up();
}
if (other_value.cs().is_bound()) {
  single_value->field_cs = other_value.cs();
} else {
  single_value->field_cs.clean_up();
}
if (other_value.hs().is_bound()) {
  single_value->field_hs = other_value.hs();
} else {
  single_value->field_hs.clean_up();
}
if (other_value.os().is_bound()) {
  single_value->field_os = other_value.os();
} else {
  single_value->field_os.clean_up();
}
if (other_value.ucs().is_bound()) {
  single_value->field_ucs = other_value.ucs();
} else {
  single_value->field_ucs.clean_up();
}
if (other_value.e().is_bound()) {
  single_value->field_e = other_value.e();
} else {
  single_value->field_e.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void S__json_template::copy_template(const S__json_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.i().get_selection()) {
single_value->field_i = other_value.i();
} else {
single_value->field_i.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.bs().get_selection()) {
single_value->field_bs = other_value.bs();
} else {
single_value->field_bs.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.cs().get_selection()) {
single_value->field_cs = other_value.cs();
} else {
single_value->field_cs.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.hs().get_selection()) {
single_value->field_hs = other_value.hs();
} else {
single_value->field_hs.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.os().get_selection()) {
single_value->field_os = other_value.os();
} else {
single_value->field_os.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.ucs().get_selection()) {
single_value->field_ucs = other_value.ucs();
} else {
single_value->field_ucs.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.e().get_selection()) {
single_value->field_e = other_value.e();
} else {
single_value->field_e.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new S__json_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @JsonBasicTypes.S_json.");
break;
}
set_selection(other_value);
}

S__json_template::S__json_template()
{
}

S__json_template::S__json_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

S__json_template::S__json_template(const S__json& other_value)
{
copy_value(other_value);
}

S__json_template::S__json_template(const OPTIONAL<S__json>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const S__json&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @JsonBasicTypes.S_json from an unbound optional field.");
}
}

S__json_template::S__json_template(const S__json_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

S__json_template::~S__json_template()
{
clean_up();
}

S__json_template& S__json_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

S__json_template& S__json_template::operator=(const S__json& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

S__json_template& S__json_template::operator=(const OPTIONAL<S__json>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const S__json&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @JsonBasicTypes.S_json.");
}
return *this;
}

S__json_template& S__json_template::operator=(const S__json_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean S__json_template::match(const S__json& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.i().is_bound()) return FALSE;
if(!single_value->field_i.match(other_value.i(), legacy))return FALSE;
if(!other_value.bs().is_bound()) return FALSE;
if(!single_value->field_bs.match(other_value.bs(), legacy))return FALSE;
if(!other_value.cs().is_bound()) return FALSE;
if(!single_value->field_cs.match(other_value.cs(), legacy))return FALSE;
if(!other_value.hs().is_bound()) return FALSE;
if(!single_value->field_hs.match(other_value.hs(), legacy))return FALSE;
if(!other_value.os().is_bound()) return FALSE;
if(!single_value->field_os.match(other_value.os(), legacy))return FALSE;
if(!other_value.ucs().is_bound()) return FALSE;
if(!single_value->field_ucs.match(other_value.ucs(), legacy))return FALSE;
if(!other_value.e().is_bound()) return FALSE;
if(!single_value->field_e.match(other_value.e(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @JsonBasicTypes.S_json.");
}
return FALSE;
}

boolean S__json_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
return single_value->field_i.is_bound()

 ||single_value->field_bs.is_bound()

 ||single_value->field_cs.is_bound()

 ||single_value->field_hs.is_bound()

 ||single_value->field_os.is_bound()

 ||single_value->field_ucs.is_bound()

 ||single_value->field_e.is_bound()
;
}

boolean S__json_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value->field_i.is_value()
 &&single_value->field_bs.is_value()
 &&single_value->field_cs.is_value()
 &&single_value->field_hs.is_value()
 &&single_value->field_os.is_value()
 &&single_value->field_ucs.is_value()
 &&single_value->field_e.is_value();
}

void S__json_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

S__json S__json_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @JsonBasicTypes.S_json.");
S__json ret_val;
if (single_value->field_i.is_bound()) {
ret_val.i() = single_value->field_i.valueof();
}
if (single_value->field_bs.is_bound()) {
ret_val.bs() = single_value->field_bs.valueof();
}
if (single_value->field_cs.is_bound()) {
ret_val.cs() = single_value->field_cs.valueof();
}
if (single_value->field_hs.is_bound()) {
ret_val.hs() = single_value->field_hs.valueof();
}
if (single_value->field_os.is_bound()) {
ret_val.os() = single_value->field_os.valueof();
}
if (single_value->field_ucs.is_bound()) {
ret_val.ucs() = single_value->field_ucs.valueof();
}
if (single_value->field_e.is_bound()) {
ret_val.e() = single_value->field_e.valueof();
}
return ret_val;
}

void S__json_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @JsonBasicTypes.S_json.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new S__json_template[list_length];
}

S__json_template& S__json_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @JsonBasicTypes.S_json.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @JsonBasicTypes.S_json.");
return value_list.list_value[list_index];
}

INTEGER_template& S__json_template::i()
{
set_specific();
return single_value->field_i;
}

const INTEGER_template& S__json_template::i() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field i of a non-specific template of type @JsonBasicTypes.S_json.");
return single_value->field_i;
}

BITSTRING_template& S__json_template::bs()
{
set_specific();
return single_value->field_bs;
}

const BITSTRING_template& S__json_template::bs() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field bs of a non-specific template of type @JsonBasicTypes.S_json.");
return single_value->field_bs;
}

CHARSTRING_template& S__json_template::cs()
{
set_specific();
return single_value->field_cs;
}

const CHARSTRING_template& S__json_template::cs() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field cs of a non-specific template of type @JsonBasicTypes.S_json.");
return single_value->field_cs;
}

HEXSTRING_template& S__json_template::hs()
{
set_specific();
return single_value->field_hs;
}

const HEXSTRING_template& S__json_template::hs() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field hs of a non-specific template of type @JsonBasicTypes.S_json.");
return single_value->field_hs;
}

OCTETSTRING_template& S__json_template::os()
{
set_specific();
return single_value->field_os;
}

const OCTETSTRING_template& S__json_template::os() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field os of a non-specific template of type @JsonBasicTypes.S_json.");
return single_value->field_os;
}

UNIVERSAL_CHARSTRING_template& S__json_template::ucs()
{
set_specific();
return single_value->field_ucs;
}

const UNIVERSAL_CHARSTRING_template& S__json_template::ucs() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field ucs of a non-specific template of type @JsonBasicTypes.S_json.");
return single_value->field_ucs;
}

E__json_template& S__json_template::e()
{
set_specific();
return single_value->field_e;
}

const E__json_template& S__json_template::e() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field e of a non-specific template of type @JsonBasicTypes.S_json.");
return single_value->field_e;
}

int S__json_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @JsonBasicTypes.S_json which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 7;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @JsonBasicTypes.S_json containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @JsonBasicTypes.S_json containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @JsonBasicTypes.S_json containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @JsonBasicTypes.S_json containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @JsonBasicTypes.S_json containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @JsonBasicTypes.S_json.");
  }
  return 0;
}

void S__json_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ i := ");
single_value->field_i.log();
TTCN_Logger::log_event_str(", bs := ");
single_value->field_bs.log();
TTCN_Logger::log_event_str(", cs := ");
single_value->field_cs.log();
TTCN_Logger::log_event_str(", hs := ");
single_value->field_hs.log();
TTCN_Logger::log_event_str(", os := ");
single_value->field_os.log();
TTCN_Logger::log_event_str(", ucs := ");
single_value->field_ucs.log();
TTCN_Logger::log_event_str(", e := ");
single_value->field_e.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void S__json_template::log_match(const S__json& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_i.match(match_value.i(), legacy)){
TTCN_Logger::log_logmatch_info(".i");
single_value->field_i.log_match(match_value.i(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_bs.match(match_value.bs(), legacy)){
TTCN_Logger::log_logmatch_info(".bs");
single_value->field_bs.log_match(match_value.bs(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_cs.match(match_value.cs(), legacy)){
TTCN_Logger::log_logmatch_info(".cs");
single_value->field_cs.log_match(match_value.cs(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_hs.match(match_value.hs(), legacy)){
TTCN_Logger::log_logmatch_info(".hs");
single_value->field_hs.log_match(match_value.hs(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_os.match(match_value.os(), legacy)){
TTCN_Logger::log_logmatch_info(".os");
single_value->field_os.log_match(match_value.os(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_ucs.match(match_value.ucs(), legacy)){
TTCN_Logger::log_logmatch_info(".ucs");
single_value->field_ucs.log_match(match_value.ucs(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_e.match(match_value.e(), legacy)){
TTCN_Logger::log_logmatch_info(".e");
single_value->field_e.log_match(match_value.e(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ i := ");
single_value->field_i.log_match(match_value.i(), legacy);
TTCN_Logger::log_event_str(", bs := ");
single_value->field_bs.log_match(match_value.bs(), legacy);
TTCN_Logger::log_event_str(", cs := ");
single_value->field_cs.log_match(match_value.cs(), legacy);
TTCN_Logger::log_event_str(", hs := ");
single_value->field_hs.log_match(match_value.hs(), legacy);
TTCN_Logger::log_event_str(", os := ");
single_value->field_os.log_match(match_value.os(), legacy);
TTCN_Logger::log_event_str(", ucs := ");
single_value->field_ucs.log_match(match_value.ucs(), legacy);
TTCN_Logger::log_event_str(", e := ");
single_value->field_e.log_match(match_value.e(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void S__json_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_i.encode_text(text_buf);
single_value->field_bs.encode_text(text_buf);
single_value->field_cs.encode_text(text_buf);
single_value->field_hs.encode_text(text_buf);
single_value->field_os.encode_text(text_buf);
single_value->field_ucs.encode_text(text_buf);
single_value->field_e.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @JsonBasicTypes.S_json.");
}
}

void S__json_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_i.decode_text(text_buf);
single_value->field_bs.decode_text(text_buf);
single_value->field_cs.decode_text(text_buf);
single_value->field_hs.decode_text(text_buf);
single_value->field_os.decode_text(text_buf);
single_value->field_ucs.decode_text(text_buf);
single_value->field_e.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new S__json_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @JsonBasicTypes.S_json.");
}
}

void S__json_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "set template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    S__json_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (7<param.get_size()) {
      param.error("set template of type @JsonBasicTypes.S_json has 7 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) i().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) bs().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) cs().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) hs().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) os().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) ucs().set_param(*param.get_elem(5));
    if (param.get_size()>6 && param.get_elem(6)->get_type()!=Module_Param::MP_NotUsed) e().set_param(*param.get_elem(6));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "i")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          i().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "bs")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          bs().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "cs")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          cs().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "hs")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          hs().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "os")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          os().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "ucs")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          ucs().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "e")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          e().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      curr_param->error("Non existent field name in type @JsonBasicTypes.S_json: %s", curr_param->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("set template", "@JsonBasicTypes.S_json");
  }
  is_ifpresent = param.get_ifpresent();
}

void S__json_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_i.check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.S_json");
single_value->field_bs.check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.S_json");
single_value->field_cs.check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.S_json");
single_value->field_hs.check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.S_json");
single_value->field_os.check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.S_json");
single_value->field_ucs.check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.S_json");
single_value->field_e.check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.S_json");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@JsonBasicTypes.S_json");
}

boolean S__json_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean S__json_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void U__json::copy_value(const U__json& other_value)
{
switch (other_value.union_selection) {
case ALT_i:
field_i = new INTEGER(*other_value.field_i);
break;
case ALT_bs:
field_bs = new BITSTRING(*other_value.field_bs);
break;
case ALT_cs:
field_cs = new CHARSTRING(*other_value.field_cs);
break;
case ALT_hs:
field_hs = new HEXSTRING(*other_value.field_hs);
break;
case ALT_os:
field_os = new OCTETSTRING(*other_value.field_os);
break;
case ALT_ucs:
field_ucs = new UNIVERSAL_CHARSTRING(*other_value.field_ucs);
break;
case ALT_e:
field_e = new E__json(*other_value.field_e);
break;
default:
TTCN_error("Assignment of an unbound union value of type @JsonBasicTypes.U_json.");
}
union_selection = other_value.union_selection;
}

U__json::U__json()
{
union_selection = UNBOUND_VALUE;
}

U__json::U__json(const U__json& other_value)
: Base_Type(){
copy_value(other_value);
}

U__json::~U__json()
{
clean_up();
}

U__json& U__json::operator=(const U__json& other_value)
{
if (this != &other_value) {
clean_up();
copy_value(other_value);
}
return *this;
}

boolean U__json::operator==(const U__json& other_value) const
{
if (union_selection == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of union type @JsonBasicTypes.U_json.");
if (other_value.union_selection == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of union type @JsonBasicTypes.U_json.");
if (union_selection != other_value.union_selection) return FALSE;
switch (union_selection) {
case ALT_i:
return *field_i == *other_value.field_i;
case ALT_bs:
return *field_bs == *other_value.field_bs;
case ALT_cs:
return *field_cs == *other_value.field_cs;
case ALT_hs:
return *field_hs == *other_value.field_hs;
case ALT_os:
return *field_os == *other_value.field_os;
case ALT_ucs:
return *field_ucs == *other_value.field_ucs;
case ALT_e:
return *field_e == *other_value.field_e;
default:
return FALSE;
}
}

INTEGER& U__json::i()
{
if (union_selection != ALT_i) {
clean_up();
field_i = new INTEGER;
union_selection = ALT_i;
}
return *field_i;
}

const INTEGER& U__json::i() const
{
if (union_selection != ALT_i) TTCN_error("Using non-selected field i in a value of union type @JsonBasicTypes.U_json.");
return *field_i;
}

BITSTRING& U__json::bs()
{
if (union_selection != ALT_bs) {
clean_up();
field_bs = new BITSTRING;
union_selection = ALT_bs;
}
return *field_bs;
}

const BITSTRING& U__json::bs() const
{
if (union_selection != ALT_bs) TTCN_error("Using non-selected field bs in a value of union type @JsonBasicTypes.U_json.");
return *field_bs;
}

CHARSTRING& U__json::cs()
{
if (union_selection != ALT_cs) {
clean_up();
field_cs = new CHARSTRING;
union_selection = ALT_cs;
}
return *field_cs;
}

const CHARSTRING& U__json::cs() const
{
if (union_selection != ALT_cs) TTCN_error("Using non-selected field cs in a value of union type @JsonBasicTypes.U_json.");
return *field_cs;
}

HEXSTRING& U__json::hs()
{
if (union_selection != ALT_hs) {
clean_up();
field_hs = new HEXSTRING;
union_selection = ALT_hs;
}
return *field_hs;
}

const HEXSTRING& U__json::hs() const
{
if (union_selection != ALT_hs) TTCN_error("Using non-selected field hs in a value of union type @JsonBasicTypes.U_json.");
return *field_hs;
}

OCTETSTRING& U__json::os()
{
if (union_selection != ALT_os) {
clean_up();
field_os = new OCTETSTRING;
union_selection = ALT_os;
}
return *field_os;
}

const OCTETSTRING& U__json::os() const
{
if (union_selection != ALT_os) TTCN_error("Using non-selected field os in a value of union type @JsonBasicTypes.U_json.");
return *field_os;
}

UNIVERSAL_CHARSTRING& U__json::ucs()
{
if (union_selection != ALT_ucs) {
clean_up();
field_ucs = new UNIVERSAL_CHARSTRING;
union_selection = ALT_ucs;
}
return *field_ucs;
}

const UNIVERSAL_CHARSTRING& U__json::ucs() const
{
if (union_selection != ALT_ucs) TTCN_error("Using non-selected field ucs in a value of union type @JsonBasicTypes.U_json.");
return *field_ucs;
}

E__json& U__json::e()
{
if (union_selection != ALT_e) {
clean_up();
field_e = new E__json;
union_selection = ALT_e;
}
return *field_e;
}

const E__json& U__json::e() const
{
if (union_selection != ALT_e) TTCN_error("Using non-selected field e in a value of union type @JsonBasicTypes.U_json.");
return *field_e;
}

boolean U__json::ischosen(union_selection_type checked_selection) const
{
if (checked_selection == UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @JsonBasicTypes.U_json.");
return union_selection == checked_selection;
}

boolean U__json::is_bound() const
{
  return union_selection != UNBOUND_VALUE;
}

boolean U__json::is_value() const
{
switch (union_selection) {
case UNBOUND_VALUE: return FALSE;
case ALT_i: return field_i->is_value();
case ALT_bs: return field_bs->is_value();
case ALT_cs: return field_cs->is_value();
case ALT_hs: return field_hs->is_value();
case ALT_os: return field_os->is_value();
case ALT_ucs: return field_ucs->is_value();
case ALT_e: return field_e->is_value();
default: TTCN_error("Invalid selection in union is_bound");}
}

void U__json::clean_up()
{
switch (union_selection) {
case ALT_i:
  delete field_i;
  break;
case ALT_bs:
  delete field_bs;
  break;
case ALT_cs:
  delete field_cs;
  break;
case ALT_hs:
  delete field_hs;
  break;
case ALT_os:
  delete field_os;
  break;
case ALT_ucs:
  delete field_ucs;
  break;
case ALT_e:
  delete field_e;
  break;
default:
  break;
}
union_selection = UNBOUND_VALUE;
}

void U__json::log() const
{
switch (union_selection) {
case ALT_i:
TTCN_Logger::log_event_str("{ i := ");
field_i->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_bs:
TTCN_Logger::log_event_str("{ bs := ");
field_bs->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_cs:
TTCN_Logger::log_event_str("{ cs := ");
field_cs->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_hs:
TTCN_Logger::log_event_str("{ hs := ");
field_hs->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_os:
TTCN_Logger::log_event_str("{ os := ");
field_os->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_ucs:
TTCN_Logger::log_event_str("{ ucs := ");
field_ucs->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_e:
TTCN_Logger::log_event_str("{ e := ");
field_e->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_unbound();
}
}

void U__json::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "union value");
  Module_Param_Ptr m_p = &param;
  if (m_p->get_type()==Module_Param::MP_Value_List && m_p->get_size()==0) return;
  if (m_p->get_type()!=Module_Param::MP_Assignment_List) {
    param.error("union value with field name was expected");
  }
  Module_Param* mp_last = m_p->get_elem(m_p->get_size()-1);
  char* last_name = mp_last->get_id()->get_name();
  if (!strcmp(last_name, "i")) {
    i().set_param(*mp_last);
    if (!i().is_bound()) clean_up();
    return;
  }
  if (!strcmp(last_name, "bs")) {
    bs().set_param(*mp_last);
    if (!bs().is_bound()) clean_up();
    return;
  }
  if (!strcmp(last_name, "cs")) {
    cs().set_param(*mp_last);
    if (!cs().is_bound()) clean_up();
    return;
  }
  if (!strcmp(last_name, "hs")) {
    hs().set_param(*mp_last);
    if (!hs().is_bound()) clean_up();
    return;
  }
  if (!strcmp(last_name, "os")) {
    os().set_param(*mp_last);
    if (!os().is_bound()) clean_up();
    return;
  }
  if (!strcmp(last_name, "ucs")) {
    ucs().set_param(*mp_last);
    if (!ucs().is_bound()) clean_up();
    return;
  }
  if (!strcmp(last_name, "e")) {
    e().set_param(*mp_last);
    if (!e().is_bound()) clean_up();
    return;
  }
  mp_last->error("Field %s does not exist in type @JsonBasicTypes.U_json.", last_name);
}

void U__json::set_implicit_omit()
{
switch (union_selection) {
case ALT_i:
field_i->set_implicit_omit(); break;
case ALT_bs:
field_bs->set_implicit_omit(); break;
case ALT_cs:
field_cs->set_implicit_omit(); break;
case ALT_hs:
field_hs->set_implicit_omit(); break;
case ALT_os:
field_os->set_implicit_omit(); break;
case ALT_ucs:
field_ucs->set_implicit_omit(); break;
case ALT_e:
field_e->set_implicit_omit(); break;
default: break;
}
}

void U__json::encode_text(Text_Buf& text_buf) const
{
text_buf.push_int(union_selection);
switch (union_selection) {
case ALT_i:
field_i->encode_text(text_buf);
break;
case ALT_bs:
field_bs->encode_text(text_buf);
break;
case ALT_cs:
field_cs->encode_text(text_buf);
break;
case ALT_hs:
field_hs->encode_text(text_buf);
break;
case ALT_os:
field_os->encode_text(text_buf);
break;
case ALT_ucs:
field_ucs->encode_text(text_buf);
break;
case ALT_e:
field_e->encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an unbound value of union type @JsonBasicTypes.U_json.");
}
}

void U__json::decode_text(Text_Buf& text_buf)
{
switch ((union_selection_type)text_buf.pull_int().get_val()) {
case ALT_i:
i().decode_text(text_buf);
break;
case ALT_bs:
bs().decode_text(text_buf);
break;
case ALT_cs:
cs().decode_text(text_buf);
break;
case ALT_hs:
hs().decode_text(text_buf);
break;
case ALT_os:
os().decode_text(text_buf);
break;
case ALT_ucs:
ucs().decode_text(text_buf);
break;
case ALT_e:
e().decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for type @JsonBasicTypes.U_json.");
}
}

void U__json::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  case TTCN_EncDec::CT_OER: {
    TTCN_EncDec_ErrorContext ec("While OER-encoding type '%s': ", p_td.name);
    if(!p_td.oer)
      TTCN_EncDec_ErrorContext::error_internal
        ("No OER descriptor available for type '%s'.", p_td.name);
    OER_encode(p_td, p_buf);
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void U__json::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    int null_added=0;
    if(b_data[p_buf.get_len()-1]!='\0'){
      null_added=1;
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    if(null_added){
      size_t actpos=p_buf.get_pos();
      p_buf.set_pos(p_buf.get_len()-1);
      p_buf.cut_end();
      p_buf.set_pos(actpos);
    }
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, XER_NONE, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, FALSE)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  case TTCN_EncDec::CT_OER: {
    TTCN_EncDec_ErrorContext ec("While OER-decoding type '%s': ", p_td.name);
    if(!p_td.oer)
      TTCN_EncDec_ErrorContext::error_internal
        ("No OER descriptor available for type '%s'.", p_td.name);
     OER_struct p_oer;
    OER_decode(p_td, p_buf, p_oer);
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int U__json::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  boolean as_value = NULL != p_td.json && p_td.json->as_value;
  int enc_len = as_value ? 0 : p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);
  switch(union_selection) {
  case ALT_i:
    if (!as_value) {
      enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "i");
    }
    enc_len += field_i->JSON_encode(U__json_i_descr_, p_tok);
    break;
  case ALT_bs:
    if (!as_value) {
      enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "bs");
    }
    enc_len += field_bs->JSON_encode(U__json_bs_descr_, p_tok);
    break;
  case ALT_cs:
    if (!as_value) {
      enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "cs");
    }
    enc_len += field_cs->JSON_encode(U__json_cs_descr_, p_tok);
    break;
  case ALT_hs:
    if (!as_value) {
      enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "hs");
    }
    enc_len += field_hs->JSON_encode(U__json_hs_descr_, p_tok);
    break;
  case ALT_os:
    if (!as_value) {
      enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "os");
    }
    enc_len += field_os->JSON_encode(U__json_os_descr_, p_tok);
    break;
  case ALT_ucs:
    if (!as_value) {
      enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "ucs");
    }
    enc_len += field_ucs->JSON_encode(U__json_ucs_descr_, p_tok);
    break;
  case ALT_e:
    if (!as_value) {
      enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "e");
    }
    enc_len += field_e->JSON_encode(U__json_e_descr_, p_tok);
    break;
  default:
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, 
      "Encoding an unbound value of type @JsonBasicTypes.U_json.");
    return -1;
  }

  if (!as_value) {
    enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  }
  return enc_len;
}

int U__json::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent, int p_chosen_field)
{
  if (0 <= p_chosen_field && 7 > p_chosen_field) {
    switch (p_chosen_field) {
    case 0:
      return i().JSON_decode(U__json_i_descr_, p_tok, TRUE);
    case 1:
      return bs().JSON_decode(U__json_bs_descr_, p_tok, TRUE);
    case 2:
      return cs().JSON_decode(U__json_cs_descr_, p_tok, TRUE);
    case 3:
      return hs().JSON_decode(U__json_hs_descr_, p_tok, TRUE);
    case 4:
      return os().JSON_decode(U__json_os_descr_, p_tok, TRUE);
    case 5:
      return ucs().JSON_decode(U__json_ucs_descr_, p_tok, TRUE);
    case 6:
      return e().JSON_decode(U__json_e_descr_, p_tok, TRUE);
    }
  }
  json_token_t j_token = JSON_TOKEN_NONE;
 if (NULL != p_td.json && p_td.json->as_value) {
  size_t buf_pos = p_tok.get_buf_pos();
  p_tok.get_next_token(&j_token, NULL, NULL);
  int ret_val = 0;
  switch(j_token) {
  case JSON_TOKEN_NUMBER: {
    p_tok.set_buf_pos(buf_pos);
    ret_val = i().JSON_decode(U__json_i_descr_, p_tok, TRUE);
    if (0 <= ret_val) {
      return ret_val;
    }
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_AS_VALUE_ERROR, "number");
    clean_up();
    return JSON_ERROR_FATAL;
  }
  case JSON_TOKEN_STRING: {
    p_tok.set_buf_pos(buf_pos);
    ret_val = bs().JSON_decode(U__json_bs_descr_, p_tok, TRUE);
    if (0 <= ret_val) {
      return ret_val;
    }
    p_tok.set_buf_pos(buf_pos);
    ret_val = cs().JSON_decode(U__json_cs_descr_, p_tok, TRUE);
    if (0 <= ret_val) {
      return ret_val;
    }
    p_tok.set_buf_pos(buf_pos);
    ret_val = hs().JSON_decode(U__json_hs_descr_, p_tok, TRUE);
    if (0 <= ret_val) {
      return ret_val;
    }
    p_tok.set_buf_pos(buf_pos);
    ret_val = os().JSON_decode(U__json_os_descr_, p_tok, TRUE);
    if (0 <= ret_val) {
      return ret_val;
    }
    p_tok.set_buf_pos(buf_pos);
    ret_val = ucs().JSON_decode(U__json_ucs_descr_, p_tok, TRUE);
    if (0 <= ret_val) {
      return ret_val;
    }
    p_tok.set_buf_pos(buf_pos);
    ret_val = e().JSON_decode(U__json_e_descr_, p_tok, TRUE);
    if (0 <= ret_val) {
      return ret_val;
    }
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_AS_VALUE_ERROR, "string");
    clean_up();
    return JSON_ERROR_FATAL;
  }
  case JSON_TOKEN_LITERAL_TRUE:
  case JSON_TOKEN_LITERAL_FALSE: {
    char* literal_str = mprintf("literal (%s)",
      (JSON_TOKEN_LITERAL_TRUE == j_token) ? "true" : "false");
    try {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_AS_VALUE_ERROR, literal_str);
    }
    catch (const TC_Error&) {
      Free(literal_str);
      throw;
    }
    Free(literal_str);
    clean_up();
    return JSON_ERROR_FATAL;
  }
  case JSON_TOKEN_ARRAY_START: {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_AS_VALUE_ERROR, "array");
    clean_up();
    return JSON_ERROR_FATAL;
  }
  case JSON_TOKEN_OBJECT_START: {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_AS_VALUE_ERROR, "object");
    clean_up();
    return JSON_ERROR_FATAL;
  }
  case JSON_TOKEN_LITERAL_NULL: {
    clean_up();
    return JSON_ERROR_INVALID_TOKEN;
  }
  case JSON_TOKEN_ERROR:
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  default:
    return JSON_ERROR_INVALID_TOKEN;
  }
  return ret_val;
 }
 else {
  size_t dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  char* fld_name = 0;
  size_t name_len = 0;
  dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
  if (JSON_TOKEN_NAME != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
    return JSON_ERROR_FATAL;
  } else {
if (1 == name_len && 0 == strncmp(fld_name, "i", name_len)) {
      int ret_val = i().JSON_decode(U__json_i_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN == ret_val) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 1, "i");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += (size_t)ret_val;
      }
    } else if (2 == name_len && 0 == strncmp(fld_name, "bs", name_len)) {
      int ret_val = bs().JSON_decode(U__json_bs_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN == ret_val) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 2, "bs");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += (size_t)ret_val;
      }
    } else if (2 == name_len && 0 == strncmp(fld_name, "cs", name_len)) {
      int ret_val = cs().JSON_decode(U__json_cs_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN == ret_val) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 2, "cs");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += (size_t)ret_val;
      }
    } else if (2 == name_len && 0 == strncmp(fld_name, "hs", name_len)) {
      int ret_val = hs().JSON_decode(U__json_hs_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN == ret_val) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 2, "hs");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += (size_t)ret_val;
      }
    } else if (2 == name_len && 0 == strncmp(fld_name, "os", name_len)) {
      int ret_val = os().JSON_decode(U__json_os_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN == ret_val) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 2, "os");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += (size_t)ret_val;
      }
    } else if (3 == name_len && 0 == strncmp(fld_name, "ucs", name_len)) {
      int ret_val = ucs().JSON_decode(U__json_ucs_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN == ret_val) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 3, "ucs");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += (size_t)ret_val;
      }
    } else if (1 == name_len && 0 == strncmp(fld_name, "e", name_len)) {
      int ret_val = e().JSON_decode(U__json_e_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN == ret_val) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 1, "e");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += (size_t)ret_val;
      }
    } else {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, (int)name_len, fld_name);
      return JSON_ERROR_FATAL;
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_STATIC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  return (int)dec_len;
 }
}

void U__json_template::copy_value(const U__json& other_value)
{
single_value.union_selection = other_value.get_selection();
switch (single_value.union_selection) {
case U__json::ALT_i:
single_value.field_i = new INTEGER_template(other_value.i());
break;
case U__json::ALT_bs:
single_value.field_bs = new BITSTRING_template(other_value.bs());
break;
case U__json::ALT_cs:
single_value.field_cs = new CHARSTRING_template(other_value.cs());
break;
case U__json::ALT_hs:
single_value.field_hs = new HEXSTRING_template(other_value.hs());
break;
case U__json::ALT_os:
single_value.field_os = new OCTETSTRING_template(other_value.os());
break;
case U__json::ALT_ucs:
single_value.field_ucs = new UNIVERSAL_CHARSTRING_template(other_value.ucs());
break;
case U__json::ALT_e:
single_value.field_e = new E__json_template(other_value.e());
break;
default:
TTCN_error("Initializing a template with an unbound value of type @JsonBasicTypes.U_json.");
}
set_selection(SPECIFIC_VALUE);
}

void U__json_template::copy_template(const U__json_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.union_selection = other_value.single_value.union_selection;
switch (single_value.union_selection) {
case U__json::ALT_i:
single_value.field_i = new INTEGER_template(*other_value.single_value.field_i);
break;
case U__json::ALT_bs:
single_value.field_bs = new BITSTRING_template(*other_value.single_value.field_bs);
break;
case U__json::ALT_cs:
single_value.field_cs = new CHARSTRING_template(*other_value.single_value.field_cs);
break;
case U__json::ALT_hs:
single_value.field_hs = new HEXSTRING_template(*other_value.single_value.field_hs);
break;
case U__json::ALT_os:
single_value.field_os = new OCTETSTRING_template(*other_value.single_value.field_os);
break;
case U__json::ALT_ucs:
single_value.field_ucs = new UNIVERSAL_CHARSTRING_template(*other_value.single_value.field_ucs);
break;
case U__json::ALT_e:
single_value.field_e = new E__json_template(*other_value.single_value.field_e);
break;
default:
TTCN_error("Internal error: Invalid union selector in a specific value when copying a template of type @JsonBasicTypes.U_json.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new U__json_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized template of union type @JsonBasicTypes.U_json.");
}
set_selection(other_value);
}

U__json_template::U__json_template()
{
}

U__json_template::U__json_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

U__json_template::U__json_template(const U__json& other_value)
{
copy_value(other_value);
}

U__json_template::U__json_template(const OPTIONAL<U__json>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const U__json&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of union type @JsonBasicTypes.U_json from an unbound optional field.");
}
}

U__json_template::U__json_template(const U__json_template& other_value)
: Base_Template(){
copy_template(other_value);
}

U__json_template::~U__json_template()
{
clean_up();
}

void U__json_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case U__json::ALT_i:
delete single_value.field_i;
break;
case U__json::ALT_bs:
delete single_value.field_bs;
break;
case U__json::ALT_cs:
delete single_value.field_cs;
break;
case U__json::ALT_hs:
delete single_value.field_hs;
break;
case U__json::ALT_os:
delete single_value.field_os;
break;
case U__json::ALT_ucs:
delete single_value.field_ucs;
break;
case U__json::ALT_e:
delete single_value.field_e;
default:
break;
}
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

U__json_template& U__json_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

U__json_template& U__json_template::operator=(const U__json& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

U__json_template& U__json_template::operator=(const OPTIONAL<U__json>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const U__json&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of union type @JsonBasicTypes.U_json.");
}
return *this;
}

U__json_template& U__json_template::operator=(const U__json_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean U__json_template::match(const U__json& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
{
U__json::union_selection_type value_selection = other_value.get_selection();
if (value_selection == U__json::UNBOUND_VALUE) return FALSE;
if (value_selection != single_value.union_selection) return FALSE;
switch (value_selection) {
case U__json::ALT_i:
return single_value.field_i->match(other_value.i(), legacy);
case U__json::ALT_bs:
return single_value.field_bs->match(other_value.bs(), legacy);
case U__json::ALT_cs:
return single_value.field_cs->match(other_value.cs(), legacy);
case U__json::ALT_hs:
return single_value.field_hs->match(other_value.hs(), legacy);
case U__json::ALT_os:
return single_value.field_os->match(other_value.os(), legacy);
case U__json::ALT_ucs:
return single_value.field_ucs->match(other_value.ucs(), legacy);
case U__json::ALT_e:
return single_value.field_e->match(other_value.e(), legacy);
default:
TTCN_error("Internal error: Invalid selector in a specific value when matching a template of union type @JsonBasicTypes.U_json.");
}
}
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error ("Matching an uninitialized template of union type @JsonBasicTypes.U_json.");
}
return FALSE;
}

boolean U__json_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
switch (single_value.union_selection) {
case U__json::ALT_i:
return single_value.field_i->is_value();
case U__json::ALT_bs:
return single_value.field_bs->is_value();
case U__json::ALT_cs:
return single_value.field_cs->is_value();
case U__json::ALT_hs:
return single_value.field_hs->is_value();
case U__json::ALT_os:
return single_value.field_os->is_value();
case U__json::ALT_ucs:
return single_value.field_ucs->is_value();
case U__json::ALT_e:
return single_value.field_e->is_value();
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing is_value operation on a template of union type @JsonBasicTypes.U_json.");
}
}

U__json U__json_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of union type @JsonBasicTypes.U_json.");
U__json ret_val;
switch (single_value.union_selection) {
case U__json::ALT_i:
ret_val.i() = single_value.field_i->valueof();
break;
case U__json::ALT_bs:
ret_val.bs() = single_value.field_bs->valueof();
break;
case U__json::ALT_cs:
ret_val.cs() = single_value.field_cs->valueof();
break;
case U__json::ALT_hs:
ret_val.hs() = single_value.field_hs->valueof();
break;
case U__json::ALT_os:
ret_val.os() = single_value.field_os->valueof();
break;
case U__json::ALT_ucs:
ret_val.ucs() = single_value.field_ucs->valueof();
break;
case U__json::ALT_e:
ret_val.e() = single_value.field_e->valueof();
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing valueof operation on a template of union type @JsonBasicTypes.U_json.");
}
return ret_val;
}

U__json_template& U__json_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of union type @JsonBasicTypes.U_json.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of union type @JsonBasicTypes.U_json.");
return value_list.list_value[list_index];
}
void U__json_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error ("Internal error: Setting an invalid list for a template of union type @JsonBasicTypes.U_json.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new U__json_template[list_length];
}

INTEGER_template& U__json_template::i()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != U__json::ALT_i) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_i = new INTEGER_template(ANY_VALUE);
else single_value.field_i = new INTEGER_template;
single_value.union_selection = U__json::ALT_i;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_i;
}

const INTEGER_template& U__json_template::i() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field i in a non-specific template of union type @JsonBasicTypes.U_json.");
if (single_value.union_selection != U__json::ALT_i) TTCN_error("Accessing non-selected field i in a template of union type @JsonBasicTypes.U_json.");
return *single_value.field_i;
}

BITSTRING_template& U__json_template::bs()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != U__json::ALT_bs) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_bs = new BITSTRING_template(ANY_VALUE);
else single_value.field_bs = new BITSTRING_template;
single_value.union_selection = U__json::ALT_bs;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_bs;
}

const BITSTRING_template& U__json_template::bs() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field bs in a non-specific template of union type @JsonBasicTypes.U_json.");
if (single_value.union_selection != U__json::ALT_bs) TTCN_error("Accessing non-selected field bs in a template of union type @JsonBasicTypes.U_json.");
return *single_value.field_bs;
}

CHARSTRING_template& U__json_template::cs()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != U__json::ALT_cs) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_cs = new CHARSTRING_template(ANY_VALUE);
else single_value.field_cs = new CHARSTRING_template;
single_value.union_selection = U__json::ALT_cs;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_cs;
}

const CHARSTRING_template& U__json_template::cs() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field cs in a non-specific template of union type @JsonBasicTypes.U_json.");
if (single_value.union_selection != U__json::ALT_cs) TTCN_error("Accessing non-selected field cs in a template of union type @JsonBasicTypes.U_json.");
return *single_value.field_cs;
}

HEXSTRING_template& U__json_template::hs()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != U__json::ALT_hs) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_hs = new HEXSTRING_template(ANY_VALUE);
else single_value.field_hs = new HEXSTRING_template;
single_value.union_selection = U__json::ALT_hs;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_hs;
}

const HEXSTRING_template& U__json_template::hs() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field hs in a non-specific template of union type @JsonBasicTypes.U_json.");
if (single_value.union_selection != U__json::ALT_hs) TTCN_error("Accessing non-selected field hs in a template of union type @JsonBasicTypes.U_json.");
return *single_value.field_hs;
}

OCTETSTRING_template& U__json_template::os()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != U__json::ALT_os) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_os = new OCTETSTRING_template(ANY_VALUE);
else single_value.field_os = new OCTETSTRING_template;
single_value.union_selection = U__json::ALT_os;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_os;
}

const OCTETSTRING_template& U__json_template::os() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field os in a non-specific template of union type @JsonBasicTypes.U_json.");
if (single_value.union_selection != U__json::ALT_os) TTCN_error("Accessing non-selected field os in a template of union type @JsonBasicTypes.U_json.");
return *single_value.field_os;
}

UNIVERSAL_CHARSTRING_template& U__json_template::ucs()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != U__json::ALT_ucs) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_ucs = new UNIVERSAL_CHARSTRING_template(ANY_VALUE);
else single_value.field_ucs = new UNIVERSAL_CHARSTRING_template;
single_value.union_selection = U__json::ALT_ucs;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_ucs;
}

const UNIVERSAL_CHARSTRING_template& U__json_template::ucs() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field ucs in a non-specific template of union type @JsonBasicTypes.U_json.");
if (single_value.union_selection != U__json::ALT_ucs) TTCN_error("Accessing non-selected field ucs in a template of union type @JsonBasicTypes.U_json.");
return *single_value.field_ucs;
}

E__json_template& U__json_template::e()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != U__json::ALT_e) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_e = new E__json_template(ANY_VALUE);
else single_value.field_e = new E__json_template;
single_value.union_selection = U__json::ALT_e;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_e;
}

const E__json_template& U__json_template::e() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field e in a non-specific template of union type @JsonBasicTypes.U_json.");
if (single_value.union_selection != U__json::ALT_e) TTCN_error("Accessing non-selected field e in a template of union type @JsonBasicTypes.U_json.");
return *single_value.field_e;
}

boolean U__json_template::ischosen(U__json::union_selection_type checked_selection) const
{
if (checked_selection == U__json::UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @JsonBasicTypes.U_json.");
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.union_selection == U__json::UNBOUND_VALUE) TTCN_error("Internal error: Invalid selector in a specific value when performing ischosen() operation on a template of union type @JsonBasicTypes.U_json.");
return single_value.union_selection == checked_selection;
case VALUE_LIST:
{
if (value_list.n_values < 1)
TTCN_error("Internal error: Performing ischosen() operation on a template of union type @JsonBasicTypes.U_json containing an empty list.");
boolean ret_val = value_list.list_value[0].ischosen(checked_selection);
for (unsigned int list_count = 1; ret_val == TRUE && list_count < value_list.n_values; list_count++) {
ret_val = value_list.list_value[list_count].ischosen(checked_selection);
}
return ret_val;
}
default:
return FALSE;
}
return FALSE;
}

void U__json_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case U__json::ALT_i:
TTCN_Logger::log_event_str("{ i := ");
single_value.field_i->log();
TTCN_Logger::log_event_str(" }");
break;
case U__json::ALT_bs:
TTCN_Logger::log_event_str("{ bs := ");
single_value.field_bs->log();
TTCN_Logger::log_event_str(" }");
break;
case U__json::ALT_cs:
TTCN_Logger::log_event_str("{ cs := ");
single_value.field_cs->log();
TTCN_Logger::log_event_str(" }");
break;
case U__json::ALT_hs:
TTCN_Logger::log_event_str("{ hs := ");
single_value.field_hs->log();
TTCN_Logger::log_event_str(" }");
break;
case U__json::ALT_os:
TTCN_Logger::log_event_str("{ os := ");
single_value.field_os->log();
TTCN_Logger::log_event_str(" }");
break;
case U__json::ALT_ucs:
TTCN_Logger::log_event_str("{ ucs := ");
single_value.field_ucs->log();
TTCN_Logger::log_event_str(" }");
break;
case U__json::ALT_e:
TTCN_Logger::log_event_str("{ e := ");
single_value.field_e->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_str("<invalid selector>");
}
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void U__json_template::log_match(const U__json& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity() && match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.union_selection == match_value.get_selection()) {
switch (single_value.union_selection) {
case U__json::ALT_i:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".i");
single_value.field_i->log_match(match_value.i(), legacy);
} else {
TTCN_Logger::log_event_str("{ i := ");
single_value.field_i->log_match(match_value.i(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case U__json::ALT_bs:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".bs");
single_value.field_bs->log_match(match_value.bs(), legacy);
} else {
TTCN_Logger::log_event_str("{ bs := ");
single_value.field_bs->log_match(match_value.bs(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case U__json::ALT_cs:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".cs");
single_value.field_cs->log_match(match_value.cs(), legacy);
} else {
TTCN_Logger::log_event_str("{ cs := ");
single_value.field_cs->log_match(match_value.cs(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case U__json::ALT_hs:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".hs");
single_value.field_hs->log_match(match_value.hs(), legacy);
} else {
TTCN_Logger::log_event_str("{ hs := ");
single_value.field_hs->log_match(match_value.hs(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case U__json::ALT_os:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".os");
single_value.field_os->log_match(match_value.os(), legacy);
} else {
TTCN_Logger::log_event_str("{ os := ");
single_value.field_os->log_match(match_value.os(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case U__json::ALT_ucs:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".ucs");
single_value.field_ucs->log_match(match_value.ucs(), legacy);
} else {
TTCN_Logger::log_event_str("{ ucs := ");
single_value.field_ucs->log_match(match_value.ucs(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case U__json::ALT_e:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".e");
single_value.field_e->log_match(match_value.e(), legacy);
} else {
TTCN_Logger::log_event_str("{ e := ");
single_value.field_e->log_match(match_value.e(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
default:
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str("<invalid selector>");
}
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void U__json_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.union_selection);
switch (single_value.union_selection) {
case U__json::ALT_i:
single_value.field_i->encode_text(text_buf);
break;
case U__json::ALT_bs:
single_value.field_bs->encode_text(text_buf);
break;
case U__json::ALT_cs:
single_value.field_cs->encode_text(text_buf);
break;
case U__json::ALT_hs:
single_value.field_hs->encode_text(text_buf);
break;
case U__json::ALT_os:
single_value.field_os->encode_text(text_buf);
break;
case U__json::ALT_ucs:
single_value.field_ucs->encode_text(text_buf);
break;
case U__json::ALT_e:
single_value.field_e->encode_text(text_buf);
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when encoding a template of union type @JsonBasicTypes.U_json.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized template of type @JsonBasicTypes.U_json.");
}
}

void U__json_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
{
single_value.union_selection = U__json::UNBOUND_VALUE;
U__json::union_selection_type new_selection = (U__json::union_selection_type)text_buf.pull_int().get_val();
switch (new_selection) {
case U__json::ALT_i:
single_value.field_i = new INTEGER_template;
single_value.field_i->decode_text(text_buf);
break;
case U__json::ALT_bs:
single_value.field_bs = new BITSTRING_template;
single_value.field_bs->decode_text(text_buf);
break;
case U__json::ALT_cs:
single_value.field_cs = new CHARSTRING_template;
single_value.field_cs->decode_text(text_buf);
break;
case U__json::ALT_hs:
single_value.field_hs = new HEXSTRING_template;
single_value.field_hs->decode_text(text_buf);
break;
case U__json::ALT_os:
single_value.field_os = new OCTETSTRING_template;
single_value.field_os->decode_text(text_buf);
break;
case U__json::ALT_ucs:
single_value.field_ucs = new UNIVERSAL_CHARSTRING_template;
single_value.field_ucs->decode_text(text_buf);
break;
case U__json::ALT_e:
single_value.field_e = new E__json_template;
single_value.field_e->decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for a template of type @JsonBasicTypes.U_json.");
}
single_value.union_selection = new_selection;
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new U__json_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized selector was received in a template of type @JsonBasicTypes.U_json.");
}
}

boolean U__json_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean U__json_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int v_idx=0; v_idx<value_list.n_values; v_idx++)
if (value_list.list_value[v_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void U__json_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union template type `@JsonBasicTypes.U_json'");
    }
    if (strcmp("i", param_field) == 0) {
      i().set_param(param);
      return;
    } else if (strcmp("bs", param_field) == 0) {
      bs().set_param(param);
      return;
    } else if (strcmp("cs", param_field) == 0) {
      cs().set_param(param);
      return;
    } else if (strcmp("hs", param_field) == 0) {
      hs().set_param(param);
      return;
    } else if (strcmp("os", param_field) == 0) {
      os().set_param(param);
      return;
    } else if (strcmp("ucs", param_field) == 0) {
      ucs().set_param(param);
      return;
    } else if (strcmp("e", param_field) == 0) {
      e().set_param(param);
      return;
    } else param.error("Field `%s' not found in union template type `@JsonBasicTypes.U_json'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "union template");
  Module_Param_Ptr m_p = &param;
  switch (m_p->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    U__json_template new_temp;
    new_temp.set_type(m_p->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, m_p->get_size());
    for (size_t p_i=0; p_i<m_p->get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*m_p->get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (m_p->get_size()==0) break;
    param.type_error("union template", "@JsonBasicTypes.U_json");
    break;
  case Module_Param::MP_Assignment_List: {
    Module_Param* mp_last = m_p->get_elem(m_p->get_size()-1);
    char* last_name = mp_last->get_id()->get_name();
    if (!strcmp(last_name, "i")) {
      i().set_param(*mp_last);
      break;
    }
    if (!strcmp(last_name, "bs")) {
      bs().set_param(*mp_last);
      break;
    }
    if (!strcmp(last_name, "cs")) {
      cs().set_param(*mp_last);
      break;
    }
    if (!strcmp(last_name, "hs")) {
      hs().set_param(*mp_last);
      break;
    }
    if (!strcmp(last_name, "os")) {
      os().set_param(*mp_last);
      break;
    }
    if (!strcmp(last_name, "ucs")) {
      ucs().set_param(*mp_last);
      break;
    }
    if (!strcmp(last_name, "e")) {
      e().set_param(*mp_last);
      break;
    }
    mp_last->error("Field %s does not exist in type @JsonBasicTypes.U_json.", last_name);
  } break;
  default:
    param.type_error("union template", "@JsonBasicTypes.U_json");
  }
  is_ifpresent = param.get_ifpresent();
}

void U__json_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
switch (single_value.union_selection) {
case U__json::ALT_i:
single_value.field_i->check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.U_json");
return;
case U__json::ALT_bs:
single_value.field_bs->check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.U_json");
return;
case U__json::ALT_cs:
single_value.field_cs->check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.U_json");
return;
case U__json::ALT_hs:
single_value.field_hs->check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.U_json");
return;
case U__json::ALT_os:
single_value.field_os->check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.U_json");
return;
case U__json::ALT_ucs:
single_value.field_ucs->check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.U_json");
return;
case U__json::ALT_e:
single_value.field_e->check_restriction(t_res, t_name ? t_name : "@JsonBasicTypes.U_json");
return;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing check_restriction operation on a template of union type @JsonBasicTypes.U_json.");
}
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@JsonBasicTypes.U_json");
}


/* Bodies of functions, altsteps and testcases */

void I__json_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `integer' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(I__json_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER I__json_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `integer' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(I__json_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void F__json_encoder(const FLOAT& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `float' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(F__json_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER F__json_decoder(OCTETSTRING& input_stream, FLOAT& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `float' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(F__json_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void E__json_encoder(const E__json& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicTypes.E_json' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(E__json_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER E__json_decoder(OCTETSTRING& input_stream, E__json& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicTypes.E_json' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(E__json_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void B__json_encoder(const BOOLEAN& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `boolean' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(B__json_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER B__json_decoder(OCTETSTRING& input_stream, BOOLEAN& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `boolean' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(B__json_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void BS__json_encoder(const BITSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `bitstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(BS__json_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER BS__json_decoder(OCTETSTRING& input_stream, BITSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `bitstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(BS__json_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void CS__json_encoder(const CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `charstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(CS__json_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER CS__json_decoder(OCTETSTRING& input_stream, CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `charstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(CS__json_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void HS__json_encoder(const HEXSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `hexstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(HS__json_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER HS__json_decoder(OCTETSTRING& input_stream, HEXSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `hexstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(HS__json_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void OS__json_encoder(const OCTETSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `octetstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(OS__json_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER OS__json_decoder(OCTETSTRING& input_stream, OCTETSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `octetstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(OS__json_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void UCS__json_encoder(const UNIVERSAL_CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `universal charstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(UCS__json_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER UCS__json_decoder(OCTETSTRING& input_stream, UNIVERSAL_CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `universal charstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(UCS__json_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void AI3__json_0_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `integer' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(AI3__json_0_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER AI3__json_0_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `integer' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(AI3__json_0_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void AI3__json_encoder(const AI3__json& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `integer[3]' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(AI3__json_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER AI3__json_decoder(OCTETSTRING& input_stream, AI3__json& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `integer[3]' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(AI3__json_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void V__json_encoder(const VERDICTTYPE& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `verdicttype' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(V__json_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER V__json_decoder(OCTETSTRING& input_stream, VERDICTTYPE& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `verdicttype' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(V__json_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void R__json_encoder(const R__json& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicTypes.R_json' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(R__json_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER R__json_decoder(OCTETSTRING& input_stream, R__json& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicTypes.R_json' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(R__json_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void RoI__json_0_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `integer' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(RoI__json_0_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER RoI__json_0_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `integer' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(RoI__json_0_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void RoI__json_encoder(const RoI__json& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicTypes.RoI_json' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(RoI__json_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER RoI__json_decoder(OCTETSTRING& input_stream, RoI__json& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicTypes.RoI_json' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(RoI__json_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void S__json_encoder(const S__json& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicTypes.S_json' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(S__json_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER S__json_decoder(OCTETSTRING& input_stream, S__json& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicTypes.S_json' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(S__json_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void SoI__json_0_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `integer' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(SoI__json_0_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER SoI__json_0_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `integer' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(SoI__json_0_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void SoI__json_encoder(const SoI__json& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicTypes.SoI_json' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(SoI__json_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER SoI__json_decoder(OCTETSTRING& input_stream, SoI__json& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicTypes.SoI_json' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(SoI__json_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void U__json_encoder(const U__json& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicTypes.U_json' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(U__json_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER U__json_decoder(OCTETSTRING& input_stream, U__json& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_JSON) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicTypes.U_json' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(U__json_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}


} /* end of namespace */
