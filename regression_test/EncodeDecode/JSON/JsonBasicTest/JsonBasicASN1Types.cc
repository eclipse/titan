// This C++ source file was generated by the ASN.1 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R6B
// for U-ERICSSON\ethbaat (ethbaat@HU-00000670) on Thu Feb 20 17:43:37 2020

// Copyright (c) 2000-2019 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "JsonBasicASN1Types.hh"

namespace JsonBasicASN1Types {

/* Global variable definitions */

const TTCN_Typedescriptor_t& Asn1__bs_descr_ = BITSTRING_descr_;
UNIVERSAL_CHARSTRING Asn1__bs_default_coding("");
const TTCN_Typedescriptor_t& Asn1__bool_descr_ = BOOLEAN_descr_;
UNIVERSAL_CHARSTRING Asn1__bool_default_coding("");
const TTCN_Typedescriptor_t& Asn1__bmpstr_descr_ = BMPString_descr_;
UNIVERSAL_CHARSTRING Asn1__bmpstr_default_coding("");
// No XER for Asn1__Number
const TTCN_JSONdescriptor_t Asn1__Number_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE, FALSE, 0, NULL };
const int Asn1__Number_oer_ext_arr_[0] = {};
const int Asn1__Number_oer_p_[0] = {};
const TTCN_OERdescriptor_t Asn1__Number_oer_ = { -1, TRUE, -1, FALSE, 0, 0, Asn1__Number_oer_ext_arr_, 0, Asn1__Number_oer_p_};
const TTCN_Typedescriptor_t Asn1__Number_descr_ = { "@JsonBasicASN1Types.Asn1-Number", &CHOICE_ber_, NULL, NULL, NULL, &Asn1__Number_json_, &Asn1__Number_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const ASN_Tag_t Asn1__Number_decimal_tag_[] = { { ASN_TAG_CONT, 0u }};
const ASN_BERdescriptor_t Asn1__Number_decimal_ber_ = { 1u, Asn1__Number_decimal_tag_ };
// No XER for Asn1__Number_decimal
const int Asn1__Number_decimal_oer_ext_arr_[0] = {};
const int Asn1__Number_decimal_oer_p_[0] = {};
const TTCN_OERdescriptor_t Asn1__Number_decimal_oer_ = { -1, TRUE, -1, FALSE, 0, 0, Asn1__Number_decimal_oer_ext_arr_, 0, Asn1__Number_decimal_oer_p_};
const TTCN_Typedescriptor_t Asn1__Number_decimal_descr_ = { "@JsonBasicASN1Types.Asn1-Number.decimal", &Asn1__Number_decimal_ber_, NULL, NULL, NULL, &INTEGER_json_, &Asn1__Number_decimal_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING Asn1__Number_decimal_default_coding("");
static const ASN_Tag_t Asn1__Number_binary_tag_[] = { { ASN_TAG_CONT, 1u }};
const ASN_BERdescriptor_t Asn1__Number_binary_ber_ = { 1u, Asn1__Number_binary_tag_ };
// No XER for Asn1__Number_binary
const int Asn1__Number_binary_oer_ext_arr_[0] = {};
const int Asn1__Number_binary_oer_p_[0] = {};
const TTCN_OERdescriptor_t Asn1__Number_binary_oer_ = { -1, TRUE, -1, FALSE, 0, 0, Asn1__Number_binary_oer_ext_arr_, 0, Asn1__Number_binary_oer_p_};
const TTCN_Typedescriptor_t Asn1__Number_binary_descr_ = { "@JsonBasicASN1Types.Asn1-Number.binary", &Asn1__Number_binary_ber_, NULL, NULL, NULL, &BITSTRING_json_, &Asn1__Number_binary_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING Asn1__Number_binary_default_coding("");
static const ASN_Tag_t Asn1__Number_hexadecimal_tag_[] = { { ASN_TAG_CONT, 2u }};
const ASN_BERdescriptor_t Asn1__Number_hexadecimal_ber_ = { 1u, Asn1__Number_hexadecimal_tag_ };
// No XER for Asn1__Number_hexadecimal
const int Asn1__Number_hexadecimal_oer_ext_arr_[0] = {};
const int Asn1__Number_hexadecimal_oer_p_[0] = {};
const TTCN_OERdescriptor_t Asn1__Number_hexadecimal_oer_ = { -1, TRUE, -1, FALSE, 0, 0, Asn1__Number_hexadecimal_oer_ext_arr_, 0, Asn1__Number_hexadecimal_oer_p_};
const TTCN_Typedescriptor_t Asn1__Number_hexadecimal_descr_ = { "@JsonBasicASN1Types.Asn1-Number.hexadecimal", &Asn1__Number_hexadecimal_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, NULL, &OCTETSTRING_json_, &Asn1__Number_hexadecimal_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING Asn1__Number_hexadecimal_default_coding("");
UNIVERSAL_CHARSTRING Asn1__Number_default_coding("");
const TTCN_Typedescriptor_t& Asn1__genstr_descr_ = GeneralString_descr_;
UNIVERSAL_CHARSTRING Asn1__genstr_default_coding("");
const TTCN_Typedescriptor_t& Asn1__graphstr_descr_ = GraphicString_descr_;
UNIVERSAL_CHARSTRING Asn1__graphstr_default_coding("");
const TTCN_Typedescriptor_t& Asn1__ia5str_descr_ = IA5String_descr_;
UNIVERSAL_CHARSTRING Asn1__ia5str_default_coding("");
const TTCN_Typedescriptor_t& Asn1__i_descr_ = INTEGER_descr_;
UNIVERSAL_CHARSTRING Asn1__i_default_coding("");
const TTCN_Typedescriptor_t& Asn1__f_descr_ = FLOAT_descr_;
UNIVERSAL_CHARSTRING Asn1__f_default_coding("");
const TTCN_Typedescriptor_t& Asn1__null_descr_ = ASN_NULL_descr_;
UNIVERSAL_CHARSTRING Asn1__null_default_coding("");
const TTCN_Typedescriptor_t& Asn1__numstr_descr_ = NumericString_descr_;
UNIVERSAL_CHARSTRING Asn1__numstr_default_coding("");
const TTCN_Typedescriptor_t& Asn1__oid_descr_ = OBJID_descr_;
UNIVERSAL_CHARSTRING Asn1__oid_default_coding("");
const TTCN_Typedescriptor_t& Asn1__os_descr_ = OCTETSTRING_descr_;
UNIVERSAL_CHARSTRING Asn1__os_default_coding("");
const TTCN_Typedescriptor_t& Asn1__pstr_descr_ = PrintableString_descr_;
UNIVERSAL_CHARSTRING Asn1__pstr_default_coding("");
// No XER for Asn1__seqofI
const TTCN_JSONdescriptor_t Asn1__seqofI_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE, FALSE, 0, NULL };
const int Asn1__seqofI_oer_ext_arr_[0] = {};
const int Asn1__seqofI_oer_p_[0] = {};
const TTCN_OERdescriptor_t Asn1__seqofI_oer_ = { -1, TRUE, -1, FALSE, 0, 0, Asn1__seqofI_oer_ext_arr_, 0, Asn1__seqofI_oer_p_};
const TTCN_Typedescriptor_t Asn1__seqofI_descr_ = { "@JsonBasicASN1Types.Asn1-seqofI", &SEQUENCE_ber_, NULL, NULL, NULL, &Asn1__seqofI_json_, &Asn1__seqofI_oer_, &INTEGER_descr_, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING Asn1__seqofI_0_default_coding("");
UNIVERSAL_CHARSTRING Asn1__seqofI_default_coding("");
// No XER for Asn1__setofI
const TTCN_JSONdescriptor_t Asn1__setofI_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE, FALSE, 0, NULL };
const TTCN_OERdescriptor_t Asn1__setofI_oer_ = { -1, FALSE, -1, FALSE, 0, 0, NULL, 0, NULL };
const TTCN_Typedescriptor_t Asn1__setofI_descr_ = { "@JsonBasicASN1Types.Asn1-setofI", &SET_ber_, NULL, NULL, NULL, &Asn1__setofI_json_, &Asn1__setofI_oer_, &INTEGER_descr_, TTCN_Typedescriptor_t::DONTCARE };
UNIVERSAL_CHARSTRING Asn1__setofI_0_default_coding("");
UNIVERSAL_CHARSTRING Asn1__setofI_default_coding("");
const TTCN_Typedescriptor_t& Asn1__teletexstr_descr_ = TeletexString_descr_;
UNIVERSAL_CHARSTRING Asn1__teletexstr_default_coding("");
const TTCN_Typedescriptor_t& Asn1__utf8str_descr_ = UTF8String_descr_;
UNIVERSAL_CHARSTRING Asn1__utf8str_default_coding("");
const TTCN_Typedescriptor_t& Asn1__videotexstr_descr_ = VideotexString_descr_;
UNIVERSAL_CHARSTRING Asn1__videotexstr_default_coding("");
const TTCN_Typedescriptor_t& Asn1__visiblestr_descr_ = VisibleString_descr_;
UNIVERSAL_CHARSTRING Asn1__visiblestr_default_coding("");
TTCN_Module module_object("JsonBasicASN1Types", __DATE__, __TIME__, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_6,
  current_runtime_version.requires_patch_level_1,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

void Asn1__Number::copy_value(const Asn1__Number& other_value)
{
switch (other_value.union_selection) {
case ALT_decimal:
field_decimal = new INTEGER(*other_value.field_decimal);
break;
case ALT_binary:
field_binary = new BITSTRING(*other_value.field_binary);
break;
case ALT_hexadecimal:
field_hexadecimal = new OCTETSTRING(*other_value.field_hexadecimal);
break;
default:
TTCN_error("Assignment of an unbound union value of type @JsonBasicASN1Types.Asn1-Number.");
}
union_selection = other_value.union_selection;
}

Asn1__Number::Asn1__Number()
{
union_selection = UNBOUND_VALUE;
}

Asn1__Number::Asn1__Number(const Asn1__Number& other_value)
: Base_Type(){
copy_value(other_value);
}

Asn1__Number::~Asn1__Number()
{
clean_up();
}

Asn1__Number& Asn1__Number::operator=(const Asn1__Number& other_value)
{
if (this != &other_value) {
clean_up();
copy_value(other_value);
}
return *this;
}

boolean Asn1__Number::operator==(const Asn1__Number& other_value) const
{
if (union_selection == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of union type @JsonBasicASN1Types.Asn1-Number.");
if (other_value.union_selection == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of union type @JsonBasicASN1Types.Asn1-Number.");
if (union_selection != other_value.union_selection) return FALSE;
switch (union_selection) {
case ALT_decimal:
return *field_decimal == *other_value.field_decimal;
case ALT_binary:
return *field_binary == *other_value.field_binary;
case ALT_hexadecimal:
return *field_hexadecimal == *other_value.field_hexadecimal;
default:
return FALSE;
}
}

INTEGER& Asn1__Number::decimal()
{
if (union_selection != ALT_decimal) {
clean_up();
field_decimal = new INTEGER;
union_selection = ALT_decimal;
}
return *field_decimal;
}

const INTEGER& Asn1__Number::decimal() const
{
if (union_selection != ALT_decimal) TTCN_error("Using non-selected field decimal in a value of union type @JsonBasicASN1Types.Asn1-Number.");
return *field_decimal;
}

BITSTRING& Asn1__Number::binary()
{
if (union_selection != ALT_binary) {
clean_up();
field_binary = new BITSTRING;
union_selection = ALT_binary;
}
return *field_binary;
}

const BITSTRING& Asn1__Number::binary() const
{
if (union_selection != ALT_binary) TTCN_error("Using non-selected field binary in a value of union type @JsonBasicASN1Types.Asn1-Number.");
return *field_binary;
}

OCTETSTRING& Asn1__Number::hexadecimal()
{
if (union_selection != ALT_hexadecimal) {
clean_up();
field_hexadecimal = new OCTETSTRING;
union_selection = ALT_hexadecimal;
}
return *field_hexadecimal;
}

const OCTETSTRING& Asn1__Number::hexadecimal() const
{
if (union_selection != ALT_hexadecimal) TTCN_error("Using non-selected field hexadecimal in a value of union type @JsonBasicASN1Types.Asn1-Number.");
return *field_hexadecimal;
}

boolean Asn1__Number::ischosen(union_selection_type checked_selection) const
{
if (checked_selection == UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @JsonBasicASN1Types.Asn1-Number.");
return union_selection == checked_selection;
}

boolean Asn1__Number::is_bound() const
{
  return union_selection != UNBOUND_VALUE;
}

boolean Asn1__Number::is_value() const
{
switch (union_selection) {
case UNBOUND_VALUE: return FALSE;
case ALT_decimal: return field_decimal->is_value();
case ALT_binary: return field_binary->is_value();
case ALT_hexadecimal: return field_hexadecimal->is_value();
default: TTCN_error("Invalid selection in union is_bound");}
}

void Asn1__Number::clean_up()
{
switch (union_selection) {
case ALT_decimal:
  delete field_decimal;
  break;
case ALT_binary:
  delete field_binary;
  break;
case ALT_hexadecimal:
  delete field_hexadecimal;
  break;
default:
  break;
}
union_selection = UNBOUND_VALUE;
}

void Asn1__Number::log() const
{
switch (union_selection) {
case ALT_decimal:
TTCN_Logger::log_event_str("{ decimal := ");
field_decimal->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_binary:
TTCN_Logger::log_event_str("{ binary := ");
field_binary->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_hexadecimal:
TTCN_Logger::log_event_str("{ hexadecimal := ");
field_hexadecimal->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_unbound();
}
}

void Asn1__Number::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "union value");
  Module_Param_Ptr m_p = &param;
  if (m_p->get_type()==Module_Param::MP_Value_List && m_p->get_size()==0) return;
  if (m_p->get_type()!=Module_Param::MP_Assignment_List) {
    param.error("union value with field name was expected");
  }
  Module_Param* mp_last = m_p->get_elem(m_p->get_size()-1);
  char* last_name = mp_last->get_id()->get_name();
  if (!strcmp(last_name, "decimal")) {
    decimal().set_param(*mp_last);
    if (!decimal().is_bound()) clean_up();
    return;
  }
  if (!strcmp(last_name, "binary")) {
    binary().set_param(*mp_last);
    if (!binary().is_bound()) clean_up();
    return;
  }
  if (!strcmp(last_name, "hexadecimal")) {
    hexadecimal().set_param(*mp_last);
    if (!hexadecimal().is_bound()) clean_up();
    return;
  }
  mp_last->error("Field %s does not exist in type @JsonBasicASN1Types.Asn1-Number.", last_name);
}

void Asn1__Number::set_implicit_omit()
{
switch (union_selection) {
case ALT_decimal:
field_decimal->set_implicit_omit(); break;
case ALT_binary:
field_binary->set_implicit_omit(); break;
case ALT_hexadecimal:
field_hexadecimal->set_implicit_omit(); break;
default: break;
}
}

void Asn1__Number::encode_text(Text_Buf& text_buf) const
{
text_buf.push_int(union_selection);
switch (union_selection) {
case ALT_decimal:
field_decimal->encode_text(text_buf);
break;
case ALT_binary:
field_binary->encode_text(text_buf);
break;
case ALT_hexadecimal:
field_hexadecimal->encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an unbound value of union type @JsonBasicASN1Types.Asn1-Number.");
}
}

void Asn1__Number::decode_text(Text_Buf& text_buf)
{
switch ((union_selection_type)text_buf.pull_int().get_val()) {
case ALT_decimal:
decimal().decode_text(text_buf);
break;
case ALT_binary:
binary().decode_text(text_buf);
break;
case ALT_hexadecimal:
hexadecimal().decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for type @JsonBasicASN1Types.Asn1-Number.");
}
}

void Asn1__Number::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  case TTCN_EncDec::CT_OER: {
    TTCN_EncDec_ErrorContext ec("While OER-encoding type '%s': ", p_td.name);
    if(!p_td.oer)
      TTCN_EncDec_ErrorContext::error_internal
        ("No OER descriptor available for type '%s'.", p_td.name);
    OER_encode(p_td, p_buf);
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Asn1__Number::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    int null_added=0;
    if(b_data[p_buf.get_len()-1]!='\0'){
      null_added=1;
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    if(null_added){
      size_t actpos=p_buf.get_pos();
      p_buf.set_pos(p_buf.get_len()-1);
      p_buf.cut_end();
      p_buf.set_pos(actpos);
    }
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, XER_NONE, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, FALSE)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  case TTCN_EncDec::CT_OER: {
    TTCN_EncDec_ErrorContext ec("While OER-decoding type '%s': ", p_td.name);
    if(!p_td.oer)
      TTCN_EncDec_ErrorContext::error_internal
        ("No OER descriptor available for type '%s'.", p_td.name);
     OER_struct p_oer;
    OER_decode(p_td, p_buf, p_oer);
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

ASN_BER_TLV_t *Asn1__Number::BER_encode_TLV(const TTCN_Typedescriptor_t& p_td, unsigned p_coding) const
{
  BER_chk_descr(p_td);
  ASN_BER_TLV_t *new_tlv;
  TTCN_EncDec_ErrorContext ec_0("Alternative '");
  TTCN_EncDec_ErrorContext ec_1;
  switch (union_selection) {
  case ALT_decimal:
    ec_1.set_msg("decimal': ");
    new_tlv = field_decimal->BER_encode_TLV(Asn1__Number_decimal_descr_, p_coding);
    break;
  case ALT_binary:
    ec_1.set_msg("binary': ");
    new_tlv = field_binary->BER_encode_TLV(Asn1__Number_binary_descr_, p_coding);
    break;
  case ALT_hexadecimal:
    ec_1.set_msg("hexadecimal': ");
    new_tlv = field_hexadecimal->BER_encode_TLV(Asn1__Number_hexadecimal_descr_, p_coding);
    break;
  case UNBOUND_VALUE:
    new_tlv = BER_encode_chk_bound(FALSE);
    break;
  default:
    TTCN_EncDec_ErrorContext::error_internal("Unknown selection.");
    new_tlv = NULL;
  }
  return ASN_BER_V2TLV(new_tlv, p_td, p_coding);
}

boolean Asn1__Number::BER_decode_set_selection(const ASN_BER_TLV_t& p_tlv)
{
  clean_up();
  field_decimal = new INTEGER;
  union_selection = ALT_decimal;
  if (field_decimal->BER_decode_isMyMsg(Asn1__Number_decimal_descr_, p_tlv)) return TRUE;
  delete field_decimal;
  field_binary = new BITSTRING;
  union_selection = ALT_binary;
  if (field_binary->BER_decode_isMyMsg(Asn1__Number_binary_descr_, p_tlv)) return TRUE;
  delete field_binary;
  field_hexadecimal = new OCTETSTRING;
  union_selection = ALT_hexadecimal;
  if (field_hexadecimal->BER_decode_isMyMsg(Asn1__Number_hexadecimal_descr_, p_tlv)) return TRUE;
  delete field_hexadecimal;
  union_selection = UNBOUND_VALUE;
  return FALSE;
}

boolean Asn1__Number::BER_decode_isMyMsg(const TTCN_Typedescriptor_t& p_td, const ASN_BER_TLV_t& p_tlv)
{
  if (p_td.ber->n_tags == 0) {
    Asn1__Number tmp_type;
    return tmp_type.BER_decode_set_selection(p_tlv);
  } else return Base_Type::BER_decode_isMyMsg(p_td, p_tlv);
}

boolean Asn1__Number::BER_decode_TLV(const TTCN_Typedescriptor_t& p_td, const ASN_BER_TLV_t& p_tlv, unsigned L_form)
{
  BER_chk_descr(p_td);
  ASN_BER_TLV_t stripped_tlv;
  BER_decode_strip_tags(*p_td.ber, p_tlv, L_form, stripped_tlv);
  TTCN_EncDec_ErrorContext ec_0("While decoding '@JsonBasicASN1Types.Asn1-Number' type: ");
  ASN_BER_TLV_t tmp_tlv;
  if (!BER_decode_TLV_CHOICE(*p_td.ber, stripped_tlv, L_form, tmp_tlv) || !BER_decode_CHOICE_selection(BER_decode_set_selection(tmp_tlv), tmp_tlv)) return FALSE;
  TTCN_EncDec_ErrorContext ec_1("Alternative '");
  TTCN_EncDec_ErrorContext ec_2;
  switch (union_selection) {
  case ALT_decimal:
    ec_2.set_msg("decimal': ");
    field_decimal->BER_decode_TLV(Asn1__Number_decimal_descr_, tmp_tlv, L_form);
    break;
  case ALT_binary:
    ec_2.set_msg("binary': ");
    field_binary->BER_decode_TLV(Asn1__Number_binary_descr_, tmp_tlv, L_form);
    break;
  case ALT_hexadecimal:
    ec_2.set_msg("hexadecimal': ");
    field_hexadecimal->BER_decode_TLV(Asn1__Number_hexadecimal_descr_, tmp_tlv, L_form);
    break;
  default:
    return FALSE;
  }
  return TRUE;
}

int Asn1__Number::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  boolean as_value = NULL != p_td.json && p_td.json->as_value;
  int enc_len = as_value ? 0 : p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);
  switch(union_selection) {
  case ALT_decimal:
    if (!as_value) {
      enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "decimal");
    }
    enc_len += field_decimal->JSON_encode(Asn1__Number_decimal_descr_, p_tok);
    break;
  case ALT_binary:
    if (!as_value) {
      enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "binary");
    }
    enc_len += field_binary->JSON_encode(Asn1__Number_binary_descr_, p_tok);
    break;
  case ALT_hexadecimal:
    if (!as_value) {
      enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "hexadecimal");
    }
    enc_len += field_hexadecimal->JSON_encode(Asn1__Number_hexadecimal_descr_, p_tok);
    break;
  default:
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, 
      "Encoding an unbound value of type @JsonBasicASN1Types.Asn1-Number.");
    return -1;
  }

  if (!as_value) {
    enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  }
  return enc_len;
}

int Asn1__Number::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent, int p_chosen_field)
{
  if (0 <= p_chosen_field && 3 > p_chosen_field) {
    switch (p_chosen_field) {
    case 0:
      return decimal().JSON_decode(Asn1__Number_decimal_descr_, p_tok, TRUE);
    case 1:
      return binary().JSON_decode(Asn1__Number_binary_descr_, p_tok, TRUE);
    case 2:
      return hexadecimal().JSON_decode(Asn1__Number_hexadecimal_descr_, p_tok, TRUE);
    }
  }
  json_token_t j_token = JSON_TOKEN_NONE;
 if (NULL != p_td.json && p_td.json->as_value) {
  size_t buf_pos = p_tok.get_buf_pos();
  p_tok.get_next_token(&j_token, NULL, NULL);
  int ret_val = 0;
  switch(j_token) {
  case JSON_TOKEN_NUMBER: {
    p_tok.set_buf_pos(buf_pos);
    ret_val = decimal().JSON_decode(Asn1__Number_decimal_descr_, p_tok, TRUE);
    if (0 <= ret_val) {
      return ret_val;
    }
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_AS_VALUE_ERROR, "number");
    clean_up();
    return JSON_ERROR_FATAL;
  }
  case JSON_TOKEN_STRING: {
    p_tok.set_buf_pos(buf_pos);
    ret_val = binary().JSON_decode(Asn1__Number_binary_descr_, p_tok, TRUE);
    if (0 <= ret_val) {
      return ret_val;
    }
    p_tok.set_buf_pos(buf_pos);
    ret_val = hexadecimal().JSON_decode(Asn1__Number_hexadecimal_descr_, p_tok, TRUE);
    if (0 <= ret_val) {
      return ret_val;
    }
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_AS_VALUE_ERROR, "string");
    clean_up();
    return JSON_ERROR_FATAL;
  }
  case JSON_TOKEN_LITERAL_TRUE:
  case JSON_TOKEN_LITERAL_FALSE: {
    char* literal_str = mprintf("literal (%s)",
      (JSON_TOKEN_LITERAL_TRUE == j_token) ? "true" : "false");
    try {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_AS_VALUE_ERROR, literal_str);
    }
    catch (const TC_Error&) {
      Free(literal_str);
      throw;
    }
    Free(literal_str);
    clean_up();
    return JSON_ERROR_FATAL;
  }
  case JSON_TOKEN_ARRAY_START: {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_AS_VALUE_ERROR, "array");
    clean_up();
    return JSON_ERROR_FATAL;
  }
  case JSON_TOKEN_OBJECT_START: {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_AS_VALUE_ERROR, "object");
    clean_up();
    return JSON_ERROR_FATAL;
  }
  case JSON_TOKEN_LITERAL_NULL: {
    clean_up();
    return JSON_ERROR_INVALID_TOKEN;
  }
  case JSON_TOKEN_ERROR:
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  default:
    return JSON_ERROR_INVALID_TOKEN;
  }
  return ret_val;
 }
 else {
  size_t dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  char* fld_name = 0;
  size_t name_len = 0;
  dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
  if (JSON_TOKEN_NAME != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
    return JSON_ERROR_FATAL;
  } else {
if (7 == name_len && 0 == strncmp(fld_name, "decimal", name_len)) {
      int ret_val = decimal().JSON_decode(Asn1__Number_decimal_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN == ret_val) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 7, "decimal");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += (size_t)ret_val;
      }
    } else if (6 == name_len && 0 == strncmp(fld_name, "binary", name_len)) {
      int ret_val = binary().JSON_decode(Asn1__Number_binary_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN == ret_val) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 6, "binary");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += (size_t)ret_val;
      }
    } else if (11 == name_len && 0 == strncmp(fld_name, "hexadecimal", name_len)) {
      int ret_val = hexadecimal().JSON_decode(Asn1__Number_hexadecimal_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN == ret_val) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, 11, "hexadecimal");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += (size_t)ret_val;
      }
    } else {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, (int)name_len, fld_name);
      return JSON_ERROR_FATAL;
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_STATIC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  return (int)dec_len;
 }
}

int Asn1__Number::OER_encode(const TTCN_Typedescriptor_t&, TTCN_Buffer& p_buf) const
{
  switch(union_selection) {
  case ALT_decimal:
    {TTCN_Buffer buf;
    encode_oer_tag(*Asn1__Number_decimal_descr_.ber, p_buf);
    field_decimal->OER_encode(Asn1__Number_decimal_descr_, buf);
    p_buf.put_buf(buf);
    break;
}  case ALT_binary:
    {TTCN_Buffer buf;
    encode_oer_tag(*Asn1__Number_binary_descr_.ber, p_buf);
    field_binary->OER_encode(Asn1__Number_binary_descr_, buf);
    p_buf.put_buf(buf);
    break;
}  case ALT_hexadecimal:
    {TTCN_Buffer buf;
    encode_oer_tag(*Asn1__Number_hexadecimal_descr_.ber, p_buf);
    field_hexadecimal->OER_encode(Asn1__Number_hexadecimal_descr_, buf);
    p_buf.put_buf(buf);
    break;
}  default:
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, 
      "Encoding an unbound value of type @JsonBasicASN1Types.Asn1-Number.");
    return -1;
  }

  return 0;
}
int Asn1__Number::OER_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer& p_buf, OER_struct& p_oer)
{
  const ASN_Tag_t& descr = decode_oer_tag(p_buf);
  if (Asn1__Number_decimal_descr_.ber->tags[Asn1__Number_decimal_descr_.ber->n_tags-1].tagclass == descr.tagclass &&
      Asn1__Number_decimal_descr_.ber->tags[Asn1__Number_decimal_descr_.ber->n_tags-1].tagnumber == descr.tagnumber) {
    decimal().OER_decode(Asn1__Number_decimal_descr_, p_buf, p_oer);
  } else 
  if (Asn1__Number_binary_descr_.ber->tags[Asn1__Number_binary_descr_.ber->n_tags-1].tagclass == descr.tagclass &&
      Asn1__Number_binary_descr_.ber->tags[Asn1__Number_binary_descr_.ber->n_tags-1].tagnumber == descr.tagnumber) {
    binary().OER_decode(Asn1__Number_binary_descr_, p_buf, p_oer);
  } else 
  if (Asn1__Number_hexadecimal_descr_.ber->tags[Asn1__Number_hexadecimal_descr_.ber->n_tags-1].tagclass == descr.tagclass &&
      Asn1__Number_hexadecimal_descr_.ber->tags[Asn1__Number_hexadecimal_descr_.ber->n_tags-1].tagnumber == descr.tagnumber) {
    hexadecimal().OER_decode(Asn1__Number_hexadecimal_descr_, p_buf, p_oer);
  } else 
{
    TTCN_error("Cannot find matching tag for type Asn1__Number");
}
  return 0;
}
void Asn1__Number_template::copy_value(const Asn1__Number& other_value)
{
single_value.union_selection = other_value.get_selection();
switch (single_value.union_selection) {
case Asn1__Number::ALT_decimal:
single_value.field_decimal = new INTEGER_template(other_value.decimal());
break;
case Asn1__Number::ALT_binary:
single_value.field_binary = new BITSTRING_template(other_value.binary());
break;
case Asn1__Number::ALT_hexadecimal:
single_value.field_hexadecimal = new OCTETSTRING_template(other_value.hexadecimal());
break;
default:
TTCN_error("Initializing a template with an unbound value of type @JsonBasicASN1Types.Asn1-Number.");
}
set_selection(SPECIFIC_VALUE);
}

void Asn1__Number_template::copy_template(const Asn1__Number_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.union_selection = other_value.single_value.union_selection;
switch (single_value.union_selection) {
case Asn1__Number::ALT_decimal:
single_value.field_decimal = new INTEGER_template(*other_value.single_value.field_decimal);
break;
case Asn1__Number::ALT_binary:
single_value.field_binary = new BITSTRING_template(*other_value.single_value.field_binary);
break;
case Asn1__Number::ALT_hexadecimal:
single_value.field_hexadecimal = new OCTETSTRING_template(*other_value.single_value.field_hexadecimal);
break;
default:
TTCN_error("Internal error: Invalid union selector in a specific value when copying a template of type @JsonBasicASN1Types.Asn1-Number.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Asn1__Number_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized template of union type @JsonBasicASN1Types.Asn1-Number.");
}
set_selection(other_value);
}

Asn1__Number_template::Asn1__Number_template()
{
}

Asn1__Number_template::Asn1__Number_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Asn1__Number_template::Asn1__Number_template(const Asn1__Number& other_value)
{
copy_value(other_value);
}

Asn1__Number_template::Asn1__Number_template(const OPTIONAL<Asn1__Number>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Asn1__Number&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of union type @JsonBasicASN1Types.Asn1-Number from an unbound optional field.");
}
}

Asn1__Number_template::Asn1__Number_template(const Asn1__Number_template& other_value)
: Base_Template(){
copy_template(other_value);
}

Asn1__Number_template::~Asn1__Number_template()
{
clean_up();
}

void Asn1__Number_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case Asn1__Number::ALT_decimal:
delete single_value.field_decimal;
break;
case Asn1__Number::ALT_binary:
delete single_value.field_binary;
break;
case Asn1__Number::ALT_hexadecimal:
delete single_value.field_hexadecimal;
default:
break;
}
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Asn1__Number_template& Asn1__Number_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Asn1__Number_template& Asn1__Number_template::operator=(const Asn1__Number& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Asn1__Number_template& Asn1__Number_template::operator=(const OPTIONAL<Asn1__Number>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Asn1__Number&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of union type @JsonBasicASN1Types.Asn1-Number.");
}
return *this;
}

Asn1__Number_template& Asn1__Number_template::operator=(const Asn1__Number_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Asn1__Number_template::match(const Asn1__Number& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
{
Asn1__Number::union_selection_type value_selection = other_value.get_selection();
if (value_selection == Asn1__Number::UNBOUND_VALUE) return FALSE;
if (value_selection != single_value.union_selection) return FALSE;
switch (value_selection) {
case Asn1__Number::ALT_decimal:
return single_value.field_decimal->match(other_value.decimal(), legacy);
case Asn1__Number::ALT_binary:
return single_value.field_binary->match(other_value.binary(), legacy);
case Asn1__Number::ALT_hexadecimal:
return single_value.field_hexadecimal->match(other_value.hexadecimal(), legacy);
default:
TTCN_error("Internal error: Invalid selector in a specific value when matching a template of union type @JsonBasicASN1Types.Asn1-Number.");
}
}
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error ("Matching an uninitialized template of union type @JsonBasicASN1Types.Asn1-Number.");
}
return FALSE;
}

boolean Asn1__Number_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
switch (single_value.union_selection) {
case Asn1__Number::ALT_decimal:
return single_value.field_decimal->is_value();
case Asn1__Number::ALT_binary:
return single_value.field_binary->is_value();
case Asn1__Number::ALT_hexadecimal:
return single_value.field_hexadecimal->is_value();
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing is_value operation on a template of union type @JsonBasicASN1Types.Asn1-Number.");
}
}

Asn1__Number Asn1__Number_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of union type @JsonBasicASN1Types.Asn1-Number.");
Asn1__Number ret_val;
switch (single_value.union_selection) {
case Asn1__Number::ALT_decimal:
ret_val.decimal() = single_value.field_decimal->valueof();
break;
case Asn1__Number::ALT_binary:
ret_val.binary() = single_value.field_binary->valueof();
break;
case Asn1__Number::ALT_hexadecimal:
ret_val.hexadecimal() = single_value.field_hexadecimal->valueof();
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing valueof operation on a template of union type @JsonBasicASN1Types.Asn1-Number.");
}
return ret_val;
}

Asn1__Number_template& Asn1__Number_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of union type @JsonBasicASN1Types.Asn1-Number.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of union type @JsonBasicASN1Types.Asn1-Number.");
return value_list.list_value[list_index];
}
void Asn1__Number_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error ("Internal error: Setting an invalid list for a template of union type @JsonBasicASN1Types.Asn1-Number.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Asn1__Number_template[list_length];
}

INTEGER_template& Asn1__Number_template::decimal()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Asn1__Number::ALT_decimal) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_decimal = new INTEGER_template(ANY_VALUE);
else single_value.field_decimal = new INTEGER_template;
single_value.union_selection = Asn1__Number::ALT_decimal;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_decimal;
}

const INTEGER_template& Asn1__Number_template::decimal() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field decimal in a non-specific template of union type @JsonBasicASN1Types.Asn1-Number.");
if (single_value.union_selection != Asn1__Number::ALT_decimal) TTCN_error("Accessing non-selected field decimal in a template of union type @JsonBasicASN1Types.Asn1-Number.");
return *single_value.field_decimal;
}

BITSTRING_template& Asn1__Number_template::binary()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Asn1__Number::ALT_binary) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_binary = new BITSTRING_template(ANY_VALUE);
else single_value.field_binary = new BITSTRING_template;
single_value.union_selection = Asn1__Number::ALT_binary;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_binary;
}

const BITSTRING_template& Asn1__Number_template::binary() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field binary in a non-specific template of union type @JsonBasicASN1Types.Asn1-Number.");
if (single_value.union_selection != Asn1__Number::ALT_binary) TTCN_error("Accessing non-selected field binary in a template of union type @JsonBasicASN1Types.Asn1-Number.");
return *single_value.field_binary;
}

OCTETSTRING_template& Asn1__Number_template::hexadecimal()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Asn1__Number::ALT_hexadecimal) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_hexadecimal = new OCTETSTRING_template(ANY_VALUE);
else single_value.field_hexadecimal = new OCTETSTRING_template;
single_value.union_selection = Asn1__Number::ALT_hexadecimal;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_hexadecimal;
}

const OCTETSTRING_template& Asn1__Number_template::hexadecimal() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field hexadecimal in a non-specific template of union type @JsonBasicASN1Types.Asn1-Number.");
if (single_value.union_selection != Asn1__Number::ALT_hexadecimal) TTCN_error("Accessing non-selected field hexadecimal in a template of union type @JsonBasicASN1Types.Asn1-Number.");
return *single_value.field_hexadecimal;
}

boolean Asn1__Number_template::ischosen(Asn1__Number::union_selection_type checked_selection) const
{
if (checked_selection == Asn1__Number::UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @JsonBasicASN1Types.Asn1-Number.");
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.union_selection == Asn1__Number::UNBOUND_VALUE) TTCN_error("Internal error: Invalid selector in a specific value when performing ischosen() operation on a template of union type @JsonBasicASN1Types.Asn1-Number.");
return single_value.union_selection == checked_selection;
case VALUE_LIST:
{
if (value_list.n_values < 1)
TTCN_error("Internal error: Performing ischosen() operation on a template of union type @JsonBasicASN1Types.Asn1-Number containing an empty list.");
boolean ret_val = value_list.list_value[0].ischosen(checked_selection);
for (unsigned int list_count = 1; ret_val == TRUE && list_count < value_list.n_values; list_count++) {
ret_val = value_list.list_value[list_count].ischosen(checked_selection);
}
return ret_val;
}
default:
return FALSE;
}
return FALSE;
}

void Asn1__Number_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case Asn1__Number::ALT_decimal:
TTCN_Logger::log_event_str("{ decimal := ");
single_value.field_decimal->log();
TTCN_Logger::log_event_str(" }");
break;
case Asn1__Number::ALT_binary:
TTCN_Logger::log_event_str("{ binary := ");
single_value.field_binary->log();
TTCN_Logger::log_event_str(" }");
break;
case Asn1__Number::ALT_hexadecimal:
TTCN_Logger::log_event_str("{ hexadecimal := ");
single_value.field_hexadecimal->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_str("<invalid selector>");
}
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Asn1__Number_template::log_match(const Asn1__Number& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity() && match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.union_selection == match_value.get_selection()) {
switch (single_value.union_selection) {
case Asn1__Number::ALT_decimal:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".decimal");
single_value.field_decimal->log_match(match_value.decimal(), legacy);
} else {
TTCN_Logger::log_event_str("{ decimal := ");
single_value.field_decimal->log_match(match_value.decimal(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case Asn1__Number::ALT_binary:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".binary");
single_value.field_binary->log_match(match_value.binary(), legacy);
} else {
TTCN_Logger::log_event_str("{ binary := ");
single_value.field_binary->log_match(match_value.binary(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case Asn1__Number::ALT_hexadecimal:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".hexadecimal");
single_value.field_hexadecimal->log_match(match_value.hexadecimal(), legacy);
} else {
TTCN_Logger::log_event_str("{ hexadecimal := ");
single_value.field_hexadecimal->log_match(match_value.hexadecimal(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
default:
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str("<invalid selector>");
}
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Asn1__Number_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.union_selection);
switch (single_value.union_selection) {
case Asn1__Number::ALT_decimal:
single_value.field_decimal->encode_text(text_buf);
break;
case Asn1__Number::ALT_binary:
single_value.field_binary->encode_text(text_buf);
break;
case Asn1__Number::ALT_hexadecimal:
single_value.field_hexadecimal->encode_text(text_buf);
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when encoding a template of union type @JsonBasicASN1Types.Asn1-Number.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized template of type @JsonBasicASN1Types.Asn1-Number.");
}
}

void Asn1__Number_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
{
single_value.union_selection = Asn1__Number::UNBOUND_VALUE;
Asn1__Number::union_selection_type new_selection = (Asn1__Number::union_selection_type)text_buf.pull_int().get_val();
switch (new_selection) {
case Asn1__Number::ALT_decimal:
single_value.field_decimal = new INTEGER_template;
single_value.field_decimal->decode_text(text_buf);
break;
case Asn1__Number::ALT_binary:
single_value.field_binary = new BITSTRING_template;
single_value.field_binary->decode_text(text_buf);
break;
case Asn1__Number::ALT_hexadecimal:
single_value.field_hexadecimal = new OCTETSTRING_template;
single_value.field_hexadecimal->decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for a template of type @JsonBasicASN1Types.Asn1-Number.");
}
single_value.union_selection = new_selection;
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Asn1__Number_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized selector was received in a template of type @JsonBasicASN1Types.Asn1-Number.");
}
}

boolean Asn1__Number_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Asn1__Number_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int v_idx=0; v_idx<value_list.n_values; v_idx++)
if (value_list.list_value[v_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void Asn1__Number_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union template type `@JsonBasicASN1Types.Asn1-Number'");
    }
    if (strcmp("decimal", param_field) == 0) {
      decimal().set_param(param);
      return;
    } else if (strcmp("binary", param_field) == 0) {
      binary().set_param(param);
      return;
    } else if (strcmp("hexadecimal", param_field) == 0) {
      hexadecimal().set_param(param);
      return;
    } else param.error("Field `%s' not found in union template type `@JsonBasicASN1Types.Asn1-Number'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "union template");
  Module_Param_Ptr m_p = &param;
  switch (m_p->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Asn1__Number_template new_temp;
    new_temp.set_type(m_p->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, m_p->get_size());
    for (size_t p_i=0; p_i<m_p->get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*m_p->get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (m_p->get_size()==0) break;
    param.type_error("union template", "@JsonBasicASN1Types.Asn1-Number");
    break;
  case Module_Param::MP_Assignment_List: {
    Module_Param* mp_last = m_p->get_elem(m_p->get_size()-1);
    char* last_name = mp_last->get_id()->get_name();
    if (!strcmp(last_name, "decimal")) {
      decimal().set_param(*mp_last);
      break;
    }
    if (!strcmp(last_name, "binary")) {
      binary().set_param(*mp_last);
      break;
    }
    if (!strcmp(last_name, "hexadecimal")) {
      hexadecimal().set_param(*mp_last);
      break;
    }
    mp_last->error("Field %s does not exist in type @JsonBasicASN1Types.Asn1-Number.", last_name);
  } break;
  default:
    param.type_error("union template", "@JsonBasicASN1Types.Asn1-Number");
  }
  is_ifpresent = param.get_ifpresent();
}

void Asn1__Number_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
switch (single_value.union_selection) {
case Asn1__Number::ALT_decimal:
single_value.field_decimal->check_restriction(t_res, t_name ? t_name : "@JsonBasicASN1Types.Asn1-Number");
return;
case Asn1__Number::ALT_binary:
single_value.field_binary->check_restriction(t_res, t_name ? t_name : "@JsonBasicASN1Types.Asn1-Number");
return;
case Asn1__Number::ALT_hexadecimal:
single_value.field_hexadecimal->check_restriction(t_res, t_name ? t_name : "@JsonBasicASN1Types.Asn1-Number");
return;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing check_restriction operation on a template of union type @JsonBasicASN1Types.Asn1-Number.");
}
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@JsonBasicASN1Types.Asn1-Number");
}


/* Bodies of functions, altsteps and testcases */

void Asn1__bs_encoder(const BITSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `bitstring'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `bitstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(BITSTRING_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__bs_decoder(OCTETSTRING& input_stream, BITSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `bitstring'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `bitstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(BITSTRING_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__bool_encoder(const BOOLEAN& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `boolean'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `boolean' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(BOOLEAN_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__bool_decoder(OCTETSTRING& input_stream, BOOLEAN& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `boolean'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `boolean' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(BOOLEAN_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__bmpstr_encoder(const UNIVERSAL_CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `BMPString'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `BMPString' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(BMPString_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__bmpstr_decoder(OCTETSTRING& input_stream, UNIVERSAL_CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `BMPString'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `BMPString' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(BMPString_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__Number_decimal_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `integer'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `integer' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(Asn1__Number_decimal_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__Number_decimal_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `integer'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `integer' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(Asn1__Number_decimal_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__Number_binary_encoder(const BITSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `bitstring'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `bitstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(Asn1__Number_binary_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__Number_binary_decoder(OCTETSTRING& input_stream, BITSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `bitstring'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `bitstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(Asn1__Number_binary_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__Number_hexadecimal_encoder(const OCTETSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `octetstring'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `octetstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(Asn1__Number_hexadecimal_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__Number_hexadecimal_decoder(OCTETSTRING& input_stream, OCTETSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `octetstring'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `octetstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(Asn1__Number_hexadecimal_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__Number_encoder(const Asn1__Number& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `@JsonBasicASN1Types.Asn1-Number'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicASN1Types.Asn1-Number' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(Asn1__Number_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__Number_decoder(OCTETSTRING& input_stream, Asn1__Number& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `@JsonBasicASN1Types.Asn1-Number'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicASN1Types.Asn1-Number' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(Asn1__Number_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__genstr_encoder(const UNIVERSAL_CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `GeneralString'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `GeneralString' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(GeneralString_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__genstr_decoder(OCTETSTRING& input_stream, UNIVERSAL_CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `GeneralString'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `GeneralString' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(GeneralString_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__graphstr_encoder(const UNIVERSAL_CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `GraphicString'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `GraphicString' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(GraphicString_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__graphstr_decoder(OCTETSTRING& input_stream, UNIVERSAL_CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `GraphicString'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `GraphicString' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(GraphicString_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__ia5str_encoder(const CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `IA5String'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `IA5String' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(IA5String_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__ia5str_decoder(OCTETSTRING& input_stream, CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `IA5String'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `IA5String' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(IA5String_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__i_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `integer'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `integer' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(INTEGER_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__i_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `integer'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `integer' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(INTEGER_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__f_encoder(const FLOAT& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `float'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `float' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(FLOAT_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__f_decoder(OCTETSTRING& input_stream, FLOAT& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `float'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `float' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(FLOAT_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__null_encoder(const ASN_NULL& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `NULL'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `NULL' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(ASN_NULL_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__null_decoder(OCTETSTRING& input_stream, ASN_NULL& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `NULL'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `NULL' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(ASN_NULL_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__numstr_encoder(const CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `NumericString'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `NumericString' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(NumericString_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__numstr_decoder(OCTETSTRING& input_stream, CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `NumericString'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `NumericString' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(NumericString_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__oid_encoder(const OBJID& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `objid'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `objid' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(OBJID_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__oid_decoder(OCTETSTRING& input_stream, OBJID& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `objid'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `objid' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(OBJID_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__os_encoder(const OCTETSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `octetstring'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `octetstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(OCTETSTRING_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__os_decoder(OCTETSTRING& input_stream, OCTETSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `octetstring'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `octetstring' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(OCTETSTRING_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__pstr_encoder(const CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `PrintableString'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `PrintableString' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(PrintableString_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__pstr_decoder(OCTETSTRING& input_stream, CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `PrintableString'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `PrintableString' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(PrintableString_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__seqofI_0_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `integer'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `integer' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(INTEGER_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__seqofI_0_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `integer'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `integer' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(INTEGER_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__seqofI_encoder(const Asn1__seqofI& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `@JsonBasicASN1Types.Asn1-seqofI'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicASN1Types.Asn1-seqofI' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(Asn1__seqofI_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__seqofI_decoder(OCTETSTRING& input_stream, Asn1__seqofI& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `@JsonBasicASN1Types.Asn1-seqofI'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicASN1Types.Asn1-seqofI' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(Asn1__seqofI_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__setofI_0_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `integer'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `integer' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(INTEGER_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__setofI_0_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `integer'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `integer' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(INTEGER_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__setofI_encoder(const Asn1__setofI& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `@JsonBasicASN1Types.Asn1-setofI'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicASN1Types.Asn1-setofI' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(Asn1__setofI_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__setofI_decoder(OCTETSTRING& input_stream, Asn1__setofI& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `@JsonBasicASN1Types.Asn1-setofI'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `@JsonBasicASN1Types.Asn1-setofI' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(Asn1__setofI_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__teletexstr_encoder(const UNIVERSAL_CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `TeletexString'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `TeletexString' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(TeletexString_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__teletexstr_decoder(OCTETSTRING& input_stream, UNIVERSAL_CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `TeletexString'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `TeletexString' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(TeletexString_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__utf8str_encoder(const UNIVERSAL_CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `UTF8String'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `UTF8String' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(UTF8String_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__utf8str_decoder(OCTETSTRING& input_stream, UNIVERSAL_CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `UTF8String'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `UTF8String' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(UTF8String_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__videotexstr_encoder(const UNIVERSAL_CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `VideotexString'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `VideotexString' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(VideotexString_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__videotexstr_decoder(OCTETSTRING& input_stream, UNIVERSAL_CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `VideotexString'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `VideotexString' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(VideotexString_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}

void Asn1__visiblestr_encoder(const CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' encoding function defined for type `VisibleString'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, TRUE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `VisibleString' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf;
input_value.encode(VisibleString_descr_, ttcn_buf, coding_type, extra_options);
ttcn_buf.get_string(output_stream);
}

INTEGER Asn1__visiblestr_decoder(OCTETSTRING& input_stream, CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name)
{
if (coding_name == "PER") {
TTCN_error("No `PER' decoding function defined for type `VisibleString'");
}
TTCN_EncDec::coding_t coding_type;
unsigned int extra_options = 0;
TTCN_EncDec::get_coding_from_str(coding_name, &coding_type, &extra_options, FALSE);
if (coding_type != TTCN_EncDec::CT_BER && coding_type != TTCN_EncDec::CT_JSON && coding_type != TTCN_EncDec::CT_OER) {
TTCN_Logger::begin_event_log2str();
coding_name.log();
TTCN_error("Type `VisibleString' does not support %s encoding", (const char*) TTCN_Logger::end_event_log2str());
}
TTCN_Buffer ttcn_buf(input_stream);
output_value.decode(VisibleString_descr_, ttcn_buf, coding_type, extra_options);
switch (TTCN_EncDec::get_last_error_type()) {
case TTCN_EncDec::ET_NONE:
ttcn_buf.cut();
ttcn_buf.get_string(input_stream);
return 0;
case TTCN_EncDec::ET_INCOMPL_MSG:
case TTCN_EncDec::ET_LEN_ERR:
return 2;
default:
return 1;
}
}


} /* end of namespace */
