// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R6B
// for U-ERICSSON\ethbaat (ethbaat@HU-00000670) on Thu Feb 20 17:43:37 2020

// Copyright (c) 2000-2019 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "JsonEncDecFunctions.hh"

namespace JsonEncDecFunctions {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x54, 0x82, 0x9a, 0xb9, 0x59, 0x0b, 0xb5, 0xeb, 0x4c, 0xa6, 0xbc, 0xe1, 0xa1, 0x17, 0x91, 0x7c };

/* Global variable definitions */

TTCN_Module module_object("JsonEncDecFunctions", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_6,
  current_runtime_version.requires_patch_level_1,  current_runtime_version.requires_runtime_1);

/* Bodies of functions, altsteps and testcases */

BITSTRING f__json__enc__i2bs(const INTEGER& i)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_i2bs(): Encoding integer: ");
i.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
i.encode(JsonBasicTypes::I__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_i2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__f2bs(const FLOAT& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_f2bs(): Encoding float: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::F__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_f2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__e2bs(const JsonBasicTypes::E__json& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_e2bs(): Encoding @JsonBasicTypes.E_json: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::E__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_e2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__b2bs(const BOOLEAN& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_b2bs(): Encoding boolean: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::B__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_b2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__bs2bs(const BITSTRING& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_bs2bs(): Encoding bitstring: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::BS__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_bs2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__hs2bs(const HEXSTRING& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_hs2bs(): Encoding hexstring: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::HS__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_hs2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__os2bs(const OCTETSTRING& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_os2bs(): Encoding octetstring: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::OS__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_os2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__cs2bs(const CHARSTRING& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_cs2bs(): Encoding charstring: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::CS__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_cs2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__ucs2bs(const UNIVERSAL_CHARSTRING& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_ucs2bs(): Encoding universal charstring: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::UCS__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_ucs2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__ai3tobs(const JsonBasicTypes::AI3__json& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_ai3tobs(): Encoding integer[3]: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::AI3__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_ai3tobs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__v2bs(const VERDICTTYPE& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_v2bs(): Encoding verdicttype: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::V__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_v2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__r2bs(const JsonBasicTypes::R__json& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_r2bs(): Encoding @JsonBasicTypes.R_json: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::R__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_r2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__roi2bs(const JsonBasicTypes::RoI__json& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_roi2bs(): Encoding @JsonBasicTypes.RoI_json: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::RoI__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_roi2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__s2bs(const JsonBasicTypes::S__json& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_s2bs(): Encoding @JsonBasicTypes.S_json: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::S__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_s2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__soi2bs(const JsonBasicTypes::SoI__json& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_soi2bs(): Encoding @JsonBasicTypes.SoI_json: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::SoI__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_soi2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

BITSTRING f__json__enc__u2bs(const JsonBasicTypes::U__json& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_u2bs(): Encoding @JsonBasicTypes.U_json: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::U__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
BITSTRING ret_val;
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
ret_val = oct2bit(tmp_os);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_u2bs(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

OCTETSTRING f__json__enc__i2os(const INTEGER& i)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_i2os(): Encoding integer: ");
i.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
i.encode(JsonBasicTypes::I__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
OCTETSTRING ret_val;
ttcn_buffer.get_string(ret_val);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_i2os(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

OCTETSTRING f__json__enc__f2os(const FLOAT& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_f2os(): Encoding float: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::F__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
OCTETSTRING ret_val;
ttcn_buffer.get_string(ret_val);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_f2os(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

OCTETSTRING f__json__enc__e2os(const JsonBasicTypes::E__json& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_e2os(): Encoding @JsonBasicTypes.E_json: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::E__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
OCTETSTRING ret_val;
ttcn_buffer.get_string(ret_val);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_e2os(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

OCTETSTRING f__json__enc__b2os(const BOOLEAN& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_b2os(): Encoding boolean: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::B__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
OCTETSTRING ret_val;
ttcn_buffer.get_string(ret_val);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_b2os(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

OCTETSTRING f__json__enc__bs2os(const BITSTRING& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_bs2os(): Encoding bitstring: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::BS__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
OCTETSTRING ret_val;
ttcn_buffer.get_string(ret_val);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_bs2os(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

OCTETSTRING f__json__enc__hs2os(const HEXSTRING& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_hs2os(): Encoding hexstring: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::HS__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
OCTETSTRING ret_val;
ttcn_buffer.get_string(ret_val);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_hs2os(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

OCTETSTRING f__json__enc__os2os(const OCTETSTRING& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_os2os(): Encoding octetstring: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::OS__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
OCTETSTRING ret_val;
ttcn_buffer.get_string(ret_val);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_os2os(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

OCTETSTRING f__json__enc__cs2os(const CHARSTRING& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_cs2os(): Encoding charstring: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::CS__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
OCTETSTRING ret_val;
ttcn_buffer.get_string(ret_val);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_cs2os(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

OCTETSTRING f__json__enc__ucs2os(const UNIVERSAL_CHARSTRING& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_ucs2os(): Encoding universal charstring: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::UCS__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
OCTETSTRING ret_val;
ttcn_buffer.get_string(ret_val);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_ucs2os(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

OCTETSTRING f__json__enc__ai3toos(const JsonBasicTypes::AI3__json& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_ai3toos(): Encoding integer[3]: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::AI3__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
OCTETSTRING ret_val;
ttcn_buffer.get_string(ret_val);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_ai3toos(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

OCTETSTRING f__json__enc__v2os(const VERDICTTYPE& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_v2os(): Encoding verdicttype: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::V__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
OCTETSTRING ret_val;
ttcn_buffer.get_string(ret_val);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_v2os(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

OCTETSTRING f__json__enc__r2os(const JsonBasicTypes::R__json& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_r2os(): Encoding @JsonBasicTypes.R_json: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::R__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
OCTETSTRING ret_val;
ttcn_buffer.get_string(ret_val);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_r2os(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

OCTETSTRING f__json__enc__roi2os(const JsonBasicTypes::RoI__json& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_roi2os(): Encoding @JsonBasicTypes.RoI_json: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::RoI__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
OCTETSTRING ret_val;
ttcn_buffer.get_string(ret_val);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_roi2os(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

OCTETSTRING f__json__enc__s2os(const JsonBasicTypes::S__json& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_s2os(): Encoding @JsonBasicTypes.S_json: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::S__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
OCTETSTRING ret_val;
ttcn_buffer.get_string(ret_val);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_s2os(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

OCTETSTRING f__json__enc__soi2os(const JsonBasicTypes::SoI__json& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_soi2os(): Encoding @JsonBasicTypes.SoI_json: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::SoI__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
OCTETSTRING ret_val;
ttcn_buffer.get_string(ret_val);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_soi2os(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

OCTETSTRING f__json__enc__u2os(const JsonBasicTypes::U__json& f)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_u2os(): Encoding @JsonBasicTypes.U_json: ");
f.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
f.encode(JsonBasicTypes::U__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
OCTETSTRING ret_val;
ttcn_buffer.get_string(ret_val);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_enc_u2os(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

INTEGER f__json__dec__bs2i(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2i(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
INTEGER ret_val;
ret_val.decode(JsonBasicTypes::I__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2i(): Decoded integer: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2i(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

FLOAT f__json__dec__bs2f(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2f(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
FLOAT ret_val;
ret_val.decode(JsonBasicTypes::F__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2f(): Decoded float: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2f(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

JsonBasicTypes::E__json f__json__dec__bs2e(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2e(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
JsonBasicTypes::E__json ret_val;
ret_val.decode(JsonBasicTypes::E__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2e(): Decoded @JsonBasicTypes.E_json: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2e(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

BOOLEAN f__json__dec__bs2b(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2b(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
BOOLEAN ret_val;
ret_val.decode(JsonBasicTypes::B__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2b(): Decoded boolean: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2b(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

BITSTRING f__json__dec__bs2bs(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2bs(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
BITSTRING ret_val;
ret_val.decode(JsonBasicTypes::BS__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2bs(): Decoded bitstring: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2bs(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

HEXSTRING f__json__dec__bs2hs(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2hs(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
HEXSTRING ret_val;
ret_val.decode(JsonBasicTypes::HS__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2hs(): Decoded hexstring: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2hs(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

OCTETSTRING f__json__dec__bs2os(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2os(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
OCTETSTRING ret_val;
ret_val.decode(JsonBasicTypes::OS__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2os(): Decoded octetstring: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2os(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

CHARSTRING f__json__dec__bs2cs(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2cs(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
CHARSTRING ret_val;
ret_val.decode(JsonBasicTypes::CS__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2cs(): Decoded charstring: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2cs(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

UNIVERSAL_CHARSTRING f__json__dec__bs2ucs(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2ucs(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
UNIVERSAL_CHARSTRING ret_val;
ret_val.decode(JsonBasicTypes::UCS__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2ucs(): Decoded universal charstring: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2ucs(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

JsonBasicTypes::AI3__json f__json__dec__bstoai3(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bstoai3(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
JsonBasicTypes::AI3__json ret_val;
ret_val.decode(JsonBasicTypes::AI3__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bstoai3(): Decoded integer[3]: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bstoai3(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

VERDICTTYPE f__json__dec__bs2v(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2v(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
VERDICTTYPE ret_val;
ret_val.decode(JsonBasicTypes::V__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2v(): Decoded verdicttype: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2v(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

JsonBasicTypes::R__json f__json__dec__bs2r(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2r(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
JsonBasicTypes::R__json ret_val;
ret_val.decode(JsonBasicTypes::R__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2r(): Decoded @JsonBasicTypes.R_json: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2r(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

JsonBasicTypes::RoI__json f__json__dec__bs2roi(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2roi(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
JsonBasicTypes::RoI__json ret_val;
ret_val.decode(JsonBasicTypes::RoI__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2roi(): Decoded @JsonBasicTypes.RoI_json: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2roi(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

JsonBasicTypes::S__json f__json__dec__bs2s(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2s(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
JsonBasicTypes::S__json ret_val;
ret_val.decode(JsonBasicTypes::S__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2s(): Decoded @JsonBasicTypes.S_json: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2s(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

JsonBasicTypes::SoI__json f__json__dec__bs2soi(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2soi(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
JsonBasicTypes::SoI__json ret_val;
ret_val.decode(JsonBasicTypes::SoI__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2soi(): Decoded @JsonBasicTypes.SoI_json: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2soi(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

JsonBasicTypes::U__json f__json__dec__bs2u(const BITSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2u(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(bit2oct(p));
JsonBasicTypes::U__json ret_val;
ret_val.decode(JsonBasicTypes::U__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_bs2u(): Decoded @JsonBasicTypes.U_json: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
oct2bit(tmp_os).log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_bs2u(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

INTEGER f__json__dec__os2i(const OCTETSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2i(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(p);
INTEGER ret_val;
ret_val.decode(JsonBasicTypes::I__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2i(): Decoded integer: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
tmp_os.log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_os2i(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

FLOAT f__json__dec__os2f(const OCTETSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2f(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(p);
FLOAT ret_val;
ret_val.decode(JsonBasicTypes::F__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2f(): Decoded float: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
tmp_os.log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_os2f(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

JsonBasicTypes::E__json f__json__dec__os2e(const OCTETSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2e(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(p);
JsonBasicTypes::E__json ret_val;
ret_val.decode(JsonBasicTypes::E__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2e(): Decoded @JsonBasicTypes.E_json: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
tmp_os.log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_os2e(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

BOOLEAN f__json__dec__os2b(const OCTETSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2b(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(p);
BOOLEAN ret_val;
ret_val.decode(JsonBasicTypes::B__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2b(): Decoded boolean: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
tmp_os.log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_os2b(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

BITSTRING f__json__dec__os2bs(const OCTETSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2bs(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(p);
BITSTRING ret_val;
ret_val.decode(JsonBasicTypes::BS__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2bs(): Decoded bitstring: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
tmp_os.log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_os2bs(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

HEXSTRING f__json__dec__os2hs(const OCTETSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2hs(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(p);
HEXSTRING ret_val;
ret_val.decode(JsonBasicTypes::HS__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2hs(): Decoded hexstring: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
tmp_os.log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_os2hs(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

OCTETSTRING f__json__dec__os2os(const OCTETSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2os(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(p);
OCTETSTRING ret_val;
ret_val.decode(JsonBasicTypes::OS__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2os(): Decoded octetstring: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
tmp_os.log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_os2os(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

CHARSTRING f__json__dec__os2cs(const OCTETSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2cs(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(p);
CHARSTRING ret_val;
ret_val.decode(JsonBasicTypes::CS__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2cs(): Decoded charstring: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
tmp_os.log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_os2cs(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

UNIVERSAL_CHARSTRING f__json__dec__os2ucs(const OCTETSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2ucs(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(p);
UNIVERSAL_CHARSTRING ret_val;
ret_val.decode(JsonBasicTypes::UCS__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2ucs(): Decoded universal charstring: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
tmp_os.log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_os2ucs(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

JsonBasicTypes::AI3__json f__json__dec__ostoai3(const OCTETSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_ostoai3(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(p);
JsonBasicTypes::AI3__json ret_val;
ret_val.decode(JsonBasicTypes::AI3__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_ostoai3(): Decoded integer[3]: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
tmp_os.log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_ostoai3(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

VERDICTTYPE f__json__dec__os2v(const OCTETSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2v(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(p);
VERDICTTYPE ret_val;
ret_val.decode(JsonBasicTypes::V__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2v(): Decoded verdicttype: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
tmp_os.log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_os2v(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

JsonBasicTypes::R__json f__json__dec__os2r(const OCTETSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2r(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(p);
JsonBasicTypes::R__json ret_val;
ret_val.decode(JsonBasicTypes::R__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2r(): Decoded @JsonBasicTypes.R_json: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
tmp_os.log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_os2r(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

JsonBasicTypes::RoI__json f__json__dec__os2roi(const OCTETSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2roi(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(p);
JsonBasicTypes::RoI__json ret_val;
ret_val.decode(JsonBasicTypes::RoI__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2roi(): Decoded @JsonBasicTypes.RoI_json: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
tmp_os.log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_os2roi(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

JsonBasicTypes::S__json f__json__dec__os2s(const OCTETSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2s(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(p);
JsonBasicTypes::S__json ret_val;
ret_val.decode(JsonBasicTypes::S__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2s(): Decoded @JsonBasicTypes.S_json: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
tmp_os.log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_os2s(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

JsonBasicTypes::SoI__json f__json__dec__os2soi(const OCTETSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2soi(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(p);
JsonBasicTypes::SoI__json ret_val;
ret_val.decode(JsonBasicTypes::SoI__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2soi(): Decoded @JsonBasicTypes.SoI_json: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
tmp_os.log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_os2soi(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}

JsonBasicTypes::U__json f__json__dec__os2u(const OCTETSTRING& p)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2u(): Stream before decoding: ");
p.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(p);
JsonBasicTypes::U__json ret_val;
ret_val.decode(JsonBasicTypes::U__json_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("f_json_dec_os2u(): Decoded @JsonBasicTypes.U_json: ");
ret_val.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()) {
ttcn_buffer.cut();
OCTETSTRING tmp_os;
ttcn_buffer.get_string(tmp_os);
TTCN_Logger::begin_event_log2str();
tmp_os.log();
CHARSTRING remaining_stream = TTCN_Logger::end_event_log2str();
TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_EXTRA_DATA, "f_json_dec_os2u(): Data remained at the end of the stream after successful decoding: %s", (const char*) remaining_stream);
}
}
return ret_val;
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("JsonEncDecFunctions.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "JsonEncDecFunctions");
JsonBasicTypes::module_object.pre_init_module();
module_object.add_function("f_json_enc_i2bs", (genericfunc_t)&f__json__enc__i2bs, NULL);
module_object.add_function("f_json_enc_f2bs", (genericfunc_t)&f__json__enc__f2bs, NULL);
module_object.add_function("f_json_enc_e2bs", (genericfunc_t)&f__json__enc__e2bs, NULL);
module_object.add_function("f_json_enc_b2bs", (genericfunc_t)&f__json__enc__b2bs, NULL);
module_object.add_function("f_json_enc_bs2bs", (genericfunc_t)&f__json__enc__bs2bs, NULL);
module_object.add_function("f_json_enc_hs2bs", (genericfunc_t)&f__json__enc__hs2bs, NULL);
module_object.add_function("f_json_enc_os2bs", (genericfunc_t)&f__json__enc__os2bs, NULL);
module_object.add_function("f_json_enc_cs2bs", (genericfunc_t)&f__json__enc__cs2bs, NULL);
module_object.add_function("f_json_enc_ucs2bs", (genericfunc_t)&f__json__enc__ucs2bs, NULL);
module_object.add_function("f_json_enc_ai3tobs", (genericfunc_t)&f__json__enc__ai3tobs, NULL);
module_object.add_function("f_json_enc_v2bs", (genericfunc_t)&f__json__enc__v2bs, NULL);
module_object.add_function("f_json_enc_r2bs", (genericfunc_t)&f__json__enc__r2bs, NULL);
module_object.add_function("f_json_enc_roi2bs", (genericfunc_t)&f__json__enc__roi2bs, NULL);
module_object.add_function("f_json_enc_s2bs", (genericfunc_t)&f__json__enc__s2bs, NULL);
module_object.add_function("f_json_enc_soi2bs", (genericfunc_t)&f__json__enc__soi2bs, NULL);
module_object.add_function("f_json_enc_u2bs", (genericfunc_t)&f__json__enc__u2bs, NULL);
module_object.add_function("f_json_enc_i2os", (genericfunc_t)&f__json__enc__i2os, NULL);
module_object.add_function("f_json_enc_f2os", (genericfunc_t)&f__json__enc__f2os, NULL);
module_object.add_function("f_json_enc_e2os", (genericfunc_t)&f__json__enc__e2os, NULL);
module_object.add_function("f_json_enc_b2os", (genericfunc_t)&f__json__enc__b2os, NULL);
module_object.add_function("f_json_enc_bs2os", (genericfunc_t)&f__json__enc__bs2os, NULL);
module_object.add_function("f_json_enc_hs2os", (genericfunc_t)&f__json__enc__hs2os, NULL);
module_object.add_function("f_json_enc_os2os", (genericfunc_t)&f__json__enc__os2os, NULL);
module_object.add_function("f_json_enc_cs2os", (genericfunc_t)&f__json__enc__cs2os, NULL);
module_object.add_function("f_json_enc_ucs2os", (genericfunc_t)&f__json__enc__ucs2os, NULL);
module_object.add_function("f_json_enc_ai3toos", (genericfunc_t)&f__json__enc__ai3toos, NULL);
module_object.add_function("f_json_enc_v2os", (genericfunc_t)&f__json__enc__v2os, NULL);
module_object.add_function("f_json_enc_r2os", (genericfunc_t)&f__json__enc__r2os, NULL);
module_object.add_function("f_json_enc_roi2os", (genericfunc_t)&f__json__enc__roi2os, NULL);
module_object.add_function("f_json_enc_s2os", (genericfunc_t)&f__json__enc__s2os, NULL);
module_object.add_function("f_json_enc_soi2os", (genericfunc_t)&f__json__enc__soi2os, NULL);
module_object.add_function("f_json_enc_u2os", (genericfunc_t)&f__json__enc__u2os, NULL);
module_object.add_function("f_json_dec_bs2i", (genericfunc_t)&f__json__dec__bs2i, NULL);
module_object.add_function("f_json_dec_bs2f", (genericfunc_t)&f__json__dec__bs2f, NULL);
module_object.add_function("f_json_dec_bs2e", (genericfunc_t)&f__json__dec__bs2e, NULL);
module_object.add_function("f_json_dec_bs2b", (genericfunc_t)&f__json__dec__bs2b, NULL);
module_object.add_function("f_json_dec_bs2bs", (genericfunc_t)&f__json__dec__bs2bs, NULL);
module_object.add_function("f_json_dec_bs2hs", (genericfunc_t)&f__json__dec__bs2hs, NULL);
module_object.add_function("f_json_dec_bs2os", (genericfunc_t)&f__json__dec__bs2os, NULL);
module_object.add_function("f_json_dec_bs2cs", (genericfunc_t)&f__json__dec__bs2cs, NULL);
module_object.add_function("f_json_dec_bs2ucs", (genericfunc_t)&f__json__dec__bs2ucs, NULL);
module_object.add_function("f_json_dec_bstoai3", (genericfunc_t)&f__json__dec__bstoai3, NULL);
module_object.add_function("f_json_dec_bs2v", (genericfunc_t)&f__json__dec__bs2v, NULL);
module_object.add_function("f_json_dec_bs2r", (genericfunc_t)&f__json__dec__bs2r, NULL);
module_object.add_function("f_json_dec_bs2roi", (genericfunc_t)&f__json__dec__bs2roi, NULL);
module_object.add_function("f_json_dec_bs2s", (genericfunc_t)&f__json__dec__bs2s, NULL);
module_object.add_function("f_json_dec_bs2soi", (genericfunc_t)&f__json__dec__bs2soi, NULL);
module_object.add_function("f_json_dec_bs2u", (genericfunc_t)&f__json__dec__bs2u, NULL);
module_object.add_function("f_json_dec_os2i", (genericfunc_t)&f__json__dec__os2i, NULL);
module_object.add_function("f_json_dec_os2f", (genericfunc_t)&f__json__dec__os2f, NULL);
module_object.add_function("f_json_dec_os2e", (genericfunc_t)&f__json__dec__os2e, NULL);
module_object.add_function("f_json_dec_os2b", (genericfunc_t)&f__json__dec__os2b, NULL);
module_object.add_function("f_json_dec_os2bs", (genericfunc_t)&f__json__dec__os2bs, NULL);
module_object.add_function("f_json_dec_os2hs", (genericfunc_t)&f__json__dec__os2hs, NULL);
module_object.add_function("f_json_dec_os2os", (genericfunc_t)&f__json__dec__os2os, NULL);
module_object.add_function("f_json_dec_os2cs", (genericfunc_t)&f__json__dec__os2cs, NULL);
module_object.add_function("f_json_dec_os2ucs", (genericfunc_t)&f__json__dec__os2ucs, NULL);
module_object.add_function("f_json_dec_ostoai3", (genericfunc_t)&f__json__dec__ostoai3, NULL);
module_object.add_function("f_json_dec_os2v", (genericfunc_t)&f__json__dec__os2v, NULL);
module_object.add_function("f_json_dec_os2r", (genericfunc_t)&f__json__dec__os2r, NULL);
module_object.add_function("f_json_dec_os2roi", (genericfunc_t)&f__json__dec__os2roi, NULL);
module_object.add_function("f_json_dec_os2s", (genericfunc_t)&f__json__dec__os2s, NULL);
module_object.add_function("f_json_dec_os2soi", (genericfunc_t)&f__json__dec__os2soi, NULL);
module_object.add_function("f_json_dec_os2u", (genericfunc_t)&f__json__dec__os2u, NULL);
}

static void post_init_module()
{
TTCN_Location current_location("JsonEncDecFunctions.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "JsonEncDecFunctions");
JsonBasicTypes::module_object.post_init_module();
}


} /* end of namespace */
