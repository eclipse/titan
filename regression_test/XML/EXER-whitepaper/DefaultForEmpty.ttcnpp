/******************************************************************************
 * Copyright (c) 2000-2016 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Raduly, Csaba
 *
 ******************************************************************************/
module DefaultForEmpty {
modulepar boolean DefaultForEmpty_verbose := false;
#define verbose DefaultForEmpty_verbose
#include "../macros.ttcnin"

type component DFE {}

type record DFEProduct {
  charstring color,
  charstring name,
  float      price,
  charstring currency
}
with {
  variant (color)    "attribute";
  variant (currency) "defaultForEmpty as 'US Dollars'";
}



DECLARE_XER_ENCODERS(DFEProduct, dfe);
DECLARE_EXER_ENCODERS(DFEProduct, dfe);

const DFEProduct dfeval := {
  color    := "red",
  name     := "shirt",
  price    := 12.33,
  currency := "US Dollars"
}

const universal charstring str_dfe_e_enc := // encoding, not omitted
"<DFEProduct color=\'red\'>\n" &
"\t<name>shirt</name>\n" &
"\t<price>12.330000</price>\n" &
"\t<currency>US Dollars</currency>\n" &
"</DFEProduct>\n" &
"\n";

const universal charstring str_dfe_e_dec := // decoding, omitted
"<DFEProduct color=\'red\'>\n" &
"\t<name>shirt</name>\n" &
"\t<price>12.330000</price>\n" &
"\t<currency/>\n" &
"</DFEProduct>\n" &
"\n";

const universal charstring str_dfe_b :=
"<DFEProduct>\n" &
"\t<color>red</color>\n" &
"\t<name>shirt</name>\n" &
"\t<price>12.330000</price>\n" &
"\t<currency>US Dollars</currency>\n" &
"</DFEProduct>\n" &
"\n";

testcase encode_dfe() runs on DFE
{
  CHECK_METHOD(bxer_enc_dfe, dfeval, str_dfe_b);
  CHECK_METHOD(exer_enc_dfe, dfeval, str_dfe_e_enc);
}

testcase decode_dfe() runs on DFE
{
  CHECK_DECODE(bxer_dec_dfe, str_dfe_b, DFEProduct, dfeval);
  // Decoding must handle both forms
  CHECK_DECODE(exer_dec_dfe, str_dfe_e_enc, DFEProduct, dfeval);
  CHECK_DECODE(exer_dec_dfe, str_dfe_e_dec, DFEProduct, dfeval);
}

control {
  execute(encode_dfe());
  execute(decode_dfe());
}

}
with {
  encode "XML"
}
