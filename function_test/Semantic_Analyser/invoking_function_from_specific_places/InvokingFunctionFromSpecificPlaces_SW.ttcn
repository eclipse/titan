/******************************************************************************
 * Copyright (c) 2000-2018 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
 *
 * Contributors:
 *   Aron Simon
 *
 ******************************************************************************/

module InvokingFunctionFromSpecificPlaces_SW { //^In TTCN-3 module//

  modulepar boolean mp := true;

  type component MTC { port P p }
  type component PTC { }

  type record R { integer field, boolean field2 optional }
  type record SR { R field }
  type port P message { inout R, SR }

  template R T := {field := fi(), field2 := omit}
  template R PT (boolean field_param) := {field := fi(), field2 := field_param}
  template R PTD (boolean field_param := false) := {field := fi(), field2 := field_param}
  template SR ST := {field := T}
  template SR PST (template R field_param) := { field := field_param}

  function fb() return boolean { return true; }
  function fi() return integer { return 1; }
  external function ef() return boolean;

  testcase                        //^In testcase definition//
  tc(in boolean fp, in @fuzzy boolean ffp, in template @fuzzy R ftfp)
  runs on MTC {
    var boolean vb := true;
    var @fuzzy boolean fvb := true;
    var PTC ptc := PTC.create;
    var template @fuzzy R VTF := { field := fi() };

    var template R VT := { field := fi() }

    timer t := 1.0; t.start; 

    alt {                         //^In alt construct//
      /* A_MODULEPAR */
      [mp]  t.timeout {}

      /* TODO: A_VAR */
      [vb]  t.timeout {}

      /* TODO: A_VAR @fuzzy */
      [fvb]  t.timeout {}

      /* A_FUNCTION_RVAL */
      [fb()] t.timeout {}          //^In guard expression// //^warning\: Function invocation// 
    
      /* A_EXT_FUNCTION_RVAL */
      [ef()] t.timeout {}         //^In guard expression// //^warning\: Function invocation// 
    
      /* A_PAR_VAL_IN */
      [fp]  t.timeout {}

      /* A_PAR_VAL_IN @fuzzy */
      [ffp]  t.timeout {}         //^In guard expression// //^warning\: Fuzzy parameter//

      /* OPTYPE_RND */
      [rnd() < 1.0]  t.timeout {} //^In guard expression// //Random number generation//

      /* OPTYPE_RNDWITHVAL */
      [rnd(5.0) < 1.0]  t.timeout {} //^In guard expression// //Random number generation//
    
      /* OPTYPE_ with v1 */
      [+(fi()) < 5] t.timeout {}          //^In guard expression// //^warning\: Function invocation// 
      [-(fi()) < 5] t.timeout {}          //^In guard expression// //^warning\: Function invocation// 
      [not fb()]    t.timeout {}          //^In guard expression// //^warning\: Function invocation// 
      [int2float(fi()) < 5.0] t.timeout {}          //^In guard expression// //^warning\: Function invocation// 
      

      /* OPTYPE_ with v1 v2 */
      [fi() + 1 < 5] t.timeout {}          //^In guard expression// //^warning\: Function invocation// 
      [fi() - 1 <= 5] t.timeout {}          //^In guard expression// //^warning\: Function invocation// 
      [fi() + 1 == 5] t.timeout {}          //^In guard expression// //^warning\: Function invocation// 
      [fi() / 1 > 5] t.timeout {}          //^In guard expression// //^warning\: Function invocation// 
      [fi() * 1 >= 5] t.timeout {}          //^In guard expression// //^warning\: Function invocation// 

      [all component.running] t.timeout {} //^In guard expression// //^warning\: State of component//
      [any component.running] t.timeout {} //^In guard expression// //^warning\: State of component//
      [ptc.running] t.timeout {} //^In guard expression// //^warning\: State of component//

      [any timer.running] t.timeout {} //^In guard expression// //^warning\: State of timer//
      [t.running] t.timeout {} //^In guard expression// //^warning\: State of timer//

      /* correct use of receive */
      [] p.receive(R:?) {}
      [] p.receive(R:T) {}
      [] p.receive(T) {}

      [] p.receive(VTF) {}
      [] p.receive(ftfp) {} //^In guard operation// //^In receive statement// //^warning\: Fuzzy parameter//
      [] p.receive(SR:{field:=ftfp}) {} //^In guard operation// //^In receive statement// //^warning\: Fuzzy parameter//

      [] p.receive(R:{field:=fi(), field2:=true}) {} //^In guard operation// //^In receive statement// //^warning\: Function invocation//

      [] p.receive(PT(false)) {}
      [] p.receive(PT(fb())) {} //^In guard operation// //^In receive statement// //^warning\: Function invocation//
    
      [] p.receive(SR:PST(ftfp)) {} //^In guard operation// //^In receive statement// //^warning\: Fuzzy parameter//
      [] p.receive(SR:PST(PT(fb()))) {} //^In guard operation// //^In receive statement// //^warning\: Function invocation//
    
      [] p.receive(SR:PST(PT(all component.running))) {} //^In guard operation// //^In receive statement// //^warning\: State of component//
    
      [] p.receive(PTD(false)) {}
      [] p.receive(PTD()) {}

      [] p.receive(VT) {}

      [] p.receive(R: modifies PT(false) := { field := 2 }) {}
      [] p.receive(R: modifies PT(fb()) := { field := 2 }) {}//^In guard operation// //^In receive statement// //^warning\: Function invocation//

      [] p.receive(R: modifies VT := { field := 2 }) {}
      [] p.receive(R: modifies ftfp := { field := 2 }) {} //^In guard operation// //^In receive statement// //^warning\: Fuzzy parameter//

      [] p.receive(R: modifies VT := ftfp) {} //^In guard operation// //^In receive statement// //^warning\: Fuzzy parameter//
    }
  }
}


// get_reference()->get_refd_assignment()->chk_immutability(get_reference()->get_dispname().c_str());